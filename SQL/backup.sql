/*
SQLyog Ultimate v12.08 (64 bit)
MySQL - 5.7.28-0ubuntu0.18.04.4 : Database - androluabox
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`androluabox` /*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */;

USE `androluabox`;

/*Table structure for table `auth_group` */

DROP TABLE IF EXISTS `auth_group`;

CREATE TABLE `auth_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(150) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

/*Data for the table `auth_group` */

/*Table structure for table `auth_group_permissions` */

DROP TABLE IF EXISTS `auth_group_permissions`;

CREATE TABLE `auth_group_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_group_permissions_group_id_permission_id_0cd325b0_uniq` (`group_id`,`permission_id`),
  KEY `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` (`permission_id`),
  CONSTRAINT `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_group_permissions_group_id_b120cbf9_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

/*Data for the table `auth_group_permissions` */

/*Table structure for table `auth_permission` */

DROP TABLE IF EXISTS `auth_permission`;

CREATE TABLE `auth_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_bin NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_permission_content_type_id_codename_01ab375a_uniq` (`content_type_id`,`codename`),
  CONSTRAINT `auth_permission_content_type_id_2f476e4b_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=45 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

/*Data for the table `auth_permission` */

insert  into `auth_permission`(`id`,`name`,`content_type_id`,`codename`) values (1,'Can add log entry',1,'add_logentry'),(2,'Can change log entry',1,'change_logentry'),(3,'Can delete log entry',1,'delete_logentry'),(4,'Can view log entry',1,'view_logentry'),(5,'Can add permission',2,'add_permission'),(6,'Can change permission',2,'change_permission'),(7,'Can delete permission',2,'delete_permission'),(8,'Can view permission',2,'view_permission'),(9,'Can add group',3,'add_group'),(10,'Can change group',3,'change_group'),(11,'Can delete group',3,'delete_group'),(12,'Can view group',3,'view_group'),(13,'Can add user',4,'add_user'),(14,'Can change user',4,'change_user'),(15,'Can delete user',4,'delete_user'),(16,'Can view user',4,'view_user'),(17,'Can add content type',5,'add_contenttype'),(18,'Can change content type',5,'change_contenttype'),(19,'Can delete content type',5,'delete_contenttype'),(20,'Can view content type',5,'view_contenttype'),(21,'Can add session',6,'add_session'),(22,'Can change session',6,'change_session'),(23,'Can delete session',6,'delete_session'),(24,'Can view session',6,'view_session'),(25,'Can add classification',7,'add_classification'),(26,'Can change classification',7,'change_classification'),(27,'Can delete classification',7,'delete_classification'),(28,'Can view classification',7,'view_classification'),(29,'Can add tutorial',8,'add_tutorial'),(30,'Can change tutorial',8,'change_tutorial'),(31,'Can delete tutorial',8,'delete_tutorial'),(32,'Can view tutorial',8,'view_tutorial'),(33,'Can add runtut',9,'add_runtut'),(34,'Can change runtut',9,'change_runtut'),(35,'Can delete runtut',9,'delete_runtut'),(36,'Can view runtut',9,'view_runtut'),(37,'Can add jxwd_fenlei',10,'add_jxwd_fenlei'),(38,'Can change jxwd_fenlei',10,'change_jxwd_fenlei'),(39,'Can delete jxwd_fenlei',10,'delete_jxwd_fenlei'),(40,'Can view jxwd_fenlei',10,'view_jxwd_fenlei'),(41,'Can add jxwd_context',11,'add_jxwd_context'),(42,'Can change jxwd_context',11,'change_jxwd_context'),(43,'Can delete jxwd_context',11,'delete_jxwd_context'),(44,'Can view jxwd_context',11,'view_jxwd_context');

/*Table structure for table `auth_user` */

DROP TABLE IF EXISTS `auth_user`;

CREATE TABLE `auth_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `password` varchar(128) COLLATE utf8_bin NOT NULL,
  `last_login` datetime(6) DEFAULT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(150) COLLATE utf8_bin NOT NULL,
  `first_name` varchar(30) COLLATE utf8_bin NOT NULL,
  `last_name` varchar(150) COLLATE utf8_bin NOT NULL,
  `email` varchar(254) COLLATE utf8_bin NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime(6) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

/*Data for the table `auth_user` */

/*Table structure for table `auth_user_groups` */

DROP TABLE IF EXISTS `auth_user_groups`;

CREATE TABLE `auth_user_groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_user_groups_user_id_group_id_94350c0c_uniq` (`user_id`,`group_id`),
  KEY `auth_user_groups_group_id_97559544_fk_auth_group_id` (`group_id`),
  CONSTRAINT `auth_user_groups_group_id_97559544_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `auth_user_groups_user_id_6a12ed8b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

/*Data for the table `auth_user_groups` */

/*Table structure for table `auth_user_user_permissions` */

DROP TABLE IF EXISTS `auth_user_user_permissions`;

CREATE TABLE `auth_user_user_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_user_user_permissions_user_id_permission_id_14a6b632_uniq` (`user_id`,`permission_id`),
  KEY `auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm` (`permission_id`),
  CONSTRAINT `auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

/*Data for the table `auth_user_user_permissions` */

/*Table structure for table `dhjz_classification` */

DROP TABLE IF EXISTS `dhjz_classification`;

CREATE TABLE `dhjz_classification` (
  `分类` varchar(20) NOT NULL,
  `建立时间` datetime(6) NOT NULL,
  `最近修改时间` datetime(6) NOT NULL,
  PRIMARY KEY (`分类`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/*Data for the table `dhjz_classification` */

insert  into `dhjz_classification`(`分类`,`建立时间`,`最近修改时间`) values ('其他动画','2019-06-08 09:40:55.656579','2019-06-08 09:40:55.656607'),('动画实战','2019-06-13 17:13:08.467191','2019-06-13 17:13:08.467218'),('属性动画','2019-06-08 09:40:48.235891','2019-06-08 09:40:48.235918'),('补间动画','2019-06-08 09:40:42.989796','2019-06-08 09:40:42.989823');

/*Table structure for table `dhjz_runtut` */

DROP TABLE IF EXISTS `dhjz_runtut`;

CREATE TABLE `dhjz_runtut` (
  `标题` varchar(20) NOT NULL,
  `教程` longtext NOT NULL,
  `建立时间` datetime(6) NOT NULL,
  `最近修改时间` datetime(6) NOT NULL,
  `所属标题` varchar(20) NOT NULL,
  PRIMARY KEY (`标题`),
  KEY `dhjz_runtut_所属标题_d6103e07_fk_dhjz_tutorial_标题` (`所属标题`),
  CONSTRAINT `dhjz_runtut_所属标题_d6103e07_fk_dhjz_tutorial_标题` FOREIGN KEY (`所属标题`) REFERENCES `dhjz_tutorial` (`标题`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/*Data for the table `dhjz_runtut` */

/*Table structure for table `dhjz_tutorial` */

DROP TABLE IF EXISTS `dhjz_tutorial`;

CREATE TABLE `dhjz_tutorial` (
  `标题` varchar(20) NOT NULL,
  `教程` longtext NOT NULL,
  `建立时间` datetime(6) NOT NULL,
  `最近修改时间` datetime(6) NOT NULL,
  `所属分类` varchar(20) NOT NULL,
  PRIMARY KEY (`标题`),
  KEY `dhjz_tutorial_所属分类_9cd07457_fk_dhjz_classification_分类` (`所属分类`),
  CONSTRAINT `dhjz_tutorial_所属分类_9cd07457_fk_dhjz_classification_分类` FOREIGN KEY (`所属分类`) REFERENCES `dhjz_classification` (`分类`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/*Data for the table `dhjz_tutorial` */

insert  into `dhjz_tutorial`(`标题`,`教程`,`建立时间`,`最近修改时间`,`所属分类`) values ('PageView动画教程','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\nshamrock=\r\n--布局请写在这里\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  {\r\n    PageView;--滑动窗体\r\n    layout_weight=\'1\';--剩余属性\r\n    id=\'滑动窗体\';--绑定ID\r\n  };\r\n};\r\n\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口\r\n\r\n--这里将用适配器为Pageview添加布局\r\nadp = ArrayPageAdapter()--设置适配器\r\n滑动窗体.setAdapter(adp)--绑定适配器\r\n--新建一个布局，将其添加至Pageview\r\n卡片 = {\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';\r\n  {\r\n    CardView;--卡片控件\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'20\';--卡片圆角\r\n    CardBackgroundColor=\'0xff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nadp.add(loadlayout(卡片))--利用适配器将布局添加至Pageview\r\nadp.add(loadlayout(卡片))\r\n--Pageview动画需要导入此包\r\nimport\'android.widget.PageView$PageTransformer\'\r\n\r\n默认参数 = 0.75--设置默认参数，后面计算动画参数\r\n--Pageview官方动画函数\r\n滑动窗体.setPageTransformer(true,PageTransformer{--获取到Pageview的位置\r\n  transformPage = function(view,position)\r\n    pageWidth = view.getWidth()\r\n    if position<-1 then\r\n      view.setAlpha(0)--设置透明度\r\n     elseif position<=0 then\r\n      view.setAlpha(1)\r\n      view.setTranslationX(0)--设置偏移量(X轴平移)\r\n      view.setScaleX(1)--设置X轴缩放\r\n      view.setScaleY(1)--设置Y轴缩放\r\n\r\n     elseif position<=1 then\r\n      view.setAlpha(1-position)\r\n      view.setTranslationX(pageWidth*-position)\r\n      动画参数 = 默认参数+(1-默认参数)*(1-Math.abs(position))--动态计算动画参数\r\n      view.setScaleX(动画参数)\r\n      view.setScaleY(动画参数)\r\n\r\n     else\r\n      view.setAlpha(0)\r\n    end\r\n  end\r\n})\r\n--这个为谷歌官方开源的动画函数，类似的还有很多很多\r\n--开源链接：https://github.com/ToxicBakery/ViewPagerTransforms','2019-06-11 16:05:02.600654','2019-06-11 16:05:02.600685','其他动画'),('仿盒子背景水波纹动画','import \'android.animation.AnimatorSet\'\r\nimport \'android.graphics.Paint\'\r\nimport \'android.animation.ObjectAnimator\'\r\nimport \'android.view.animation.AccelerateInterpolator\'\r\nimport \'android.graphics.Color\'\r\nbd = LuaDrawable(function(canvas,paint,draw)\r\n  paint.setColor(Color.WHITE)\r\n  paint.setStyle(Paint.Style.STROKE)\r\n  paint.setStrokeWidth(5)\r\n  canvas.drawCircle(draw.getBounds().centerX(),draw.getBounds().centerY(),draw.getBounds().height()/2-50,paint)\r\nend)\r\n\r\nSorrowClover=\r\n{\r\n  FrameLayout;--帧布局\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#F17F42\';--布局背景颜色(或图片路径)\r\n  {\r\n    LinearLayout;--线性布局\r\n    id=\'anime1\';\r\n    layout_width=\'400\';--布局宽度\r\n    layout_height=\'400\';--布局高度\r\n    BackgroundDrawable=bd;--布局背景颜色(或图片路径)\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    id=\'anime2\';\r\n    layout_width=\'400\';--布局宽度\r\n    layout_height=\'400\';--布局高度\r\n    BackgroundDrawable=bd;--布局背景颜色(或图片路径)\r\n    layout_gravity=\'center\';\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    id=\'anime3\';\r\n    layout_width=\'400\';--布局宽度\r\n    layout_height=\'400\';--布局高度\r\n    BackgroundDrawable=bd;--布局背景颜色(或图片路径)\r\n    layout_gravity=\'bottom|right\';\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\n\r\nanimatorSet = AnimatorSet()--设置组合动画\r\n--对应参数分别是（id，需要改变的属性，{动画开始时需要改变的属性的值，动画结束时需要改变的属性的值}）\r\nscaleX1 = ObjectAnimator.ofFloat(anime1, \"scaleX\", {0, 1})\r\nscaleY1 = ObjectAnimator.ofFloat(anime1, \"scaleY\", {0, 1})\r\nscaleX1.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限\r\nscaleX1.setRepeatMode(Animation.RESTART)--设置动画循环模式\r\nscaleX1.setDuration(2000)--动画时间\r\nscaleY1.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限\r\nscaleY1.setRepeatMode(Animation.RESTART)--设置动画循环模式\r\nscaleY1.setDuration(2000)--动画时间\r\nscaleX2 = ObjectAnimator.ofFloat(anime2, \"scaleX\", {0, 1})\r\nscaleY2 = ObjectAnimator.ofFloat(anime2, \"scaleY\", {0, 1})\r\nscaleX2.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限\r\nscaleX2.setRepeatMode(Animation.RESTART)--设置动画循环模式\r\nscaleX2.setDuration(3000)--动画时间\r\nscaleY2.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限\r\nscaleY2.setRepeatMode(Animation.RESTART)--设置动画循环模式\r\nscaleY2.setDuration(3000)--动画时间\r\nscaleX3 = ObjectAnimator.ofFloat(anime3, \"scaleX\", {0, 1})\r\nscaleY3 = ObjectAnimator.ofFloat(anime3, \"scaleY\", {0, 1})\r\nscaleX3.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限\r\nscaleX3.setRepeatMode(Animation.RESTART)--设置动画循环模式\r\nscaleX3.setDuration(2500)--动画时间\r\nscaleY3.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限\r\nscaleY3.setRepeatMode(Animation.RESTART)--设置动画循环模式\r\nscaleY3.setDuration(2500)--动画时间\r\nanimatorSet.setInterpolator(AccelerateInterpolator());--动画插值器\r\nanimatorSet.playTogether({scaleX1,scaleY1,scaleX2,scaleY2,scaleX3,scaleY3})--动画同时开始\r\nanimatorSet.start();--动画开始','2019-08-18 06:43:24.035960','2019-08-18 06:43:24.035988','动画实战'),('动画圆形进度条实战','import \'android.view.animation.RotateAnimation\'\r\nimport \'android.view.animation.Animation\'\r\nimport \'android.view.animation.AccelerateDecelerateInterpolator\'\r\nSorrowClover=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n  gravity=\"center\";\r\n  {\r\n    FrameLayout;--帧布局\r\n    layout_width=\'100dp\';--布局宽度\r\n    layout_height=\'100dp\';--布局高度\r\n    {\r\n      CardView;--卡片控件\r\n      id=\"cd1\";\r\n      layout_width=\'fill\';--卡片宽度\r\n      layout_height=\'fill\';--卡片高度\r\n      Elevation=\'0\';--阴影属性\r\n      radius=\'50dp\';--卡片圆角\r\n      CardBackgroundColor=\'#00ffffff\';--卡片背景颜色\r\n      {\r\n        CardView;--卡片控件\r\n        layout_gravity=\'top|center\';--子控件在父布局中的对齐方式\r\n        CardElevation=\'0\';--卡片阴影\r\n        layout_width=\'10dp\';--卡片宽度\r\n        layout_height=\'10dp\';--卡片高度\r\n        radius=\'5dp\';--卡片圆角\r\n        CardBackgroundColor=\'#FF7268E9\';--卡片背景颜色\r\n      };\r\n    };\r\n    {\r\n      CardView;--卡片控件\r\n      id=\"cd2\";\r\n      layout_width=\'fill\';--卡片宽度\r\n      layout_height=\'fill\';--卡片高度\r\n      Elevation=\'0\';--阴影属性\r\n      radius=\'50dp\';--卡片圆角\r\n      CardBackgroundColor=\'#00ffffff\';--卡片背景颜色\r\n      {\r\n        CardView;--卡片控件\r\n        layout_gravity=\'top|center\';--子控件在父布局中的对齐方式\r\n        CardElevation=\'0\';--卡片阴影\r\n        layout_width=\'10dp\';--卡片宽度\r\n        layout_height=\'10dp\';--卡片高度\r\n        radius=\'5dp\';--卡片圆角\r\n        CardBackgroundColor=\'#FF7268E9\';--卡片背景颜色\r\n      };\r\n    };\r\n    {\r\n      CardView;--卡片控件\r\n      id=\"cd3\";\r\n      layout_width=\'fill\';--卡片宽度\r\n      layout_height=\'fill\';--卡片高度\r\n      Elevation=\'0\';--阴影属性\r\n      radius=\'50dp\';--卡片圆角\r\n      CardBackgroundColor=\'#00ffffff\';--卡片背景颜色\r\n      {\r\n        CardView;--卡片控件\r\n        layout_gravity=\'top|center\';--子控件在父布局中的对齐方式\r\n        CardElevation=\'0\';--卡片阴影\r\n        layout_width=\'10dp\';--卡片宽度\r\n        layout_height=\'10dp\';--卡片高度\r\n        radius=\'5dp\';--卡片圆角\r\n        CardBackgroundColor=\'#FF7268E9\';--卡片背景颜色\r\n      };\r\n    };\r\n    {\r\n      CardView;--卡片控件\r\n      id=\"cd4\";\r\n      layout_width=\'fill\';--卡片宽度\r\n      layout_height=\'fill\';--卡片高度\r\n      Elevation=\'0\';--阴影属性\r\n      radius=\'50dp\';--卡片圆角\r\n      CardBackgroundColor=\'#00ffffff\';--卡片背景颜色\r\n      {\r\n        CardView;--卡片控件\r\n        layout_gravity=\'top|center\';--子控件在父布局中的对齐方式\r\n        CardElevation=\'0\';--卡片阴影\r\n        layout_width=\'10dp\';--卡片宽度\r\n        layout_height=\'10dp\';--卡片高度\r\n        radius=\'5dp\';--卡片圆角\r\n        CardBackgroundColor=\'#FF7268E9\';--卡片背景颜色\r\n      };\r\n    };\r\n    {\r\n      CardView;--卡片控件\r\n      id=\"cd5\";\r\n      layout_width=\'fill\';--卡片宽度\r\n      layout_height=\'fill\';--卡片高度\r\n      Elevation=\'0\';--阴影属性\r\n      radius=\'50dp\';--卡片圆角\r\n      CardBackgroundColor=\'#00ffffff\';--卡片背景颜色\r\n      {\r\n        CardView;--卡片控件\r\n        layout_gravity=\'top|center\';--子控件在父布局中的对齐方式\r\n        CardElevation=\'0\';--卡片阴影\r\n        layout_width=\'10dp\';--卡片宽度\r\n        layout_height=\'10dp\';--卡片高度\r\n        radius=\'5dp\';--卡片圆角\r\n        CardBackgroundColor=\'#FF7268E9\';--卡片背景颜色\r\n      };\r\n    };\r\n    {\r\n      CardView;--卡片控件\r\n      id=\"cd6\";\r\n      layout_width=\'fill\';--卡片宽度\r\n      layout_height=\'fill\';--卡片高度\r\n      Elevation=\'0\';--阴影属性\r\n      radius=\'50dp\';--卡片圆角\r\n      CardBackgroundColor=\'#00ffffff\';--卡片背景颜色\r\n      {\r\n        CardView;--卡片控件\r\n        layout_gravity=\'top|center\';--子控件在父布局中的对齐方式\r\n        CardElevation=\'0\';--卡片阴影\r\n        layout_width=\'10dp\';--卡片宽度\r\n        layout_height=\'10dp\';--卡片高度\r\n        radius=\'5dp\';--卡片圆角\r\n        CardBackgroundColor=\'#FF7268E9\';--卡片背景颜色\r\n      };\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\n\r\nfunction 动画(控件,时间)\r\n  旋转动画=RotateAnimation(0, 360,\r\n  Animation.RELATIVE_TO_SELF, 0.5,\r\n  Animation.RELATIVE_TO_SELF, 0.5)\r\n  旋转动画.setDuration(时间)--设置动画时间\r\n  旋转动画.setInterpolator(AccelerateDecelerateInterpolator())\r\n  旋转动画.setFillAfter(true)--设置动画结束后停留位置\r\n  旋转动画.setRepeatCount(-1)--设置无限循环\r\n  --绑定动画\r\n  控件.startAnimation(旋转动画)\r\nend\r\ntask(15,function()\r\n  动画(cd1,1500)\r\n  task(15,function()\r\n    动画(cd2,1500)\r\n    task(15,function()\r\n      动画(cd3,1500)\r\n      task(15,function()\r\n      动画(cd4,1500)\r\n      task(15,function()\r\n      动画(cd5,1500)\r\n      task(15,function()\r\n      动画(cd6,1500)\r\n      return true\r\n    end)\r\n      return true\r\n    end)\r\n      return true\r\n    end)\r\n      return true\r\n    end)\r\n    return true\r\n  end)\r\n  return true\r\nend)','2019-08-03 07:40:23.999906','2019-08-03 07:40:23.999933','动画实战'),('动画插值器','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'卡片\';--设置ID\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'1\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'10\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--设置属性动画\r\n--对应参数分别是（id，需要改变的属性，{动画开始时需要改变的属性的值，动画结束时需要改变的属性的值}）\r\n平移动画 = ObjectAnimator.ofFloat(卡片, \"X\",{0, activity.Width})\r\n平移动画.setInterpolator(DecelerateInterpolator())--动画插值器,具体取值看下方\r\n平移动画.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限\r\n平移动画.setRepeatMode(Animation.REVERSE)--设置动画循环模式\r\n平移动画.setDuration(1500)--动画时间\r\n平移动画.start()--动画开始\r\n\r\n--[[\r\nInterpolatort通常在动画中使用，主要来改变动画变化率。\r\n\r\nAccelerateDecelerateInterpolator()开始与结束的地方速率改变比较慢，在中间的时候加速\r\n\r\nAccelerateInterpolator()开始的地方速率改变比较慢，然后开始加速\r\n\r\nAnticipateInterpolator（）开始的时候向后然后向前甩\r\n\r\nAnticipateOvershootInterpolator（）开始的时候向后然后向前甩一定值后返回最后的值\r\n\r\nBounceInterpolator（）动画结束的时候弹起\r\n\r\nCycleInterpolator（）循环播放特定的次数，速率改变沿着正弦曲线\r\n\r\nDecelerateInterpolator（）在开始的地方快然后慢，实例经常使用它\r\n\r\nLinearInterpolator（）以常量速率改变\r\n\r\nOvershootInterpolator（）向前甩一定值后再回到原来位置\r\n]]','2019-06-08 14:34:53.204082','2019-06-08 14:34:53.204110','属性动画'),('卡片跟随重影动画实战','--创建布局，为教程提供良好的可视化\r\nshamrock=\r\n{\r\n  --关于帧布局，也就是后创建的布局会直接堆叠在前面创建的布局之上\r\n  FrameLayout;--帧布局\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    background=\'\';--布局背景颜色(或者图片路径)\r\n    gravity=\'center\';--设置居中\r\n    {\r\n      CardView;--卡片控件\r\n      id=\'背景卡片\';--绑定ID\r\n      layout_margin=\'0\';--卡片边距\r\n      layout_gravity=\'center\';--重力属性\r\n      Elevation=\'0\';--阴影属性\r\n      layout_width=\'100\';--卡片宽度\r\n      layout_height=\'100\';--卡片高度\r\n      radius=\'20\';--卡片圆角\r\n      CardBackgroundColor=\'#8c7e5cf8\';--卡片背景颜色\r\n    };\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    background=\'\';--布局背景颜色(或者图片路径)\r\n    gravity=\'center\';\r\n    {\r\n      CardView;--卡片控件\r\n      id=\'卡片\';--绑定ID\r\n      layout_margin=\'0\';--卡片边距\r\n      layout_gravity=\'center\';--重力属性\r\n      Elevation=\'0\';--阴影属性\r\n      layout_width=\'100\';--卡片宽度\r\n      layout_height=\'100\';--卡片高度\r\n      radius=\'20\';--卡片圆角\r\n      CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口\r\n--封装动画函数，避免后面重复的动画代码\r\nfunction 动画(view,x,y)\r\n  --导入组合动画包\r\n  import \"android.animation.AnimatorSet\"\r\n  --设置属性动画\r\n  animatorSet = AnimatorSet()--设置组合动画\r\n  --对应参数分别是（id，需要改变的属性，{动画开始时需要改变的属性的值，动画结束时需要改变的属性的值}）\r\n  scaleX = ObjectAnimator.ofFloat(view, \"X\", {view.getX(), x})\r\n  scaleY = ObjectAnimator.ofFloat(view, \"Y\", {view.getY(), y})\r\n  animatorSet.setDuration(1000)--动画时间\r\n  animatorSet.setInterpolator(DecelerateInterpolator());--动画插值器\r\n  animatorSet.play(scaleX).with(scaleY)--两个动画同时开始\r\n  animatorSet.start();--动画开始\r\nend\r\n--监听屏幕触摸事件\r\nfunction onTouchEvent(e)\r\n  --获取到触摸的坐标\r\n  X轴 = e.X\r\n  Y轴 = e.Y\r\n  --执行动画函数\r\n  动画(卡片,X轴,Y轴)\r\n  --延迟执行动画函数，实现重影效果\r\n  task(20,function()\r\n    动画(背景卡片,X轴,Y轴)\r\n  end)\r\nend\r\nprint(\"随意触摸屏幕查看效果\")','2019-06-16 05:57:12.925140','2019-06-16 05:57:12.925168','动画实战'),('属性动画概述','一，背景：\r\n    为了解决补间动画的缺陷，在 Android 3.0（API 11）开始，系统提供了一种全新的动画模式：属性动画（Property Animation）\r\n\r\n二，简介：\r\n    作用对象：任意 Java 对象\r\n    不再局限于 视图View对象\r\n    实现的动画效果：可自定义各种动画效果\r\n    不再局限于4种基本变换：平移、旋转、缩放 & 透明度\r\n\r\n三，特点：\r\n    作用对象进行了扩展：不只是View对象，甚至没对象也可以\r\n    动画效果：不只是4种基本变换，还有其他动画效果\r\n\r\n四，工作原理：\r\n    在一定时间间隔内，通过不断对值进行改变，并不断将该值赋给对象的属性，从而实现该对象在该属性上的动画效果\r\n    可以是任意对象的任意属性\r\n\r\n五，共有属性：\r\n    Duration --属性为动画持续时间 时间以毫秒为单位\r\n    repeatCount--动画的重复次数 \r\n    repeatMode --定义重复的行为 可取值:(Animation.RESTART从头开始)(Animation.REVERSE从结束开始)','2019-06-08 13:30:56.707981','2019-06-08 14:12:13.450543','属性动画'),('布局动画控制器','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  {\r\n    ListView;--列表视图\r\n    id=\'list\';--绑定id\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    --dividerHeight=\'\';--设置分隔线宽度,0表示无分隔线\r\n    background=\'\';--布局背景颜色(或者图片路径)\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--使用适配器为list添加列表\r\n数据={}\r\n--添加项目数组\r\nfor i=1,10 do\r\n  table.insert(数据,tostring(i))\r\nend\r\n--创建适配器\r\narray_adp=ArrayAdapter(activity,android.R.layout.simple_list_item_1,String(数据))\r\n--设置适配器\r\nlist.setAdapter(array_adp)\r\n\r\n--LayoutAnimationController可以控制一组控件按照规定显示 \r\n\r\n--导入类\r\nimport \"android.view.animation.AnimationUtils\"\r\nimport \"android.view.animation.LayoutAnimationController\"\r\n\r\n\r\n--创建一个Animation对象\r\nanimation = AnimationUtils.loadAnimation(activity,android.R.anim.slide_in_left)\r\n\r\n--得到对象\r\nlac = LayoutAnimationController(animation)\r\n\r\n--设置控件显示的顺序\r\nlac.setOrder(LayoutAnimationController.ORDER_NORMAL)\r\n--LayoutAnimationController.ORDER_NORMAL   顺序显示\r\n--LayoutAnimationController.ORDER_REVERSE 反显示\r\n--LayoutAnimationController.ORDER_RANDOM 随机显示\r\n\r\n--设置控件显示间隔时间\r\nlac.setDelay(1)--这里单位是秒\r\n\r\n--设置组件应用\r\nlist.setLayoutAnimation(lac)','2019-06-08 14:55:17.090717','2019-06-08 14:55:17.090746','其他动画'),('平移动画','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'卡片\';--设置ID\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'1\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'10\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--设置属性动画\r\n--对应参数分别是（id，需要改变的属性，{动画开始时需要改变的属性的值，动画结束时需要改变的属性的值}）\r\n平移动画 = ObjectAnimator.ofFloat(卡片, \"Y\",{卡片.getY(), activity.Height})\r\n平移动画.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限\r\n平移动画.setRepeatMode(Animation.REVERSE)--循环模式\r\n平移动画.setInterpolator(DecelerateInterpolator())--设置插值器\r\n平移动画.setDuration(1500)--设置动画时间\r\n平移动画.start()--开始动画','2019-06-08 14:07:09.467271','2019-06-08 14:07:09.467299','属性动画'),('平移动画教程','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'卡片\';--设置ID\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'1\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'10\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--设置动画的属性\r\n平移动画=TranslateAnimation(0, 0, 55, 0)\r\n平移动画.setDuration(800)--设置动画时间\r\n平移动画.setFillAfter(true)--设置动画后停留位置\r\n平移动画.setRepeatCount(-1)--设置无限循环\r\n--绑定动画\r\n卡片.startAnimation(平移动画)\r\n\r\n--[[\r\n平移动画属性详解：\r\nTranslateAnimation(float fromXDelta, float toXDelta, float fromYDelta, float toYDelta)\r\nfloat fromXDelta 动画开始的点离当前View X坐标上的差值 \r\nfloat toXDelta 动画结束的点离当前View X坐标上的差值 \r\nfloat fromYDelta 动画开始的点离当前View Y坐标上的差值 \r\nfloat toYDelta 动画结束的点离当前View Y坐标上的差值 \r\n]]','2019-06-08 12:08:11.839030','2019-06-08 12:08:11.839058','补间动画'),('揭露动画教程','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'卡片\';--绑定ID\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'20\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--揭露动画一定要设置延时，并在延时事件里启动\r\ntask(100,function()\r\n--设置揭露动画，对于参数为(ID,动画圆心X轴，动画圆心Y轴,动画开始时半径,动画结束时半径)\r\n  揭露动画 = ViewAnimationUtils.createCircularReveal(卡片,0,0,300,0)\r\n  揭露动画.setDuration(5000)--设置动画时间\r\n  揭露动画.start()--开始动画\r\nend)','2019-06-11 15:01:41.141698','2019-06-11 15:01:41.141725','其他动画'),('旋转动画','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'卡片\';--设置ID\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'1\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'10\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--设置属性动画\r\n--对应参数分别是（id，需要改变的属性，{动画开始时需要改变的属性的值，动画结束时需要改变的属性的值}）\r\n旋转动画 = ObjectAnimator .ofFloat(卡片, \"rotationX\", {0, 180})\r\n旋转动画.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限\r\n旋转动画.setRepeatMode(Animation.REVERSE)--循环模式\r\n旋转动画.setDuration(2000)--动画时间\r\n旋转动画.start()--动画开始','2019-06-08 14:14:44.999865','2019-06-08 14:14:45.000917','属性动画'),('旋转动画教程','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'卡片\';--设置ID\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'1\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'10\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--设置动画的属性\r\n旋转动画=RotateAnimation(180, 0,\r\nAnimation.RELATIVE_TO_SELF, 0.5,\r\nAnimation.RELATIVE_TO_SELF, 0.5)\r\n旋转动画.setDuration(440)--设置动画时间\r\n旋转动画.setFillAfter(true)--设置动画结束后停留位置\r\n旋转动画.setRepeatCount(-1)--设置无限循环\r\n--绑定动画\r\n卡片.startAnimation(旋转动画)\r\n\r\n--[[\r\n旋转动画属性详解：\r\nRotateAnimation(float fromDegrees, float toDegrees, int pivotXType, float pivotXValue, int pivotYType, float pivotYValue) \r\nfloat fromDegrees：旋转的开始角度.\r\nfloat toDegrees：旋转的结束角度.\r\nint pivotXType：X轴的伸缩模式，可以取值为ABSOLUTE、RELATIVE_TO_SELF、RELATIVE_TO_PARENT.\r\nfloat pivotXValue：X坐标的伸缩值\r\nint pivotYType：Y轴的伸缩模式，可以取值为ABSOLUTE、RELATIVE_TO_SELF、RELATIVE_TO_PARENT.\r\nfloat pivotYValue：Y坐标的伸缩值.\r\n]]','2019-06-08 12:01:32.790864','2019-06-08 12:09:06.268920','补间动画'),('窗口动画','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'卡片\';--设置ID\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'1\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'10\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--设置窗口动画\r\n--对应参数为（进入时动画，离开时动画）\r\nactivity.overridePendingTransition(android.R.anim.fade_in,android.R.anim.fade_out)--淡入淡出\r\n\r\n--[[\r\n！！部分窗口动画无法正常使用\r\nandroid.R.anim.accelerate_decelerate_interpolator\r\nandroid.R.anim.accelerate_interpolator\r\nandroid.R.anim.anticipate_interpolator\r\nandroid.R.anim.anticipate_overshoot_interpolator\r\nandroid.R.anim.bounce_interpolator\r\nandroid.R.anim.cycle_interpolator\r\nandroid.R.anim.decelerate_interpolatoandroid.R.anim.r\r\nandroid.R.anim.fade_in\r\nandroid.R.anim.fade_out\r\nandroid.R.anim.linear_interpolator\r\nandroid.R.anim.overshoot_interpolator\r\nandroid.R.anim.slide_in_left\r\nandroid.R.anim.slide_out_right\r\n]]','2019-06-08 14:48:17.492720','2019-06-08 14:48:17.492748','其他动画'),('等待窗口动画实战','--创建一个布局，教程提供良好的可视化\r\ndingyi=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'150\';--卡片宽度\r\n    layout_height=\'150\';--卡片高度\r\n    radius=\'75\';--卡片圆角\r\n    CardBackgroundColor=\'#ff1e8ae8\';--卡片背景颜色\r\n    {\r\n      RippleLayout,--水波纹布局\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      RippleColor=\'#ffffff\';--水波纹颜色\r\n      RippleLineColor=\'#ffffff\';--水波纹线条颜色\r\n      circle=true;--长按圆圈\r\n      {\r\n        TextView;--文本控件\r\n        id=\'按钮\';--绑定ID\r\n        layout_width=\'fill\';--文本宽度\r\n        layout_height=\'fill\';--文本高度\r\n        Gravity=\'center\';--重力属性\r\n        textColor=\'#ffffff\';--文本颜色\r\n        text=\'点击弹窗\';--显示的文本\r\n        textSize=\'12sp\';--文本大小\r\n      };\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(dingyi))--将布局添加至窗口\r\n--设置按钮点击弹出弹窗\r\n按钮.onClick=function()\r\n--设置弹出式窗口布局\r\n  popbj={\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'80%w\';--布局宽度\r\n    layout_height=\'30%h\';--布局高度\r\n    background=\'#00ffffff\';--布局背景颜色(或者图片路径)\r\n    gravity=\'center\';--设置居中\r\n    {\r\n      CardView;--卡片控件\r\n      layout_margin=\'10\';--卡片边距\r\n      layout_gravity=\'center\';--重力属性\r\n      Elevation=\'10\';--阴影属性\r\n      layout_width=\'fill\';--卡片宽度\r\n      layout_height=\'fill\';--卡片高度\r\n      radius=\'20\';--卡片圆角\r\n      CardBackgroundColor=\'#ffffff\';--卡片背景颜色\r\n      {\r\n        LinearLayout;--线性布局\r\n        Orientation=\'vertical\';--布局方向\r\n        layout_width=\'fill\';--布局宽度\r\n        layout_height=\'fill\';--布局高度\r\n        background=\'\';--布局背景颜色(或者图片路径)\r\n        gravity=\'center\';--设置居中\r\n        {\r\n          LinearLayout;--线性布局\r\n          Orientation=\'vertical\';--布局方向\r\n          layout_width=\'55\';--布局宽度\r\n          layout_height=\'55\';--布局高度\r\n          background=\'\';--布局背景颜色(或者图片路径)\r\n          gravity=\'center\';--设置居中\r\n          {\r\n            CardView;--卡片控件\r\n            layout_margin=\'0\';--卡片边距\r\n            layout_gravity=\'center\';--重力属性\r\n            Elevation=\'0\';--阴影属性\r\n            layout_width=\'50\';--卡片宽度\r\n            layout_height=\'17.5\';--卡片高度\r\n            radius=\'0\';--卡片圆角\r\n            CardBackgroundColor=\'#ff1e8ae8\';--卡片背景颜色\r\n          };\r\n          {\r\n            CardView;--卡片控件\r\n            layout_margin=\'0\';--卡片边距\r\n            layout_gravity=\'center\';--重力属性\r\n            Elevation=\'0\';--阴影属性\r\n            layout_width=\'25\';--卡片宽度\r\n            layout_height=\'8.25\';--卡片高度\r\n            radius=\'0\';--卡片圆角\r\n            CardBackgroundColor=\'#ff1e8ae8\';--卡片背景颜色\r\n          };\r\n        };\r\n        {\r\n          LinearLayout;--线性布局\r\n          Orientation=\'vertical\';--布局方向\r\n          layout_width=\'105\';--布局宽度\r\n          layout_height=\'105\';--布局高度\r\n          background=\'\';--布局背景颜色(或者图片路径)\r\n          gravity=\'center\';--设置居中\r\n          {\r\n            CardView;--卡片控件\r\n            layout_margin=\'0\';--卡片边距\r\n            layout_gravity=\'center\';--重力属性\r\n            Elevation=\'0\';--阴影属性\r\n            layout_width=\'100\';--卡片宽度\r\n            layout_height=\'100\';--卡片高度\r\n            radius=\'50\';--卡片圆角\r\n            CardBackgroundColor=\'#ff1e8ae8\';--卡片背景颜色\r\n            {\r\n              CardView;--卡片控件\r\n              layout_margin=\'0\';--卡片边距\r\n              layout_gravity=\'center\';--重力属性\r\n              Elevation=\'0\';--阴影属性\r\n              layout_width=\'90\';--卡片宽度\r\n              layout_height=\'90\';--卡片高度\r\n              radius=\'45\';--卡片圆角\r\n              CardBackgroundColor=\'#ffffff\';--卡片背景颜色\r\n              {\r\n                CardView;--卡片控件\r\n                layout_margin=\'0\';--卡片边距\r\n                layout_gravity=\'center\';--重力属性\r\n                Elevation=\'0\';--阴影属性\r\n                layout_width=\'70\';--卡片宽度\r\n                layout_height=\'70\';--卡片高度\r\n                radius=\'35\';--卡片圆角\r\n                CardBackgroundColor=\'#ffffff\';--卡片背景颜色\r\n                {\r\n                  CardView;--卡片控件\r\n                  id=\'指针\';--绑定ID\r\n                  layout_margin=\'0\';--卡片边距\r\n                  layout_gravity=\'top|center\';--重力属性\r\n                  Elevation=\'0\';--阴影属性\r\n                  layout_width=\'5\';--卡片宽度\r\n                  layout_height=\'35\';--卡片高度\r\n                  radius=\'1\';--卡片圆角\r\n                  CardBackgroundColor=\'#ff1e8ae8\';--卡片背景颜色\r\n                };\r\n              };\r\n            };\r\n          };\r\n        };\r\n        {\r\n          LinearLayout;--线性布局\r\n          Orientation=\'vertical\';--布局方向\r\n          layout_width=\'fill\';--布局宽度\r\n          layout_height=\'100\';--布局高度\r\n          background=\'\';--布局背景颜色(或者图片路径)\r\n          gravity=\'center\';--设置居中\r\n          {\r\n            TextView;--文本控件\r\n            id=\'等待文字\';--绑定ID\r\n            layout_width=\'wrap\';--文本宽度\r\n            layout_height=\'wrap\';--文本高度\r\n            Gravity=\'center\';--重力属性\r\n            textColor=\'#ff1e8ae8\';--文本颜色\r\n            text=\'loading\';--显示的文本\r\n            textSize=\'28sp\';--文本大小\r\n          };\r\n        };\r\n      };\r\n    };\r\n  };\r\n\r\n\r\n  pop=PopupWindow(activity)--创建PopupWindow弹出式窗口\r\n  pop.setContentView(loadlayout(popbj))--设置布局\r\n  pop.setWidth(activity.Width*0.8)--设置宽度\r\n  pop.getBackground().setAlpha(0)--将pop自带的背景透明\r\n  pop.setHeight(activity.Height*0.3)--设置高度\r\n  pop.setFocusable(true)--设置可获得焦点\r\n  pop.setTouchable(true)--设置可触摸\r\n  --设置点击外部区域是否可以消失\r\n  pop.setOutsideTouchable(false)\r\n  --居中显示\r\n  pop.showAtLocation(view,Gravity.CENTER,0,0)\r\n\r\n  --设置动画的属性\r\n  旋转动画=RotateAnimation(0,360 ,Animation.RELATIVE_TO_SELF, 1,Animation.RELATIVE_TO_SELF, 1)\r\n  旋转动画.setDuration(800)--设置动画时间\r\n  旋转动画.setFillAfter(true)--设置动画结束后停留位置\r\n  旋转动画.setRepeatCount(-1)--设置无限循环\r\n  旋转动画.setRepeatMode(Animation.RESTART)--设置循环模式\r\n  --绑定动画\r\n  指针.startAnimation(旋转动画)\r\n\r\n  --设置动画属性\r\n  透明动画=AlphaAnimation(1,0)\r\n  透明动画.setDuration(800)--设置动画时间\r\n  透明动画.setFillAfter(true)--设置动画后停留位置\r\n  透明动画.setRepeatCount(-1)--设置无限循环\r\n  透明动画.setRepeatMode(Animation.REVERSE)--设置循环模式\r\n  --绑定动画\r\n  等待文字.startAnimation(透明动画)\r\n\r\nend','2019-06-14 09:43:54.235783','2019-06-14 09:45:01.726965','动画实战'),('简单启动动画实战','--创建布局，提供良好的示例\r\nimport \"android.animation.AnimatorSet\"\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  Gravity=\"center\";--设置居中\r\n  {\r\n    LinearLayout;--线性布局\r\n    id=\"卡片1\";--绑定id\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'200\';--布局宽度\r\n    layout_height=\'200\';--布局高度\r\n    background=\'\';--布局背景颜色(或者图片路径)\r\n    Gravity=\"center\";--设置居中\r\n    {\r\n      CardView;--卡片控件\r\n      layout_margin=\'0\';--卡片边距\r\n      layout_gravity=\'center\';--重力属性\r\n      Elevation=\'10\';--阴影属性\r\n      layout_width=\'100\';--卡片宽度\r\n      layout_height=\'100\';--卡片高度\r\n      radius=\'50\';--卡片圆角\r\n      CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n    };\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    id=\"卡片2\";--绑定id\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'200\';--布局宽度\r\n    layout_height=\'500\';--布局高度\r\n    background=\'\';--布局背景颜色(或者图片路径)\r\n    Gravity=\"center\";--设置居中\r\n    {\r\n      CardView;--卡片控件\r\n      layout_margin=\'0\';--卡片边距\r\n      layout_gravity=\'center\';--重力属性\r\n      Elevation=\'10\';--阴影属性\r\n      layout_width=\'100\';--卡片宽度\r\n      layout_height=\'400\';--卡片高度\r\n      radius=\'20\';--卡片圆角\r\n      CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口\r\n\r\n平移动画1 = ObjectAnimator.ofFloat(卡片1, \"X\",{-200, activity.Width/2-100})--设置属性动画\r\n平移动画1.setInterpolator(OvershootInterpolator())--设置插值器\r\n平移动画1.setDuration(1300)--设置动画时间\r\n平移动画1.start()--开始动画\r\n\r\n--设置属性动画\r\nanimatorSet = AnimatorSet()--设置组合动画\r\n平移动画2 = ObjectAnimator.ofFloat(卡片2, \"X\", {-200, activity.Width/2-100})\r\n旋转动画 = ObjectAnimator.ofFloat(卡片2, \"rotation\", {0, 15})\r\nanimatorSet.setDuration(400)--动画时间\r\nanimatorSet.setInterpolator(DecelerateInterpolator());--动画插值器\r\n旋转动画.setRepeatCount(1)--设置动画重复次数\r\n旋转动画.setRepeatMode(Animation.REVERSE)--设置动画循环模式\r\nanimatorSet.play(平移动画2).before(旋转动画)--先执行平移动画2，再执行旋转动画\r\nanimatorSet.start();--动画开始','2019-06-13 17:13:57.417109','2019-06-13 17:16:34.347111','动画实战'),('简单躲避球动画实战','--导入组合动画类\r\nimport \"android.animation.AnimatorSet\"\r\n--创建布局\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  Gravity=\"center\";--设置居中\r\n  {\r\n    LinearLayout;--线性布局\r\n    id=\"按钮布局\";--绑定id\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'400\';--布局宽度\r\n    layout_height=\'200\';--布局高度\r\n    background=\'\';--布局背景颜色(或者图片路径)\r\n    Gravity=\"center\";--设置居中\r\n    {\r\n      CardView;--卡片控件\r\n      id=\"按钮\";--绑定id\r\n      layout_margin=\'0\';--卡片边距\r\n      layout_gravity=\'center\';--重力属性\r\n      Elevation=\'0\';--阴影属性\r\n      layout_width=\'100\';--卡片宽度\r\n      layout_height=\'100\';--卡片高度\r\n      radius=\'50\';--卡片圆角\r\n      CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n    };\r\n    {\r\n      TextView;--文本控件\r\n      id=\"显示文字\";--绑定id\r\n      layout_width=\'wrap\';--文本宽度\r\n      layout_height=\'wrap\';--文本高度\r\n      Gravity=\'center\';--重力属性\r\n      textColor=\'#000000\';--文本颜色\r\n      text=\'来点我呀\';--显示的文本\r\n      textSize=\'16sp\';--文本大小\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口\r\n显示文字列表={\"点不到我吧~\",\"来抓我呀~\",\"略略略~\",\"你好笨哦~\",\"来呀来呀~\"}--创建一个显示文字的表\r\n\r\n按钮.onClick=function()--按钮点击事件\r\n\r\n  x轴=math.random(0,activity.Width-400)--获取x轴随机数\r\n  y轴=math.random(0,tointeger(activity.Height*0.8))--获取y轴随机数\r\n  显示文字键=math.random(1,4)--获取显示文字随机数\r\n\r\n  --设置属性动画\r\n  animatorSet = AnimatorSet()--设置组合动画\r\n  --对应参数分别是（id，需要改变的属性，{动画开始时需要改变的属性的值，动画结束时需要改变的属性的值}）\r\n  scaleX = ObjectAnimator.ofFloat(按钮布局, \"X\", {按钮布局.getX(), x轴})\r\n  scaleY = ObjectAnimator.ofFloat(按钮布局, \"Y\", {按钮布局.getY(), y轴})\r\n  animatorSet.setDuration(1000)--动画时间\r\n  animatorSet.setInterpolator(DecelerateInterpolator());--动画插值器\r\n  animatorSet.play(scaleX).with(scaleY)--两个动画同时开始\r\n  --animatorSet.play(scaleX).before(scaleY)--先执行scaleX，再执行scaleY\r\n  animatorSet.start();--动画开始\r\n  显示文字.Text=显示文字列表[显示文字键]--随机显示文字\r\n\r\nend','2019-06-14 15:59:47.928470','2019-06-15 08:46:05.486617','动画实战'),('组合动画','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\n--组合动画需要导入此包\r\nimport \"android.animation.AnimatorSet\"\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'卡片\';--设置ID\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'1\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'10\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--设置属性动画\r\nanimatorSet = AnimatorSet()--设置组合动画\r\n--对应参数分别是（id，需要改变的属性，{动画开始时需要改变的属性的值，动画结束时需要改变的属性的值}）\r\nscaleX = ObjectAnimator.ofFloat(卡片, \"scaleX\", {1, 0})\r\nscaleY = ObjectAnimator.ofFloat(卡片, \"scaleY\", {1, 0})\r\n--组合动画的循环需要挨个设置\r\nscaleX.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限\r\nscaleX.setRepeatMode(Animation.REVERSE)--设置动画循环模式\r\nscaleY.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限\r\nscaleY.setRepeatMode(Animation.REVERSE)--设置动画循环模式\r\nanimatorSet.setDuration(2000)--动画时间\r\nanimatorSet.setInterpolator(DecelerateInterpolator());--动画插值器\r\nanimatorSet.playTogether({scaleX,scaleY})--两个动画同时开始\r\n--animatorSet.playSequentially({scaleX,scaleY})--先执行scaleX，再执行scaleY\r\nanimatorSet.start();--动画开始','2019-06-08 14:21:46.413284','2019-08-15 04:53:55.231657','属性动画'),('细胞球动画实战','--创建布局\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  Gravity=\"center\";--设置居中\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'80%w\';--布局宽度\r\n    layout_height=\'80%h\';--布局高度\r\n    background=\'#ff7e5cf8\';--布局背景颜色(或者图片路径)\r\n    Gravity=\"center\";--设置居中\r\n    {\r\n      LinearLayout;--线性布局\r\n      id=\"框\";--绑定id\r\n      layout_margin=\"3\";--设置边距\r\n      Orientation=\'vertical\';--布局方向\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n      gravity=\"center\";--设置居中\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口\r\n\r\nfunction 添加圆(cardid)--封装添加函数\r\n  大小=math.random(50,150)--随机大小\r\n  圆={--定义布局表\r\n    CardView;--卡片控件\r\n    id=cardid;--绑定id\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=大小;--卡片宽度\r\n    layout_height=大小;--卡片高度\r\n    radius=大小/2;--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n  框.addView(loadlayout(圆))--添加布局至主布局\r\nend\r\n\r\nfunction 动画(view,x,y)--封装动画函数\r\n  --导入组合动画包\r\n  import \"android.animation.AnimatorSet\"\r\n  --设置属性动画\r\n  animatorSet = AnimatorSet()--设置组合动画\r\n  --对应参数分别是（id，需要改变的属性，{动画开始时需要改变的属性的值，动画结束时需要改变的属性的值}）\r\n  scaleX = ObjectAnimator.ofFloat(view, \"X\", {view.getX(), x})\r\n  scaleY = ObjectAnimator.ofFloat(view, \"Y\", {view.getY(), y})\r\n  animatorSet.setDuration(1000)--动画时间\r\n  animatorSet.setInterpolator(DecelerateInterpolator());--动画插值器\r\n  animatorSet.play(scaleX).with(scaleY)--两个动画同时开始\r\n  animatorSet.start();--动画开始\r\nend\r\n\r\nfunction 随意坐标(cardid)--封装随意坐标函数\r\n  x轴=math.random(tointeger(activity.Width*0.1+1.5),tointeger(activity.Width*0.9-1.5-200))--随机x轴\r\n  y轴=math.random(tointeger(activity.Height*0.1+1.5),tointeger(activity.Height*0.9-1.5-200))--随机y轴\r\n  动画(cardid,x轴,y轴)--调用动画函数\r\nend\r\n\r\nfor i=1,20 do--循环添加圆\r\n  添加圆(\"圆\"..i)\r\nend\r\n\r\n--Ticker定时器\r\nti=Ticker()\r\nti.Period=500--间隔\r\nti.onTick=function()--定时器函数\r\n  随意坐标(圆1)\r\n  task(100,function()\r\n    随意坐标(圆2)\r\n    随意坐标(圆3)\r\n    随意坐标(圆4)\r\n  end)\r\n  随意坐标(圆5)\r\n  随意坐标(圆6)\r\n  随意坐标(圆7)\r\n  task(100,function()\r\n    随意坐标(圆8)\r\n    随意坐标(圆9)\r\n    随意坐标(圆10)\r\n  end)\r\n  随意坐标(圆11)\r\n  task(100,function()\r\n    随意坐标(圆12)\r\n    随意坐标(圆13)\r\n    随意坐标(圆14)\r\n  end)\r\n  随意坐标(圆15)\r\n  随意坐标(圆16)\r\n  随意坐标(圆17)\r\n  task(100,function()\r\n    随意坐标(圆18)\r\n    随意坐标(圆19)\r\n    随意坐标(圆20)\r\n  end)\r\nend\r\n--启动Ticker定时器\r\nti.start()\r\n\r\nfunction onStop()--活动停止监听\r\n  ti.stop()--停止定时器\r\nend','2019-06-23 02:35:52.905343','2019-06-23 02:35:52.905372','动画实战'),('缩放动画','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'卡片\';--设置ID\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'1\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'10\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--设置属性动画\r\n--对应参数分别是（id，需要改变的属性，{动画开始时需要改变的属性的值，动画结束时需要改变的属性的值}）\r\n缩放动画 = ObjectAnimator.ofFloat(卡片, \"scaleX\", {1, 0})\r\n缩放动画.setRepeatCount(-1)--设置动画重复次数，这里-1代表无\r\n缩放动画.setRepeatMode(Animation.REVERSE)--设置循环模式\r\n缩放动画.setDuration(2000)--设置动画时间\r\n缩放动画.setInterpolator(DecelerateInterpolator());--设置动画插值器\r\n缩放动画.start();--开始动画','2019-06-08 13:59:02.017232','2019-06-08 13:59:02.017260','属性动画'),('缩放动画教程','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'卡片\';--设置ID\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'1\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'10\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--设置动画的属性\r\n缩放动画=ScaleAnimation(0,1,0,1,Animation.RELATIVE_TO_SELF,0.5,Animation.RELATIVE_TO_SELF,0.5)\r\n缩放动画.setDuration(800)--设置动画时间\r\n缩放动画.setFillAfter(true)--设置动画后停留位置\r\n缩放动画.setRepeatCount(-1)--设置无限循环\r\n--绑定动画\r\n卡片.startAnimation(缩放动画)\r\n\r\n--[[\r\n缩放动画属性详解：\r\nScaleAnimation(float fromX, float toX, float fromY, float toY,int pivotXType, float pivotXValue, int pivotYType, float pivotYValue) \r\nfloat fromX 动画起始时 X坐标上的伸缩尺寸 \r\nfloat toX 动画结束时 X坐标上的伸缩尺寸 \r\nfloat fromY 动画起始时Y坐标上的伸缩尺寸 \r\nfloat toY 动画结束时Y坐标上的伸缩尺寸 \r\nint pivotXType 动画在X轴相对于物件位置类型 \r\nfloat pivotXValue 动画相对于物件的X坐标的开始位置 \r\nint pivotYType 动画在Y轴相对于物件位置类型 \r\nfloat pivotYValue 动画相对于物件的Y坐标的开始位置 \r\npivotXType有三种默认值：\r\n\r\nAnimAtion.RELATIVE_TO_PARENT 相对于父控件\r\n\r\nAnimAtion.RELATIVE_TO_SELF 相对于符自己\r\n\r\nAnimAtion.RELATIVE_TO_ABSOLUTE 绝对坐标\r\n]]','2019-06-08 12:22:47.655542','2019-06-08 12:22:47.655595','补间动画'),('背景颜色动画','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\n--背景颜色动画需要导入此包\r\nimport \"android.animation.ArgbEvaluator\"\r\nimport \"android.graphics.Color\"\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'卡片\';--设置ID\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'1\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'10\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--设置属性动画\r\n--对应参数分别是（id，需要改变的属性，{此处可以是多个值，分别表示每次的颜色}）\r\n背景动画 = ObjectAnimator.ofInt(卡片,\"backgroundColor\",{Color.RED, Color.BLUE, Color.GRAY})\r\n背景动画.setInterpolator(DecelerateInterpolator())--动画插值器\r\n背景动画.setDuration(1500)--动画时间\r\n背景动画.setRepeatCount(-1)--动画循环\r\n背景动画.setRepeatMode(Animation.REVERSE)--循环模式\r\n背景动画.setEvaluator(ArgbEvaluator())\r\n--[[\r\nArgbEvaluator：这种评估者可以用来执行类型之间的插值整数值代表ARGB颜色。\r\nFloatEvaluator：这种评估者可以用来执行浮点值之间的插值。\r\nIntEvaluator：这种评估者可以用来执行类型int值之间的插值。\r\nRectEvaluator：这种评估者可以用来执行类型之间的插值矩形值。\r\n\r\n由于本例是改变View的backgroundColor属性的背景颜色所以此处使用ArgbEvaluator\r\n]]\r\n背景动画.start()--动画开始','2019-06-08 14:40:07.186451','2019-06-08 14:43:44.415809','属性动画'),('补间动画概述','一，作用对象：\r\n    视图控件（View）\r\n    如TextView、Button等等\r\n    不可作用于View组件的属性，如：颜色、背景、长度等等\r\n\r\n二，原理：\r\n    通过确定开始的视图样式 & 结束的视图样式、中间动画变化过程由系统补全来确定一个动画\r\n    结束的视图样式：平移、缩放、旋转 & 透明度样式\r\n    即补间动画的动画效果就是：平移、缩放、旋转 & 透明度动画\r\n\r\n三，分类：\r\n    根据不同的动画效果，补间动画分为4种动画：\r\n    平移动画（Translate）\r\n    缩放动画（scale）\r\n    旋转动画（rotate）\r\n    透明度动画（alpha）\r\n\r\n四，共有属性：\r\n    Duration --属性为动画持续时间 时间以毫秒为单位\r\n    fillAfter --当设置为true,该动画转化在动画结束后被应用\r\n    fillBefore --当设置为true,该动画转化在动画开始前被应用\r\n    repeatCount--动画的重复次数 \r\n    repeatMode --定义重复的行为 可取值:(Animation.RESTART从头开始)(Animation.REVERSE从结束开始)\r\n    startOffset --动画之间的时间间隔，从上次动画停多少时间开始执行下个动画\r\n    id.startAnimation(Animation)--设置控件开始应用这个动画\r\n\r\n五，动画监听：\r\n    import \"android.view.animation.Animation$AnimationListener\"\r\n    动画.setAnimationListener(AnimationListener{\r\n      onAnimationStart=function()\r\n        print\"动画开始\"\r\n      end,\r\n      onAnimationEnd=function()\r\n        print\"动画结束\"\r\n      end,\r\n      onAnimationRepeat=function()\r\n        print\"动画重复\"\r\n      end})','2019-06-08 09:51:17.073128','2019-06-08 13:49:25.066271','补间动画'),('透明动画','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'卡片\';--设置ID\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'1\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'10\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--设置属性动画\r\n--第一个参数为id,第二个参数为 动画改变的类型,第三,第四个参数依次是开始透明度和结束透明度,注意用table表的形式（大括号括起来）。\r\n透明动画 = ObjectAnimator.ofFloat(卡片, \"alpha\", {0, 1})\r\n透明动画.setDuration(2000)--设置动画时间\r\n透明动画.setInterpolator(DecelerateInterpolator())--设置动画插值器，减速\r\n透明动画.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限\r\n透明动画.setRepeatMode(Animation.REVERSE)--设置动画循环模式。\r\n透明动画.start()--启动动画。','2019-06-08 13:51:18.320528','2019-06-08 13:51:18.320556','属性动画'),('透明动画教程','--为了方便学习理解，我会用中文变量进行命名，但真正的项目中不推荐用中文哦\r\n--首先创建一个布局进行动画测试\r\nshamrock=--创建一个布局表并将其赋给变量shamrock\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'卡片\';--设置ID\r\n    layout_margin=\'0\';--卡片边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'1\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'10\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局表添加至窗口\r\n\r\n--设置动画的属性\r\n透明动画=AlphaAnimation(0,1)\r\n透明动画.setDuration(800)--设置动画时间\r\n透明动画.setFillAfter(true)--设置动画后停留位置\r\n透明动画.setRepeatCount(-1)--设置无限循环\r\n--绑定动画\r\n卡片.startAnimation(透明动画)\r\n\r\n--[[\r\n透明动画属性详解：\r\nAlphaAnimation(float fromStart,float fromEnd)\r\nfloat fromStart 动画起始透明值\r\nfloat fromEnd 动画结束透明值 \r\n]]','2019-06-08 12:12:08.767875','2019-06-08 12:12:08.767903','补间动画');

/*Table structure for table `django_admin_log` */

DROP TABLE IF EXISTS `django_admin_log`;

CREATE TABLE `django_admin_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime(6) NOT NULL,
  `object_id` longtext COLLATE utf8_bin,
  `object_repr` varchar(200) COLLATE utf8_bin NOT NULL,
  `action_flag` smallint(5) unsigned NOT NULL,
  `change_message` longtext COLLATE utf8_bin NOT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `django_admin_log_content_type_id_c4bce8eb_fk_django_co` (`content_type_id`),
  KEY `django_admin_log_user_id_c564eba6_fk_auth_user_id` (`user_id`),
  CONSTRAINT `django_admin_log_content_type_id_c4bce8eb_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `django_admin_log_user_id_c564eba6_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

/*Data for the table `django_admin_log` */

/*Table structure for table `django_content_type` */

DROP TABLE IF EXISTS `django_content_type`;

CREATE TABLE `django_content_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app_label` varchar(100) COLLATE utf8_bin NOT NULL,
  `model` varchar(100) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `django_content_type_app_label_model_76bd3d3b_uniq` (`app_label`,`model`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

/*Data for the table `django_content_type` */

insert  into `django_content_type`(`id`,`app_label`,`model`) values (1,'admin','logentry'),(3,'auth','group'),(2,'auth','permission'),(4,'auth','user'),(5,'contenttypes','contenttype'),(7,'dhjz','classification'),(9,'dhjz','runtut'),(8,'dhjz','tutorial'),(11,'jxwd','jxwd_context'),(10,'jxwd','jxwd_fenlei'),(6,'sessions','session');

/*Table structure for table `django_migrations` */

DROP TABLE IF EXISTS `django_migrations`;

CREATE TABLE `django_migrations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app` varchar(255) COLLATE utf8_bin NOT NULL,
  `name` varchar(255) COLLATE utf8_bin NOT NULL,
  `applied` datetime(6) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

/*Data for the table `django_migrations` */

insert  into `django_migrations`(`id`,`app`,`name`,`applied`) values (1,'contenttypes','0001_initial','2019-10-04 10:24:17.492439'),(2,'auth','0001_initial','2019-10-04 10:24:17.603760'),(3,'admin','0001_initial','2019-10-04 10:24:17.804745'),(4,'admin','0002_logentry_remove_auto_add','2019-10-04 10:24:17.856648'),(5,'admin','0003_logentry_add_action_flag_choices','2019-10-04 10:24:17.865962'),(6,'contenttypes','0002_remove_content_type_name','2019-10-04 10:24:17.911100'),(7,'auth','0002_alter_permission_name_max_length','2019-10-04 10:24:17.935490'),(8,'auth','0003_alter_user_email_max_length','2019-10-04 10:24:17.966696'),(9,'auth','0004_alter_user_username_opts','2019-10-04 10:24:17.977186'),(10,'auth','0005_alter_user_last_login_null','2019-10-04 10:24:18.001513'),(11,'auth','0006_require_contenttypes_0002','2019-10-04 10:24:18.002952'),(12,'auth','0007_alter_validators_add_error_messages','2019-10-04 10:24:18.012158'),(13,'auth','0008_alter_user_username_max_length','2019-10-04 10:24:18.039507'),(14,'auth','0009_alter_user_last_name_max_length','2019-10-04 10:24:18.066883'),(15,'auth','0010_alter_group_name_max_length','2019-10-04 10:24:18.093958'),(16,'auth','0011_update_proxy_permissions','2019-10-04 10:24:18.104382'),(17,'dhjz','0001_initial','2019-10-04 10:24:18.143287'),(18,'jxwd','0001_initial','2019-10-04 10:24:18.213640'),(19,'jxwd','0002_auto_20191004_1641','2019-10-04 10:24:18.293647'),(20,'sessions','0001_initial','2019-10-04 10:24:18.308697');

/*Table structure for table `django_session` */

DROP TABLE IF EXISTS `django_session`;

CREATE TABLE `django_session` (
  `session_key` varchar(40) COLLATE utf8_bin NOT NULL,
  `session_data` longtext COLLATE utf8_bin NOT NULL,
  `expire_date` datetime(6) NOT NULL,
  PRIMARY KEY (`session_key`),
  KEY `django_session_expire_date_a5c62663` (`expire_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

/*Data for the table `django_session` */

/*Table structure for table `jxwd_jxwd_context` */

DROP TABLE IF EXISTS `jxwd_jxwd_context`;

CREATE TABLE `jxwd_jxwd_context` (
  `标题` varchar(20) NOT NULL,
  `内容` longtext NOT NULL,
  `发布时间` datetime(6) NOT NULL,
  `所属分类` varchar(20) NOT NULL,
  PRIMARY KEY (`标题`),
  UNIQUE KEY `jxwd_jxwd_context_标题_844f8f67_uniq` (`标题`),
  KEY `jxwd_jxwd_context_所属分类_29de118d_fk_jxwd_jxwd_fenlei_分类名` (`所属分类`),
  CONSTRAINT `jxwd_jxwd_context_所属分类_29de118d_fk_jxwd_jxwd_fenlei_分类名` FOREIGN KEY (`所属分类`) REFERENCES `jxwd_jxwd_fenlei` (`分类名`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/*Data for the table `jxwd_jxwd_context` */

insert  into `jxwd_jxwd_context`(`标题`,`内容`,`发布时间`,`所属分类`) values ('AbsoluteLayout绝对布局教程','--[[\r\n绝对布局即通过坐标定义组件的位置\r\n常用属性：\r\nlayout_width	组件宽度 \r\nlayout_height	组件高度 \r\nlayout_x	设置组件的X坐标 \r\nlayout_y	设置组件的Y坐标\r\n]]\r\n--创建示例布局\r\nshamrock=\r\n{\r\n  AbsoluteLayout;--绝对布局\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  {\r\n    CardView;--卡片控件\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'100\';--卡片宽度\r\n    layout_height=\'100\';--卡片高度\r\n    radius=\'20\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n    layout_x=\'0\';--定义x坐标\r\n    layout_y=\'0\';--定义y坐标\r\n  };\r\n  {\r\n    CardView;--卡片控件\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'100\';--卡片宽度\r\n    layout_height=\'100\';--卡片高度\r\n    radius=\'20\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n    layout_x=\'80%w\';--定义x坐标\r\n    layout_y=\'0\';--定义y坐标\r\n  };\r\n  {\r\n    CardView;--卡片控件\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'100\';--卡片宽度\r\n    layout_height=\'100\';--卡片高度\r\n    radius=\'20\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n    layout_x=\'0\';--定义x坐标\r\n    layout_y=\'80%h\';--定义y坐标\r\n  };\r\n  {\r\n    CardView;--卡片控件\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'100\';--卡片宽度\r\n    layout_height=\'100\';--卡片高度\r\n    radius=\'20\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n    layout_x=\'80%w\';--定义x坐标\r\n    layout_y=\'80%h\';--定义y坐标\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口','2019-06-21 12:58:08.597462','布局教程'),('BlurMaskFilter模糊效果测试','import \'android.graphics.BlurMaskFilter\'\r\nimport \'android.graphics.Color\'\r\nimport \'android.graphics.Paint\'\r\nSorrowClover=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n  {\r\n    LinearLayout;--线性布局\r\n    id=\'text1\';\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_weight=\'1\';\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    id=\'text2\';\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_weight=\'1\';\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    id=\'text3\';\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_weight=\'1\';\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    id=\'text4\';\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_weight=\'1\';\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\n\r\nfunction 模糊(控件,效果)\r\n  控件.setBackgroundDrawable(LuaDrawable(function(画布,画笔,图像)\r\n  画笔.setAntiAlias(true);\r\n  画笔.setColor(Color.RED);\r\n  画笔.setStyle(Paint.Style.FILL);\r\n  画笔.setTextSize(50);\r\n  画笔.setStrokeWidth(5);\r\n  bmf = BlurMaskFilter(10,效果)\r\n  画笔.setMaskFilter(bmf)\r\n  画布.drawText(\"模糊测试\", 100, 100, 画笔);\r\nend))\r\nend\r\n模糊(text1,BlurMaskFilter.Blur.NORMAL)\r\n模糊(text2,BlurMaskFilter.Blur.OUTER)\r\n模糊(text3,BlurMaskFilter.Blur.INNER)\r\n模糊(text4,BlurMaskFilter.Blur.SOLID)\r\n\r\n--[==[\r\nBlurMaskFilter.Blur.NORMAL：内外模糊\r\nBlurMaskFilter.Blur.OUTER：外部模糊\r\nBlurMaskFilter.Blur.INNER：内部模糊\r\nBlurMaskFilter.Blur.SOLID：内部加粗，外部模糊\r\n不止文字，只要是绘制的都可以模糊\r\n]==]','2019-08-13 13:56:43.202058','小何研究笔记'),('DOM查找网页分类实战','--导入jsoup库\r\nimport\'org.jsoup.*\'\r\n--定义链接\r\nurl = \'http://dh.hfybbs.vip/cn/index.html\'\r\n--这里使用Http方法先获取到网页源码再解析。\r\n--因为jsoup自带的connect方法是同步加载，会影响程序加载速度\r\nHttp.get(url,function(code,content)\r\n  if code==200 then--判断网站状态\r\n      doc = Jsoup.parse(content)--使用jsoup解析网页\r\n      classification = doc.getElementsByClass(\'text-gray\')--查找到所有class为text-gray的网页元素\r\n      classification = luajava.astable(classification)--将其转换成table表\r\n      for k,v in pairs(classification) do--循环打印输出\r\n        print(v.text())\r\n      end\r\n   else\r\n      print(\'无法访问\')\r\n   end\r\nend)','2019-07-04 05:05:25.932444','jsoup爬虫教学'),('DrawerLayout官方侧滑菜单教程','--[[\r\n侧滑布局即可创建侧滑栏的布局\r\n使用注意事项：\r\n1.主内容视图一定要是DrawerLayout的第一个子视图\r\n2.主内容视图宽度和高度需要fill\r\n3.必须显示指定侧滑视图的layout_gravity属性,layout_gravity = \"start\"时，从左向右滑出菜单,layout_gravity = \"end\"时，从右向左滑出菜单 \r\n它没什么属性可说，也就是一父项里面包含三个子项，第一个就是主布局，依次为左侧滑，右侧滑。\r\n]]\r\n\r\n--创建示例布局\r\nshamrock=\r\n{\r\n  DrawerLayout;--侧滑布局\r\n  {\r\n    --主布局\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n    Gravity=\'center\';--设置居中\r\n    {\r\n      TextView;--文本控件\r\n      layout_width=\'wrap\';--文本宽度\r\n      layout_height=\'wrap\';--文本高度\r\n      Gravity=\'center\';--重力属性\r\n      textColor=\'#000000\';--文本颜色\r\n      text=\'左右滑试试看\';--显示的文本\r\n      textSize=\'26sp\';--文本大小\r\n    };\r\n  };\r\n  {\r\n    --左侧滑栏布局\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_gravity=\'start\';--重力属性\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n    gravity=\'center\';--设置居中\r\n    {\r\n      TextView;--文本控件\r\n      layout_width=\'wrap\';--文本宽度\r\n      layout_height=\'wrap\';--文本高度\r\n      Gravity=\'center\';--重力属性\r\n      textColor=\'#000000\';--文本颜色\r\n      text=\'我是左侧滑\';--显示的文本\r\n      textSize=\'16sp\';--文本大小\r\n    };\r\n  };\r\n  {\r\n    --右侧滑栏布局\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_gravity=\'end\';--重力属性\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n    gravity=\'center\';--设置居中\r\n    {\r\n      TextView;--文本控件\r\n      layout_width=\'wrap\';--文本宽度\r\n      layout_height=\'wrap\';--文本高度\r\n      Gravity=\'center\';--重力属性\r\n      textColor=\'#000000\';--文本颜色\r\n      text=\'我是右侧滑\';--显示的文本\r\n      textSize=\'16sp\';--文本大小\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口','2019-06-24 08:57:00.529709','布局教程'),('EditText输入框教程','--[[\r\n输入框即可进行输入的组件\r\n常用属性：\r\nhint	默认提示文本\r\ntextColorHint	默认提示文本颜色\r\nselectAllOnFocus	设置为true则获得焦点后自动全选文本\r\nminLines	最小行数\r\nmaxLines	最大行数\r\ntextScaleX	水平间隔\r\ntextScaleY	垂直间隔\r\npadding	组件内文字和组件边框的距离\r\nCursorVisible	设置为false则光标不显示\r\ngetSelectionStart()	获得光标前的位置\r\ngetSelectionEnd()	获得光标后的位置\r\nbackground	设置为#00000000则隐藏下划线\r\n\r\ninputType:\r\n限制输入类型，可选值如下\r\n文本类型：\r\nnone\r\ntext\r\ntextCapCharacters\r\ntextCapWords\r\ntextCapSentences\r\ntextAutoCorrect\r\ntextAutoComplete\r\ntextMultiLine\r\ntextImeMultiLine\r\ntextNoSuggestions\r\ntextUri\r\ntextEmailAddress\r\ntextEmailSubject\r\ntextShortMessage\r\ntextLongMessage\r\ntextPersonName\r\ntextPostalAddress\r\ntextPassword\r\ntextVisiblePassword\r\ntextWebEditText\r\ntextFilter\r\ntextPhonetic\r\n数值类型：\r\nnumber\r\nnumberSigned\r\nnumberDecimal\r\nphone\r\ndatetime\r\ndate\r\ntime\r\n]]\r\n\r\n--创建示例布局\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  gravity=\'center\';--设置居中\r\n  {\r\n    EditText;--编辑框控件\r\n    id=\'编辑\';--绑定ID\r\n    singleLine=true;--设置单行输入\r\n    layout_width=\'80%w\';--编辑框宽度\r\n    layout_height=\'100\';--编辑框高度\r\n    textSize=\'16sp\';--文本大小\r\n    textColor=\'#000000\';--输入文本的颜色\r\n    Hint=\'提示文本\';--设置编辑框为空时的提示文本\r\n    HintTextColor=\'#757575\';--设置编辑框内容为空的时候显示的文本颜色\r\n  };\r\n  {\r\n    Button;--按钮控件\r\n    text=\'获取坐标位置\';--显示的文本\r\n    textSize=\'16sp\';--文字大小\r\n    textColor=\'#000000\';--文本颜色\r\n    backgroundColor=\'#ffffff\';--按钮背景颜色\r\n    layout_width=\'80%w\';--按钮宽度\r\n    layout_height=\'100\';--按钮高度\r\n    onClick=function(v)--设置点击事件\r\n      print(编辑.getSelectionStart())\r\n    end\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口','2019-06-22 11:58:14.846064','布局教程'),('FA中文函数概述','FA很贴心的封装了中文函数：\r\n1，进入子页面\r\n用法：进入子页面(\"子页面名称\")\r\n高级用法：进入子页面(\"子页面名称\",{链接=url})\r\n从这里传给子页面的链接，在子页面会直接访问链接并触发网页加载事件\r\n\r\n2，加载JS\r\n用法：加载Js([[JavaScript代码]])\r\n列举一些常用的JS代码：\r\n加载Js([[var para = document.createElement(\"p\");]])--代码是用于创建 <p> 元素\r\n加载Js([[var node = document.createTextNode(\"这是一个新的段落。\");]])--为 <p> 元素添加文本节点\r\n加载Js([[para.appendChild(node);]])--将文本节点添加到 <p> 元素中\r\n加载Js([[var element = document.getElementById(\"div1\");]])--查找已存在的元素\r\n加载Js([[element.appendChild(para);]])--添加到已存在的元素中\r\n--[[\r\n上面代码可以简写成：\r\n加载Js([[\r\nvar para = document.createElement(\"p\");\r\nvar node = document.createTextNode(\"这是一个新的段落。\");\r\npara.appendChild(node);\r\nvar element = document.getElementById(\"div1\");\r\nelement.appendChild(para);\r\n]])\r\n]]\r\nJS对于网页的增删改查(以下代码起作用的只有<script>框内的代码，前面的是h5网页代码，用做示例)：\r\n增：\r\n--[[\r\n使用了 appendChild() 方法，用于添加新元素到尾部。\r\n需要将新元素添加到开始位置，可以使用 insertBefore() 方法。\r\n<div id=\"div1\">\r\n<p id=\"p1\">这是一个段落。</p>\r\n<p id=\"p2\">这是另外一个段落。</p>\r\n</div>\r\n \r\n<script>\r\nvar para = document.createElement(\"p\");--创建标签\r\nvar node = document.createTextNode(\"这是一个新的段落。\");--创建文本节点\r\npara.appendChild(node);--将文本节点添加至标签\r\n \r\nvar element = document.getElementById(\"div1\");--寻找网页中id为div1的元素\r\nvar child = document.getElementById(\"p1\");--寻找网页中id为p1的元素\r\nelement.insertBefore(para, child);--将创建的标签添加至div1下的p1的前面\r\n</script>\r\n]]\r\n\r\n删：\r\n--[[\r\n要移除一个元素，你需要知道该元素的父元素。\r\n因为早期的 Internet Explorer 浏览器不支持 node.remove() 方法。\r\n不在意兼容性可以直接用remove()\r\n<div id=\"div1\">\r\n<p id=\"p1\">这是一个段落。</p>\r\n<p id=\"p2\">这是另外一个段落。</p>\r\n</div>\r\n \r\n<script>\r\nvar parent = document.getElementById(\"div1\");--寻找id为div1的元素\r\nvar child = document.getElementById(\"p1\");--寻找id为p1的元素\r\nparent.removeChild(child);--将div1下的p1删除\r\n</script>\r\n]]\r\n\r\n改：\r\n--[[\r\n使用 replaceChild() 方法来替换 HTML DOM 中的元素。\r\n<div id=\"div1\">\r\n<p id=\"p1\">这是一个段落。</p>\r\n<p id=\"p2\">这是另外一个段落。</p>\r\n</div>\r\n \r\n<script>\r\nvar para = document.createElement(\"p\");--创建一个p标签\r\nvar node = document.createTextNode(\"这是一个新的段落。\");--创建一个文本节点\r\npara.appendChild(node);--将文本节点添加至p标签\r\n \r\nvar parent = document.getElementById(\"div1\");--寻找id为div1的标签\r\nvar child = document.getElementById(\"p1\");--寻找id为p1的标签\r\nparent.replaceChild(para, child);--将div1下的p1替换成新建的p标签\r\n</script>\r\n]]\r\n\r\n查：\r\n--[[\r\n这里不做代码演示，将js的常用获取api一一列举\r\ndocument.activeElement  --返回当前获取焦点元素\r\ndocument.anchors  --返回对文档中所有 Anchor 对象的引用。\r\ndocument.baseURI  --返回文档的绝对基础 URI\r\ndocument.body  --返回文档的body元素\r\ndocument.cookie  --设置或返回与当前文档有关的所有 cookie。\r\ndocument.doctype  --返回与文档相关的文档类型声明 (DTD)。\r\ndocument.documentElement  --返回文档的根节点\r\ndocument.documentMode  --返回用于通过浏览器渲染文档的模式\r\ndocument.documentURI  --设置或返回文档的位置\r\ndocument.domain  --返回当前文档的域名。\r\ndocument.embeds  --返回文档中所有嵌入的内容（embed）集合\r\ndocument.forms  --返回对文档中所有 Form 对象引用\r\ndocument.getElementsByClassName()  --返回文档中所有指定类名的元素集合，作为 NodeList 对象。\r\ndocument.getElementById()  --返回对拥有指定 id 的第一个对象的引用。\r\ndocument.getElementsByName()  --返回带有指定名称的对象集合。\r\ndocument.getElementsByTagName()  --返回带有指定标签名的对象集合。\r\ndocument.images  --返回对文档中所有 Image 对象引用。\r\nocument.implementation  --返回处理该文档的 DOMImplementation 对象。\r\ndocument.inputEncoding  --返回用于文档的编码方式（在解析时）。\r\ndocument.lastModified  --返回文档被最后修改的日期和时间。\r\ndocument.links  --返回对文档中所有 Area 和 Link 对象引用。\r\ndocument.readyState  --返回文档状态 (载入中……)\r\ndocument.referrer  --返回载入当前文档的文档的 URL。\r\ndocument.scripts  --返回页面中所有脚本的集合。\r\ndocument.title  --返回当前文档的标题。\r\ndocument.URL  --返回文档完整的URL\r\n]]\r\n这些都是原生JS语句，使用起来比较繁琐，JS有一个十分强大的库：jQuery\r\n这个用起来就十分的简单，但不是每个网页都加载了这个库，所以使用前需要在网页中注入JS：\r\n加载JS([[\r\nvar hm = document.createElement(\"script\");\r\nhm.src = \"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\";\r\nvar s = document.getElementsByTagName(\"title\")[0]; \r\ns.parentNode.insertBefore(hm, s);\r\n]])\r\n然后就可以使用jQuery库的语句了，下面简单说下它的增删改查API\r\n增：\r\nappend和prepend方法：\r\n$(\"p\").append(\"追加文本\");  --在p标签结尾处插入文本\r\n$(\"p\").prepend(\"在开头追加文本\");  --在p标签开头处插入文本\r\n$(\"body\").append(txt1,txt2,txt3);   --可以一次性添加多个文本\r\nafter和before方法：\r\n$(\"img\").after(\"在后面添加文本\");\r\n$(\"img\").before(\"在前面添加文本\");\r\n$(\"img\").after(txt1,txt2,txt3); \r\n\r\n删：\r\n$(\"#div1\").remove();  --删除ID为div1的元素\r\n$(\"#div1\").empty();  --删除ID为div1的子元素\r\n$(\"p\").remove(\".italic\");  --删除类名为italic下的所有p元素\r\n\r\n改：\r\n$(\"#test1\").text(\"Hello world!\");  --将id为test1的元素文本设置为Hello world!\r\n$(\"#test2\").html(\"<b>Hello world!</b>\");  --将id为test2的元素html设置为<b>Hello world!</b>\r\n$(\"#test3\").attr(\"href\",\"http://www.baidu.com/\");  --将id为test3的元素的href属性值设置为http://www.baidu.com/\r\n$(\"#test4\").attr({\r\n        \"href\" : \"http://www.baidu.com/\",\r\n        \"title\" : \"百度\"\r\n    });  --可以用json形式赋予多次属性值\r\n\r\n查：\r\n$(\"*\")  --所有元素\r\n$(\"#lastname\")  --id=\"lastname\" 的元素\r\n$(\".intro\")  --class=\"intro\" 的所有元素\r\n$(\".intro,.demo\")  --class 为 \"intro\" 或 \"demo\" 的所有元素\r\n$(\"p\")  --所有 <p> 元素\r\n$(\"h1,div,p\")  --所有 <h1>、<div> 和 <p> 元素\r\n$(\"p:first\")  --第一个 <p> 元素\r\n$(\"p:last\")  --最后一个 <p> 元素\r\n$(\"tr:even\")  --所有偶数 <tr> 元素，索引值从 0 开始，第一个元素是偶数 (0)，第二个元素是奇数 (1)，以此类推。\r\n$(\"tr:odd\")  --所有奇数 <tr> 元素，索引值从 0 开始，第一个元素是偶数 (0)，第二个元素是奇数 (1)，以此类推。\r\n$(\"p:first-child\")  --属于其父元素的第一个子元素的所有 <p> 元素\r\n$(\"p:first-of-type\")  --属于其父元素的第一个 <p> 元素的所有 <p> 元素\r\n$(\"p:last-child\")  --属于其父元素的最后一个子元素的所有 <p> 元素\r\n$(\"p:last-of-type\")  --属于其父元素的最后一个 <p> 元素的所有 <p> 元素\r\n$(\"p:nth-child(2)\")  --属于其父元素的第二个子元素的所有 <p> 元素\r\n$(\"p:nth-last-child(2)\")  --属于其父元素的第二个子元素的所有 <p> 元素，从最后一个子元素开始计数\r\n$(\"p:nth-of-type(2)\")  --属于其父元素的第二个 <p> 元素的所有 <p> 元素\r\n$(\"p:nth-last-of-type(2)\")  --属于其父元素的第二个 <p> 元素的所有 <p> 元素，从最后一个子元素开始计数\r\n$(\"p:only-child\")  --属于其父元素的唯一子元素的所有 <p> 元素\r\n$(\"p:only-of-type\")  --属于其父元素的特定类型的唯一子元素的所有 <p> 元素\r\n$(\"div > p\")  --<div> 元素的直接子元素的所有 <p> 元素\r\n$(\"div p\")  --<div> 元素的后代的所有 <p> 元素\r\n$(\"div + p\")  --每个 <div> 元素相邻的下一个 <p> 元素\r\n$(\"div ~ p\")  --<div> 元素同级的所有 <p> 元素\r\n$(\"ul li:eq(3)\")  --列表中的第四个元素（index 值从 0 开始）\r\n$(\"ul li:gt(3)\")  --列举 index 大于 3 的元素\r\n$(\"ul li:lt(3)\")  --列举 index 小于 3 的元素\r\n$(\"input:not(:empty)\")  --所有不为空的输入元素\r\n$(\":header\")  --所有标题元素 <h1>, <h2> ...\r\n$(\":animated\")  --所有动画元素\r\n$(\":focus\")  --当前具有焦点的元素\r\n$(\":contains(\'Hello\')\")  --所有包含文本 \"Hello\" 的元素\r\n$(\"div:has(p)\")  --所有包含有 <p> 元素在其内的 <div> 元素\r\n$(\":empty\")  --所有空元素\r\n$(\":parent\")  --匹配所有含有子元素或者文本的父元素。\r\n$(\"p:hidden\")  --所有隐藏的 <p> 元素\r\n$(\"table:visible\")  --所有可见的表格\r\n$(\":root\")  --文档的根元素\r\n$(\"p:lang(de)\")  --所有 lang 属性值为 \"de\" 的 <p> 元素\r\n$(\"[href]\")  --所有带有 href 属性的元素\r\n$(\"[href=\'default.htm\']\")  --所有带有 href 属性且值等于 \"default.htm\" 的元素\r\n$(\"[href!=\'default.htm\']\")  --所有带有 href 属性且值不等于 \"default.htm\" 的元素\r\n$(\"[href$=\'.jpg\']\")  --所有带有 href 属性且值以 \".jpg\" 结尾的元素\r\n$(\"[title|=\'Tomorrow\']\")  --所有带有 title 属性且值等于 \'Tomorrow\' 或者以\'Tomorrow\' 后跟连接符作为开头的字符串\r\n$(\"[title^=\'Tom\']\")  --所有带有 title 属性且值以 \"Tom\" 开头的元素\r\n$(\"[title~=\'hello\']\")  --所有带有 title 属性且值包含单词 \"hello\" 的元素\r\n$(\"[title*=\'hello\']\")  --所有带有 title 属性且值包含字符串 \"hello\" 的元素\r\n$( \"input[id][name$=\'man\']\" )  --带有 id 属性，并且 name 属性以 man 结尾的输入框\r\n$(\":input\")  --所有 input 元素\r\n$(\":text\")  --所有带有 type=\"text\" 的 input 元素\r\n$(\":password\")  --所有带有 type=\"password\" 的 input 元素\r\n$(\":radio\")  --所有带有 type=\"radio\" 的 input 元素\r\n$(\":checkbox\")  --所有带有 type=\"checkbox\" 的 input 元素\r\n$(\":submit\")  --所有带有 type=\"submit\" 的 input 元素\r\n$(\":reset\")  --所有带有 type=\"reset\" 的 input 元素\r\n$(\":button\")  --所有带有 type=\"button\" 的 input 元素\r\n$(\":image\")  --所有带有 type=\"image\" 的 input 元素\r\n$(\":file\")  --所有带有 type=\"file\" 的 input 元素\r\n$(\":enabled\")  --所有启用的元素\r\n$(\":disabled\")  --所有禁用的元素\r\n$(\":selected\")  --所有选定的下拉列表元素\r\n$(\":checked\")  --所有选中的复选框选项\r\n$( \"p:target\" )  --选择器将选中ID和URI中一个格式化的标识符相匹配的<p>元素\r\n\r\n3，加载网页\r\n加载网页(\"url\")\r\n会在当前界面访问url链接\r\n\r\n4，停止加载\r\n停止加载()\r\n注意加括号，FA里少写了，不加括号会报错。\r\n\r\n5，刷新网页\r\n刷新网页()\r\n刷新当前网页访问状态\r\n会触发网页加载事件\r\n\r\n6，网页前进\r\n网页前进()\r\n加载使用网页后退方法时的网页\r\n单独使用没有效果，需要配合网页后退使用\r\n\r\n7，网页后退\r\n网页后退()\r\n访问前一次的访问链接\r\n会触发网页加载事件\r\n\r\n8，返回网页顶部\r\n返回网页顶部()\r\n通过JS实现的滚动滚轮至网页最顶部\r\n\r\n9，阅读模式\r\n阅读模式()\r\n通过JS实现，更改网页排版等，使其便于阅读\r\n\r\n10，显示对话框\r\n对话框()\r\n.设置标题(\"对话框标题\")\r\n.设置消息(\"对话框消息\")\r\n.设置积极按钮(\"确定\",function()\r\n  显示消息(\"点击了确定\")--这里是确定按钮点击事件\r\nend)\r\n.设置消极按钮(\"取消\")--这后面也可以设置取消按钮点击事件，仿照确实按钮点击事件\r\n.显示()--显示对话框\r\n\r\n11，泡沫对话框\r\n泡沫对话框(301)\r\n.设置标题(\"标题\")\r\n.设置消息([[消息]])\r\n.设置积极按钮(\"确定\",function()\r\n  显示消息(\"点击了确定\")\r\nend)\r\n.设置消极按钮(\"取消\")\r\n.显示()\r\n--方法类似对话框，但泡沫对话框只会在初次进入软件时显示\r\n\r\n12，弹出消息\r\n弹出消息(\"消息内容\")\r\n在屏幕中显示一段内容，非print，是用Toast实现的，所以参数有限制。\r\n\r\n13，退出程序\r\n退出程序()\r\n顾名思义，即退出软件\r\n\r\n14，退出页面\r\n退出页面()\r\n退出当前页面，返回上一次的页面，如已在首页，则退出软件。\r\n\r\n15，复制文本\r\n复制文本(\"文本内容\")\r\n将文本复制至手机剪切板\r\n\r\n16，分享文本\r\n分享文本(\"文本内容\")\r\n弹出手机分享窗口，将文本分享\r\n\r\n17，分享链接\r\n分享文本(webView.getUrl())\r\n即分享文本功能，文本为当前网页链接而已\r\n\r\n18，发生邮件\r\n发送邮件(\"邮箱\")\r\n顾名思义(我也没用过)\r\n\r\n19，联系QQ\r\n联系QQ(1467602180)\r\n弹出QQ咨询窗口，可直接聊天\r\n\r\n20，加QQ群\r\n加QQ群(QQ群号)\r\n弹出加群界面\r\n\r\n21，页内查找\r\n页内查找(\"词\")\r\n在当前网页寻找关键字，并将其高亮显示\r\n通过JS实现，即寻找匹配关键字并将焦点转移\r\n\r\n22，点击元素\r\n点击元素(\"元素类名\")\r\n--即使是被网页控制屏蔽的元素，也可以使用该代码点击\r\n模拟点击网页事件，如网页中的分类按钮，将其屏蔽后，可以自己设置按钮点击显示它\r\n\r\n23，下载文件\r\n下载文件(\"文件链接\")\r\n顾名思义\r\n通过http.download方法实现\r\n\r\n24，执行Shell\r\n执行Shell(\"shell命令\")\r\nShell为linux命令行语句，安卓本身也是linux系统，所以支持调用\r\n比如：\r\n执行Shell(\"rm-r 路径\") --删除文件\r\n\r\n【小何阐述】\r\nFA提供的中文函数十分强大和好用，如果能够灵活运用的话，你的webApp会焕然一新，甚至能做到不需要布局，单凭网页做出优秀的应用。','2019-06-15 01:03:08.208502','FA专用教程'),('FA部分实用代码概述','--网页即将加载\r\nif(网页链接:find\"关键字(可用正则匹配)\")then\r\n  停止加载()\r\n  进入子页面(\"游览\",{链接=网页链接})\r\nend\r\n\r\n--加载本地网页\r\n(\"file:///android_asset/drawable/index.html\")\r\n\r\n--如何调用浏览器打开当前页面？\r\nimport \"android.content.Intent\"\r\nimport \"android.net.Uri\"\r\nurl=\"https://www.lanzous.com/b251218\"\r\nviewIntent = Intent(\"android.intent.action.VIEW\",Uri.parse(url))\r\nactivity.startActivity(viewIntent)\r\n--浏览器打开链接\r\n\r\n--收到新标题\r\n设置顶栏标题(webView.title)\r\n\r\n--项目点击事件\r\n进入子页面(\"子页面名\",{链接=\"url\",标题=\"标题名\"})\r\n\r\n--去头部留白\r\ndocument.body.style.paddingTop=0--此处用的是JS\r\n\r\n--显示或隐藏悬浮按钮\r\n--显示悬浮按钮\r\nfltBtn.setVisibility(View.VISIBLE)\r\n--隐藏悬浮按钮\r\nfltBtn.setVisibility(View.GONE)\r\n--注:fltBtn为悬浮按钮的ID，不需要更改。\r\n\r\n--悬浮点击事件\r\n加载Js([[document.getElementsByClassName(\"apk_topbar_btn\")[0].parentElement.onclick()]])\r\n\r\n--悬浮选择点击事件\r\npop=PopupMenu(activity,fltBtn)\r\nmenu=pop.Menu\r\nmenu.add(\"选项一\").onMenuItemClick=function(a)\r\n进入子页面(\"子页面名\",{链接=\"url1\"..webView.getUrl()})\r\nend\r\nmenu.add(\"选项二\").onMenuItemClick=function(a)\r\n进入子页面(\"子页面名\",{链接=\"url2\"..webView.getUrl()})\r\nend\r\npop.show()\r\n\r\n--设置屏幕方向\r\nimport \"android.content.pm.ActivityInfo\"\r\nactivity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);\r\n--视频解析播放\r\n加载网页(\"vip解析url\"..webView.getUrl());\r\n--横屏\r\nactivity.setRequestedOrientation(0); \r\n--竖屏\r\nactivity.setRequestedOrientation(1); \r\n\r\n--各控件ID\r\nsearchEdtTxt       搜索栏\r\ntoolbar.parent        顶栏\r\ntoolbar             标题栏\r\ntitleTvw            顶栏标题\r\nwebView           浏览器\r\nfltBtn              悬浮按钮\r\n pager             滑动窗体\r\npopmenu_position     菜单栏\r\nsidebar             侧滑栏显示图标\r\npgsBar             进度条\r\nsideLvw           侧滑图标\r\nmenu_button       菜单图标\r\nmenuBtn          侧滑栏图标\r\n\r\n//开启和关闭侧滑\r\n--打开侧滑\r\ndrawerLayout.openDrawer(3)\r\n--关闭侧滑\r\ndrawerLayout.closeDrawer(3) \r\n\r\n--均放在点击事件\r\n--自定义底栏点击事件\r\n\r\nindex=1--底栏项目序号\r\n\r\nbmBarLin.getChildAt(index-1).onClick=function()\r\n--点击事件\r\nend\r\n\r\n--自定义标签栏点击事件\r\n\r\nlocal index=1--标签栏项目序号\r\n\r\ntabBar.getChildAt(index-1).onClick=function()\r\n\r\n --点击事件\r\n\r\nend\r\n-- 多页面搜索 --\r\n-- By: QQ3\r\nlocal urls={\"https://www.google.com/search?q=%s\",\"https://m.baidu.com/s?wd=%s\",\"https://m.so.com/s?q=%s\",\"http://cn.bing.com/search?q=%s\",\"http://m.chinaso.com/page/search.htm?keys=%s\",\"https://m.sogou.com/web/searchList.jsp?keyword=%s\",\"https://m.sm.cn/s?q=%s\"}\r\nsearchEdtTxt.setOnEditorActionListener{\r\n  onEditorAction=function(view,action,event)\r\n    local text=tostring(view.text)\r\n    if text~=nil and text~=\"\" then\r\n      searchEdtTxt.setHint(text)\r\n      local URLEncodeer=import\"java.net.URLEncoder\"\r\n      for index in pairs(urls) do\r\n        if allWebView[index] and urls[index]~=nil and urls[index]~=\"\" then\r\n          local url=tostring(urls[index]):format(URLEncoder.encode(text))\r\n          if pager.getCurrentItem()+1==index then\r\n            task(100,function()allWebView[index].loadUrl(url)end)--解决当前页面无法加载（与默认搜索事件冲突被覆盖）的问题\r\n          else\r\n            allWebView[index].loadUrl(url)\r\n          end\r\n        end\r\n      end\r\n    else\r\n      SearchEdtTxt.setHint(\"\")\r\n    end\r\n  end\r\n}\r\n\r\n--[[【小何补充】\r\n1，FA的子页面传参问题，因为FA的特殊性，所以一般的传参无法实现\r\n但可以利用FA自带的方法实现传参\r\n例如：]]\r\n参数 = \"demo\"\r\n进入子页面(\"测试\",{链接=\"http://www.baidu.com/?参数=\"..参数})\r\n--然后在测试子页面的网页即将加载事件里停止加载\r\n浏览器对象,网页链接=...--注意这句话很重要，这里是接收参数\r\n停止加载()\r\n参数 = 网页链接:match(\"参数%=.+\")\r\n--这样就成功接收到参数了，这只是个实例，代码不一定能照搬。\r\n\r\n2，FA的模板\r\nFA提供了丰富的模板供我们使用：\r\n顶栏模板(提供顶栏(标题栏)，侧滑栏，悬浮按钮)\r\n\r\n标签栏模板(提供标签栏(上方的多选项菜单，可以实现多网页或者布局)，顶栏(标题栏)，侧滑栏，悬浮按钮)\r\n\r\n底栏模板(提供底栏(下方的多选项菜单，可以设置图标，也可以实现多网页或者多布局)，顶栏(标题栏)，侧滑栏)\r\n\r\n纯底栏模板(提供底栏)\r\n\r\n空白模板(啥也没有)\r\n\r\n其中最适合开发的是顶栏模板，出问题最多的是空白模板(FA的库特殊的问题)\r\n这些模板的自定义性还是很高的，长，宽，高，颜色，图标等都可以自定义\r\n\r\n3，FA的库问题\r\nFA的库比较特殊，所以在弄研究开发时，会出现很多莫名其妙的问题\r\n例如bmob cjson库，在FA测试阶段是可以正常使用，但打包安装后就报错提示没有此库\r\n还有FA的CardView组件库很特殊，如果遇到有依赖关系的事件，会出现圆角丢失等情况，导入AndroLua标准库即可解决\r\n所以需要用到的，可以自己去找到库文件导入，也可以联系到我QQ：1467602180，我发给你\r\n\r\n4，打包解析错误\r\n仔细检查工程目录，不得出现任何中文字符以及错误文件和无法识别文件\r\n子页面数量到达一定程度也会出现\r\n具体数量看机型而有所不同','2019-06-09 16:11:30.772566','FA专用教程'),('FrameLayout帧布局教程','--[[\r\n帧布局即每个组件都堆叠在前一个组件之上\r\n常用属性：\r\nforeground	设置改帧布局容器的前景图像\r\nforegroundGravity	设置前景图像显示的位置\r\n]]\r\n--创建简单示例\r\nshamrock=\r\n{\r\n  FrameLayout;--帧布局\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  {\r\n    CardView;--卡片控件\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'500\';--卡片宽度\r\n    layout_height=\'500\';--卡片高度\r\n    radius=\'0\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n  {\r\n    CardView;--卡片控件\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'400\';--卡片宽度\r\n    layout_height=\'400\';--卡片高度\r\n    radius=\'0\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7ebef8\';--卡片背景颜色\r\n  };\r\n  {\r\n    CardView;--卡片控件\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'300\';--卡片宽度\r\n    layout_height=\'300\';--卡片高度\r\n    radius=\'0\';--卡片圆角\r\n    CardBackgroundColor=\'#ff265cf8\';--卡片背景颜色\r\n  };\r\n  {\r\n    CardView;--卡片控件\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'200\';--卡片宽度\r\n    layout_height=\'200\';--卡片高度\r\n    radius=\'0\';--卡片圆角\r\n    CardBackgroundColor=\'#ffce5cf8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口','2019-06-21 11:35:15.352573','布局教程'),('Fusion App概述','FusionApp(简称:FA)是一款新概念\"网页转应用\"的应用。\r\n它可以将网页翻新改造，获得优异至近乎的客户端的体验。它会让你爱上调♂教网页的感觉。\r\n\r\n【概念】\r\n\r\n它提倡将网页中的组件元素删除，并使用安卓原生组件替代，以此获得良好的交互体验并让整个网页焕然一新，就像真的客户端一样。\r\n\r\n相比于一个木函中的\"网页转应用\"，此物可谓是比之强千百倍。\r\n\r\nFusionApp提出UI模板制，您可对照需要转应用的网页，选取合适的UI模板，进行定制。\r\n\r\n【灵活动态，简单易用】\r\n\r\nFusionApp的UI模板的组件可自由装卸与定制，这使它可以与网页内容充分融合。它可自由的定制应用元素的点击事件，和方方面面的东西，且配置起来也非常简单，任何人都能轻松上手。\r\n\r\n【一条龙服务】\r\n\r\n为了方便起见与降低门槛，FusionApp资瓷了如下辅助功能:\r\n\r\n1.图标仓库\r\n\r\n内含一千多矢量的质感图标与扁平图标，它可解决您在配置应用UI时需要用到图标的需求。\r\n\r\n2.图标设计器\r\n\r\n它可为你设计美观大方的应用图标，且也可方便的从图标仓库中选取素材。\r\n\r\n3.包名查错与包名生成\r\n\r\n4.应用配色参考\r\n\r\n【小何阐述】\r\nFA的出现，使webApp在一段时间里十分流行，简单的打包便可拥有一个属于你自己的应用，这份感觉不言而喻。\r\n\r\nFA的核心是网页转应用，并为此提供了网页判断，筛选删除网页元素等功能，且做了良好的可视化，可操作化，使得制作webApp的几乎没有任何难度。\r\n\r\n但这同时也是它的局限性，FA如果用于主力开发AndroLua应用的话，就会出现很多小问题和效率的低下。\r\n\r\n本篇教程会带领大家体会FA的魅力，和各种便利性。','2019-06-09 07:55:23.640780','FA专用教程'),('ImageView图像视图教程','--[[\r\n图像视图即用来展示图片的视图\r\n常用属性：\r\nsrc	图片路径\r\n\r\nscaleType:\r\n设置缩放类型\r\nfitXY	对图像的横向与纵向进行独立缩放,使得该图片完全适应ImageView,但是图片的横纵比可能会发生改变\r\nfitStart	保持纵横比缩放图片,知道较长的边与Image的编程相等,缩放完成后将图片放在ImageView的左上角\r\nfitCenter	同上,缩放后放于中间;\r\nfitEnd	同上,缩放后放于右下角;\r\ncenter	保持原图的大小，显示在ImageView的中心。当原图的size大于ImageView的size，超过部分裁剪处理。\r\ncenterCrop	保持横纵比缩放图片,知道完全覆盖ImageView,可能会出现图片的显示不完全\r\ncenterInside	保持横纵比缩放图片,直到ImageView能够完全地显示图片\r\nmatrix	默认值，不改变原图的大小，从ImageView的左上角开始绘制原图， 原图超过ImageView的部分作裁剪处理\r\n]]\r\n\r\nshamrock=\r\n--布局请写在这里\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  gravity=\'center\';\r\n  {\r\n    ImageView;--图片控件\r\n    src=\'icon.png\';--图片路径\r\n    layout_width=\'300\';--图片宽度\r\n    layout_height=\'300\';--图片高度\r\n    layout_gravity=\'center\';--重力属性\r\n    scaleType=\'fitXY\';\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))','2019-06-22 12:18:09.309821','布局教程'),('jsoup概述','此篇教程必须最新版盒子才能正常运行！\r\njsoup概述：\r\njsoup是java里的一个普遍使用的html解析器，其的逻辑简单，语法容易，且功能强大。\r\n(此篇教程我不会再用中文变量，中文太别扭。。。。。。)\r\n\r\n但androlua中并没有自带这个模块，我们需要将其导入\r\ndex库下载链接：http://47.107.34.109:8000/d/c8f7ecb09db940de9725/\r\n使用方法：工程目录下创建libs目录，将jsoup开头的dex文件放入,在程序开头加入 import\'org.jsoup.*\'即可\r\n\r\njsoup API：\r\n从String解析文档\r\nhtml = \"<html><head><title>First parse</title></head>\"\r\n  + \"<body><p>Parsed HTML into a doc.</p></body></html>\"\r\ndoc = Jsoup.parse(html)\r\n\r\n解析一个网页碎片\r\nhtml = \"<div><p>Lorem ipsum.</p>\"\r\ndoc = Jsoup.parseBodyFragment(html)\r\nbody = doc.body()\r\n\r\n从URL加载文档\r\ndoc = Jsoup.connect(\"http://example.com/\").get()\r\ntitle = doc.title()\r\n\r\n高级url请求\r\ndoc = Jsoup.connect(\"http://example.com\")\r\n  .data(\"query\", \"Java\")\r\n  .userAgent(\"Mozilla\")\r\n  .cookie(\"auth\", \"token\")\r\n  .timeout(3000)\r\n  .post()\r\n  \r\n从文件加载文档\r\ninput = new File(\"/tmp/input.html\")\r\ndoc = Jsoup.parse(input, \"UTF-8\", \"http://example.com/\")\r\n\r\n使用DOM方法导航文档\r\n寻找元素\r\ngetElementById(String id)\r\ngetElementsByTag(String tag)\r\ngetElementsByClass(String className)\r\ngetElementsByAttribute(String key) （及相关方法）\r\n元素的兄弟姐妹：siblingElements()，firstElementSibling()，lastElementSibling()，nextElementSibling()，previousElementSibling()\r\n图：parent()，children()，child(int index)\r\n元素数据\r\nattr(String key)获取和attr(String key, String value)设置属性\r\nattributes() 获得所有属性\r\nid()，className()和classNames()\r\ntext()获取和text(String value)设置文本内容\r\nhtml()获取和html(String value)设置内部HTML内容\r\nouterHtml() 获取外部HTML值\r\ndata()获取数据内容（例如script和style标签）\r\ntag() 和 tagName()\r\n处理HTML和文本\r\nappend(String html)， prepend(String html)\r\nappendText(String text)， prependText(String text)\r\nappendElement(String tagName)， prependElement(String tagName)\r\nhtml(String value)\r\n\r\n使用selector-syntax查找元素\r\n选择器概述\r\ntagname：按标签查找元素，例如 a\r\nns|tag：在命名空间中按标记fb|name查找<fb:name>元素，例如查找元素\r\n#id：按ID查找元素，例如 #logo\r\n.class：按类名查找元素，例如 .masthead\r\n[attribute]：具有属性的元素，例如 [href]\r\n[^attr]：具有属性名称前缀的[^data-]元素，例如查找具有HTML5数据集属性的元素\r\n[attr=value]：具有属性值的元素，例如[width=500]（也是可引用的[data-name=\'launch sequence\']）\r\n[attr^=value]，[attr$=value]，[attr*=value]：用与启动属性，以结束，或包含所述的值，例如元素[href*=/path/]\r\n[attr~=regex]：具有与正则表达式匹配的属性值的元素; 例如img[src~=(?i)\\.(png|jpe?g)]\r\n*：所有元素，例如 *\r\n选择器组合\r\nel#id：具有ID的元素，例如 div#logo\r\nel.class：带有类的元素，例如 div.masthead\r\nel[attr]：具有属性的元素，例如 a[href]\r\n任何组合，例如 a[href].highlight\r\nancestor child：从祖先下降的子元素，例如在类“body”的块下的任何位置.body p查找p元素\r\nparent > child：直接从父级下降的子元素，例如div.content > p查找p元素; 并body > *找到body标签的直接子节点\r\nsiblingA + siblingB：找到兄弟B元素之后紧接着兄弟A，例如 div.head + div\r\nsiblingA ~ siblingX：找到兄弟A前面的兄弟X元素，例如 h1 ~ p\r\nel, el, el：对多个选择器进行分组，找到与任何选择器匹配的唯一元素; 例如div.masthead, div.logo\r\n伪选择器\r\n:lt(n)：找到其兄弟索引（即它在DOM树中相对于其父节点的位置）小于的元素n; 例如td:lt(3)\r\n:gt(n)：查找兄弟索引大于的元素n; 例如div p:gt(2)\r\n:eq(n)：查找兄弟索引等于的元素n; 例如form input:eq(1)\r\n:has(selector)：查找包含与选择器匹配的元素的元素; 例如div:has(p)\r\n:not(selector)：查找与选择器不匹配的元素; 例如div:not(.logo)\r\n:contains(text)：查找包含给定文本的元素。搜索不区分大小写; 例如p:contains(jsoup)\r\n:containsOwn(text)：查找直接包含给定文本的元素\r\n:matches(regex)：查找文本与指定正则表达式匹配的元素; 例如div:matches((?i)login)\r\n:matchesOwn(regex)：查找自己的文本与指定正则表达式匹配的元素\r\n注意，上面的索引伪选择器是基于0的，即第一个元素是索引0，第二个元素是1\r\n\r\n从元素中提取属性，文本和HTML\r\n要获取属性的值，请使用该Node.attr(String key)方法\r\n对于元素（及其组合子元素）上的文本，请使用 Element.text()\r\n对于HTML，使用Element.html()或Node.outerHtml()\r\n上述方法是元素数据访问方法的核心。还有其他人：\r\nElement.id()\r\nElement.tagName()\r\nElement.className() 和 Element.hasClass(String className)\r\n所有这些访问器方法都有相应的setter方法来更改数据。\r\n\r\n设置属性值\r\n使用属性setter方法Element.attr(String key, String value)，和Elements.attr(String key, String value)。\r\n如果需要修改class元素的属性，请使用Element.addClass(String className)和Element.removeClass(String className)方法。\r\n\r\n设置元素的HTML\r\ndiv = doc.select(\"div\").first()\r\ndiv.html(\"<p>lorem ipsum</p>\")\r\ndiv.prepend(\"<p>First</p>\")\r\ndiv.append(\"<p>Last</p>\")\r\n\r\nElement span = doc.select(\"span\").first()\r\nspan.wrap(\"<li><a href=\'http://example.com/\'></a></li>\")\r\n\r\n设置元素的文本内容\r\nElement div = doc.select(\"div\").first()\r\ndiv.text(\"five > four\")\r\ndiv.prepend(\"First \")\r\ndiv.append(\" Last\")','2019-07-04 05:06:20.245839','jsoup爬虫教学'),('jsoup爬取网页标题实战','--导入jsoup库\r\nimport\'org.jsoup.*\'\r\n--定义链接\r\nurl = \'http://dh.hfybbs.vip\'\r\n--这里使用Http方法先获取到网页源码再解析。\r\n--因为jsoup自带的connect方法是同步加载，会影响程序加载速度\r\nHttp.get(url,function(code,content)\r\n  if code==200 then--判断网站状态\r\n      doc = Jsoup.parse(content)--使用jsoup解析网页\r\n      print(doc.title())--使用jsoup方法获取到网页标题\r\n   else\r\n      print(\'无法访问\')\r\n   end\r\nend)','2019-07-04 05:05:54.871838','jsoup爬虫教学'),('LinearLayout线性布局教程','--[[\r\n线性布局即按水平或者垂直方向布局\r\n常用属性：\r\nOrientation	布局中组件的排列方式，有horizontal(水平)，vertical(垂直，默认)，两种方式\r\ngravity	控制组件所包含的子元素的对齐方式，可多个组合，如(left|buttom)\r\nlayout_gravity	控制该组件在父容器里的对其方式\r\nlayout_width	布局的宽度，通常不直接写数字，用wrap,fill或者match填满父容器\r\nlayout_height	布局的高度，参数同上\r\nid	为该组件设置一个资源id,用作事件触发\r\nbackground	为该组件设置一个背景图片，或者直接用颜色覆盖\r\n\r\nWeight(权重)讲解：\r\n该属性是用来等比例划分区域\r\n最简单的用法：要等比例划分，按比例即可\r\n\r\ndivider分割线：\r\n该属性用于为LinearLayout设置分割线图片，通过showDivider来设置分割线\r\n的所在位置，有四个可选值none,middle,begining,end。\r\ndivider	为LinearLayout设置分割线图片\r\nshowDividers	设置分割线所在的位置，有四个可选值none,middle,begining,end。\r\ndividerPadding	设置分割线的padding\r\n]]\r\n--接下来创建一个布局，用作实例\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  id=\'主布局\';\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'30%h\';--布局高度\r\n    background=\'#ff7e5cf8\';--布局背景颜色(或者图片路径)\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'30%h\';--布局高度\r\n    background=\'#ffc45cf8\';--布局背景颜色(或者图片路径)\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'horizontal\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'30%h\';--布局高度\r\n    background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n    {\r\n      LinearLayout;--线性布局\r\n      Orientation=\'vertical\';--布局方向\r\n      layout_width=\'40%w\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      background=\'#ff7e5cf8\';--布局背景颜色(或者图片路径)\r\n    };\r\n    {\r\n      LinearLayout;--线性布局\r\n      Orientation=\'vertical\';--布局方向\r\n      layout_width=\'40%w\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      background=\'#ff7e0ff8\';--布局背景颜色(或者图片路径)\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口','2019-06-21 11:30:38.456920','布局教程'),('loading文字动画对话框','function loading文字动画对话框()\r\n  import \'android.graphics.drawable.ShapeDrawable\'\r\n  import \'android.graphics.drawable.shapes.RoundRectShape\'\r\n  dialog_layout={\r\n    LinearLayout;--线性布局\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n    gravity=\'center\';\r\n    {\r\n      LinearLayout;--线性布局\r\n      id=\'dialog_anime\';\r\n      layout_width=\'300\';--布局宽度\r\n      layout_height=\'300\';--布局高度\r\n    };\r\n  };\r\n  dl = LuaDialog(this)\r\n  dl.setCancelable(true)\r\n  dl.setView(loadlayout(dialog_layout))\r\n  dl.getWindow().setBackgroundDrawable(ShapeDrawable(RoundRectShape({12,12,12,12,12,12,12,12},nil,nil)))\r\n  dl.show()\r\n\r\n  function 绘制(str)\r\n    dialog_anime.setBackgroundDrawable(LuaDrawable(function(canvas,paint,draw)\r\n      paint.setTextSize(50)\r\n      canvas.drawText(str,60,180,paint)\r\n    end))\r\n  end\r\n\r\n  str=\"loading...\"\r\n  i=0\r\n  ti=Ticker()\r\n  ti.Period=200\r\n  ti.onTick=function()\r\n    --事件\r\n    绘制(str:sub(0,i))\r\n    i=i+1\r\n    if(i==11) then\r\n      i=0\r\n    end\r\n  end\r\n  --启动Ticker定时器\r\n  ti.start()\r\n  --停止Ticker定时器\r\n  dl.onDismiss=function()\r\n    ti.stop()\r\n  end\r\n  return dl\r\nend\r\ndl=loading文字动画对话框()\r\n--dl.dismiss()关闭对话框','2019-08-14 17:19:08.016907','Lua封装函数'),('Lua适配器教程','--[[\r\n适配器适用于有高度规律的列表，网格等视图。\r\n想要动态为此类控件添加项目就必须得要依靠适配器\r\n下面是LuaAdapter(Lua适配器)的用法\r\nlua适配器可以自定义列表的布局。此适配器能完成大部分需求。\r\n]]\r\n--写个布局，里面有个列表控件，设置id为list\r\nSorrowClover=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n  {\r\n    ListView;--列表视图\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    DividerHeight=\'1\';--设置分隔线宽度,0表示无分隔\r\n    id=\"list\";--设置id\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))--显示布局\r\n\r\n--创建自定义项目视图，也就是一个文字视图。\r\nitem={\r\n  LinearLayout,\r\n  orientation=\"vertical\",\r\n  layout_width=\"fill\",\r\n  {\r\n    TextView,\r\n    id=\"text\",\r\n    layout_margin=\"15dp\",\r\n    layout_width=\"fill\"\r\n  },\r\n}\r\n--创建数据表\r\ndata={}\r\n--创建适配器，将数据表和自定义视图添加进适配器\r\nadp=LuaAdapter(activity,data,item)\r\n--为数据表添加数据\r\nfor n=1,100 do\r\n  table.insert(data,{\r\n--值得一提的是，这里可以直接设置布局属性\r\n--这里就是设置文字视图的文字属性，后面会有更详细的实例。\r\n    text={\r\n      Text=tostring(n), \r\n    }, \r\n  })\r\nend\r\n--为list设置适配器\r\nlist.Adapter=adp','2019-07-27 06:17:30.443923','布局教程'),('Lua适配器进阶教程','--[[\r\n适配器适用于有高度规律的列表，网格等视图。\r\n想要动态为此类控件添加项目就必须得要依靠适配器\r\n下面是LuaAdapter(Lua适配器)的用法\r\nlua适配器可以自定义列表的布局。此适配器能完成大部分需求。\r\n]]\r\n--写个布局，里面有个列表控件，设置id为list\r\nSorrowClover=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n  {\r\n    ListView;--列表视图\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    DividerHeight=\'1\';--设置分隔线宽度,0表示无分隔\r\n    id=\"list\";--设置id\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))--显示布局\r\n\r\n--创建自定义项目视图，为卡片视图，我将用适配器为卡片设置颜色。\r\nitem={\r\nLinearLayout;--线性布局\r\nOrientation=\'horizontal\';--布局方向\r\nlayout_width=\'fill\';--布局宽度\r\nlayout_height=\'80dp\';--布局高度\r\n{\r\nCardView;--卡片控件\r\nid=\"card\";--设置id\r\nlayout_margin=\'8dp\';--卡片边距\r\nlayout_gravity=\'center\';--子控件在父布局中的对齐方式\r\nCardElevation=\'4dp\';--卡片阴影\r\nlayout_width=\'fill\';--卡片宽度\r\nlayout_height=\'fill\';--卡片高度\r\nradius=\'12dp\';--卡片圆角\r\nCardBackgroundColor=\'#FFDDA767\';--卡片背景颜色\r\n};\r\n};\r\n--创建颜色表和数据表\r\ncolor_table={0xffEF9A9A,0xffF44336,0xffEF9A9A,0xff42A5F5,0xff1976D2,0xff0097A7}\r\ndata={}\r\n--创建适配器，将数据表和自定义视图添加进适配器\r\nadp=LuaAdapter(activity,data,item)\r\n--为数据表添加数据\r\nfor n=1,100 do\r\n  table.insert(data,{\r\n--这里就是根据id设置布局属性，这里是设置卡片颜色\r\n    card={\r\n      CardBackgroundColor=color_table[n%#color_table], --表里用了取余算法，让颜色实现循环。\r\n    }, \r\n  })\r\nend\r\n--为list设置适配器\r\nlist.Adapter=adp','2019-07-27 06:30:40.110307','布局教程'),('PageView滑动窗体教程','--[[\r\nPageView滑动窗体即可进行滑动切换的视图，常用于初次启动欢迎界面\r\n它没有什么特殊的方法\r\n要说特殊也就是需要加个pages，然后在里面写布局。\r\n需要注意的是，pages中每个视图需要有布局包裹着。\r\n即一个布局为一个可切换窗体，\r\n]]\r\nSorrowClover=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  {\r\n    PageView;--滑动窗体\r\n    pages={--生成窗体布局\r\n      {\r\n        LinearLayout;--线性布局\r\n        Orientation=\'vertical\';--布局方向\r\n        layout_width=\'fill\';--布局宽度\r\n        layout_height=\'fill\';--布局高度\r\n        background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n        Gravity=\"center\",--设置居中\r\n        {\r\n          CardView;--卡片控件\r\n          layout_margin=\'5%w\';--卡片边距\r\n          CardElevation=\'3\';--卡片阴影\r\n          layout_width=\'fill\';--卡片宽度\r\n          layout_height=\'fill\';--卡片高度\r\n          radius=\'20\';--卡片圆角\r\n          CardBackgroundColor=\'#A593E0\';--卡片背景颜色\r\n          {\r\n            TextView;--文本控件\r\n            layout_width=\'fill\';--文本宽度\r\n            layout_height=\'fill\';--文本高度\r\n            Gravity=\'center\';--对齐方式\r\n            textColor=\'#ffffff\';--文本颜色\r\n            text=\'ONE\';--显示的文本\r\n            textSize=\'50sp\';--文本大小\r\n          };\r\n        };\r\n      };\r\n      {\r\n        LinearLayout;--线性布局\r\n        Orientation=\'vertical\';--布局方向\r\n        layout_width=\'fill\';--布局宽度\r\n        layout_height=\'fill\';--布局高度\r\n        background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n        Gravity=\"center\",--设置居中\r\n        {\r\n          CardView;--卡片控件\r\n          layout_margin=\'5%w\';--卡片边距\r\n          CardElevation=\'3\';--卡片阴影\r\n          layout_width=\'fill\';--卡片宽度\r\n          layout_height=\'fill\';--卡片高度\r\n          radius=\'20\';--卡片圆角\r\n          CardBackgroundColor=\'#F68657\';--卡片背景颜色\r\n          {\r\n            TextView;--文本控件\r\n            layout_width=\'fill\';--文本宽度\r\n            layout_height=\'fill\';--文本高度\r\n            Gravity=\'center\';--对齐方式\r\n            textColor=\'#ffffff\';--文本颜色\r\n            text=\'TWO\';--显示的文本\r\n            textSize=\'50sp\';--文本大小\r\n          };\r\n        };\r\n      };\r\n      {\r\n        LinearLayout;--线性布局\r\n        Orientation=\'vertical\';--布局方向\r\n        layout_width=\'fill\';--布局宽度\r\n        layout_height=\'fill\';--布局高度\r\n        background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n        Gravity=\"center\",--设置居中\r\n        {\r\n          CardView;--卡片控件\r\n          layout_margin=\'5%w\';--卡片边距\r\n          CardElevation=\'3\';--卡片阴影\r\n          layout_width=\'fill\';--卡片宽度\r\n          layout_height=\'fill\';--卡片高度\r\n          radius=\'20\';--卡片圆角\r\n          CardBackgroundColor=\'#C5E99B\';--卡片背景颜色\r\n          {\r\n            TextView;--文本控件\r\n            layout_width=\'fill\';--文本宽度\r\n            layout_height=\'fill\';--文本高度\r\n            Gravity=\'center\';--对齐方式\r\n            textColor=\'#ffffff\';--文本颜色\r\n            text=\'THREE\';--显示的文本\r\n            textSize=\'50sp\';--文本大小\r\n          };\r\n        };\r\n      };\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))--显示布局','2019-07-05 02:20:27.513700','布局教程'),('PageView滑动窗体适配器教程','--[[\r\n当需要添加的窗体十分多的时候，通过pages挨个添加就显得十分愚蠢。\r\n这时候就需要适配器，适配器是十分重要的，对于远程，动态更换窗体等都需要适配器。\r\n适配器的用法如下\r\n]]\r\n--先创建一个主布局，为pageview绑定id\r\nSorrowClover=--创建布局\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  Gravity=\"center\",--设置居中\r\n  {\r\n    PageView;--滑动窗体\r\n    id=\'page\';--绑定id\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))--显示布局\r\n--然后将需要添加的窗体封装成函数\r\nfunction 添加窗体(卡片颜色,显示文本)--封装函数\r\n  bj={\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n    Gravity=\"center\",--设置居中\r\n    {\r\n      CardView;--卡片控件\r\n      layout_margin=\'5%w\';--卡片边距\r\n      CardElevation=\'3\';--卡片阴影\r\n      layout_width=\'fill\';--卡片宽度\r\n      layout_height=\'fill\';--卡片高度\r\n      radius=\'20\';--卡片圆角\r\n      CardBackgroundColor=卡片颜色;--卡片背景颜色\r\n      {\r\n        TextView;--文本控件\r\n        layout_width=\'fill\';--文本宽度\r\n        layout_height=\'fill\';--文本高度\r\n        Gravity=\'center\';--对齐方式\r\n        textColor=\'#ffffff\';--文本颜色\r\n        text=显示文本;--显示的文本\r\n        textSize=\'50sp\';--文本大小\r\n      };\r\n    };\r\n  };\r\n  return bj--返回布局\r\nend\r\n--最后设置适配器动态添加窗体\r\nadp=ArrayPageAdapter()--初始化适配器\r\npage.setAdapter(adp)--设置适配器\r\nadp.add(loadlayout(添加窗体(\"#D499B9\",\"ONE\")))--动态添加布局\r\nadp.add(loadlayout(添加窗体(\"#FDD692\",\"TWO\")))\r\nadp.add(loadlayout(添加窗体(\"#8FBC94\",\"THREE\")))','2019-07-05 02:38:26.605178','布局教程'),('POST提交字符串','--需导入的DEX请自行将运行助手拆包，在libs文件夹里\r\n--POST提交字符串，除注释外都是固定模板，复制粘贴即可\r\nimport \'com.kn.okhttp.*\'\r\nimport \'okhttp3.*\'\r\nmediaType = MediaType.parse(\'text/x-markdown; charset=utf-8\')\r\nrequestBody = \'I am Jdqm\'--提交字符串\r\nrequest = Request.Builder()\r\n.url(\'https://api.github.com/markdown/raw\')--请求URL\r\n.post(RequestBody.create(mediaType,requestBody))\r\n.build()\r\nokHttpClient = OkHttpClient()\r\nokHttpClient.newCall(request).enqueue(Callback{\r\n  onFailure = function(call,e)--失败请求\r\n    print(e)\r\n  end,\r\n\r\n  onResponse = function(call,response)--请求成功\r\n    headers = response.headers()\r\n    print(headers)--展示返回头部\r\n    print(response.body().string())--展示返回内容\r\n  end\r\n})','2019-08-18 04:03:33.986875','OkHttp教程'),('POST提交文件','--需导入的DEX请自行将运行助手拆包，在libs文件夹里\r\n--POST提交文件，除注释外都是固定模板，复制粘贴即可\r\nimport \'com.kn.okhttp.*\'\r\nimport \'okhttp3.*\'\r\nmediaType = MediaType.parse(\"text/x-markdown; charset=utf-8\");\r\nokHttpClient = OkHttpClient();\r\nfile = File(activity.getLuaDir()..\'/init.lua\');--提交的文件\r\nrequest = Request.Builder()\r\n        .url(\"https://api.github.com/markdown/raw\")--URL\r\n        .post(RequestBody.create(mediaType, file))\r\n        .build();\r\nokHttpClient.newCall(request).enqueue(Callback {\r\n    onFailure = function(call, e) --失败\r\n        print(e)\r\n    end,\r\n\r\n    onResponse = function(call,response) --成功\r\n        print(response.headers())\r\n        print(response.body().string())\r\n    end\r\n});','2019-08-18 05:08:58.038047','OkHttp教程'),('POST提交表单','--需导入的DEX请自行将运行助手拆包，在libs文件夹里\r\n--POST提交表单，除注释外都是固定模板，复制粘贴即可\r\n--该测试网址已挂，自己寻找网址测试\r\nimport \'com.kn.okhttp.*\'\r\nimport \'okhttp3.*\'\r\nokHttpClient = OkHttpClient();\r\nrequestBody = FormBody.Builder()\r\n        .add(\"search\", \"Jurassic Park\")--提交的表单\r\n        .build();\r\nrequest = Request.Builder()\r\n        .url(\"https://en.wikipedia.org/w/index.php\")--URL\r\n        .post(requestBody)\r\n        .build();\r\n\r\nokHttpClient.newCall(request).enqueue(Callback {\r\n    onFailure = function(call, e) --失败\r\n        print(e);\r\n    end,\r\n\r\n    onResponse = function(call, response) --成功\r\n        print(response.headers())\r\n        print(response.body().string())\r\n    end\r\n});','2019-08-18 05:16:13.417651','OkHttp教程'),('RelativeLayout相对布局教程','--[[\r\n相对布局就是相对于其父组件或者兄弟组件进行布局\r\n基本属性：\r\ngravity	设置容器内组件的对齐方式\r\nignoreGravity	设置了该属性为true的属性的组件，将不受gravity属性的影响\r\n\r\n根据父容器定位：\r\nlayout_alignParentLeft	左对齐\r\nlayout_alignParentRight	右对齐\r\nlayout_alignParentTop	顶部对齐\r\nlayout_alignParentBottom	底部对齐\r\nlayout_centerHorizontal	水平居中\r\nlayout_centerVertical	垂直居中\r\nlayout_centerParent	中间位置\r\n\r\n根据兄弟组件定位：\r\nlayout_toLeftOf	参考组件的左边\r\nlayout_toRightOf	参考组件的右边\r\nlayout_above	参考组件的上方\r\nlayout_below	参考组件的下方\r\nlayout_alignTop	对齐参考组件的上边界\r\nlayout_alignBottom	对齐参考组件的下边界\r\nlayout_alignLeft	对齐参考组件的左边界\r\nlayout_alignRight	对齐参考组件的右边界\r\n\r\nmargin(偏移)：\r\n设置组件与父容器的边距，又叫偏移\r\nlayout_margin	设置组件上下左右的偏移量\r\nlayout_marginLeft	设置组件离左边的偏移量\r\nlayout_marginRight	设置组件离右边的偏移量\r\nlayout_marginTop	设置组件离上面的偏移量\r\nlayout_marginBottom	设置组件离下面的偏移量\r\n\r\npadding(填充)：\r\n设置组件内部元素间的边距(比如TextView里的字体位置)\r\npadding	往内部元素的上下左右填充一定边距\r\npaddingLeft	往内部元素的左边填充一定边距\r\npaddingRight	往内部元素的右边填充一定边距\r\npaddingTop	往内部元素的上方填充一定边距\r\npaddingBottom	往内部元素的下方填充一定边距\r\n]]\r\n\r\n--创建一个梅花布局进行示例\r\nshamrock=\r\n{\r\n  RelativeLayout;--相对布局\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  {\r\n    CardView;--卡片控件\r\n    id=\"卡片\";--绑定id\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'100\';--卡片宽度\r\n    layout_height=\'100\';--卡片高度\r\n    radius=\'20\';--卡片圆角\r\n    layout_centerInParent=\"true\";--设置居中\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n  };\r\n  {\r\n    CardView;--卡片控件\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'100\';--卡片宽度\r\n    layout_height=\'100\';--卡片高度\r\n    radius=\'20\';--卡片圆角\r\n    layout_toLeftOf=\"卡片\";--位于卡片左边\r\n    layout_centerVertical=\"true\";--垂直居中\r\n    CardBackgroundColor=\'#ffb95cf8\';--卡片背景颜色\r\n  };\r\n  {\r\n    CardView;--卡片控件\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'100\';--卡片宽度\r\n    layout_height=\'100\';--卡片高度\r\n    radius=\'20\';--卡片圆角\r\n    layout_toRightOf=\"卡片\";--位于卡片右边\r\n    layout_centerVertical=\"true\";--垂直居中\r\n    CardBackgroundColor=\'#ffef5cf8\';--卡片背景颜色\r\n  };\r\n  {\r\n    CardView;--卡片控件\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'100\';--卡片宽度\r\n    layout_height=\'100\';--卡片高度\r\n    radius=\'20\';--卡片圆角\r\n    layout_above=\"卡片\";--位于卡片顶部\r\n    layout_centerHorizontal=\"true\";--水平居中\r\n    CardBackgroundColor=\'#ff7ec3f8\';--卡片背景颜色\r\n  };\r\n  {\r\n    CardView;--卡片控件\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'100\';--卡片宽度\r\n    layout_height=\'100\';--卡片高度\r\n    radius=\'20\';--卡片圆角\r\n    layout_below=\"卡片\";--位于卡片底部\r\n    layout_centerHorizontal=\"true\";--水平居中\r\n    CardBackgroundColor=\'#ff7e0ff8\';--卡片背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口','2019-06-21 11:30:13.941563','布局教程'),('ShadowLayer自定义阴影测试','import \'android.graphics.Color\'\r\nSorrowClover=\r\n{\r\nLinearLayout;--线性布局\r\nlayout_width=\'fill\';--布局宽度\r\nlayout_height=\'fill\';--布局高度\r\nbackground=\'#ffffff\';--布局背景颜色(或图片路径)\r\nid=\'test\';\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\n\r\ntest.setBackgroundDrawable(LuaDrawable(function(canvas,paint,view_drawable)\r\n  paint.setAntiAlias(true)\r\n  paint.setColor(Color.BLUE)\r\n  paint.setShadowLayer(45,10,10,Color.BLUE)\r\n  canvas.drawCircle(200,200,100,paint)\r\n  paint.setColor(Color.RED)\r\n  paint.setShadowLayer(45,10,10,Color.RED)\r\n  canvas.drawCircle(200,500,100,paint)\r\n  paint.setColor(Color.GREEN)\r\n  paint.setShadowLayer(45,10,10,Color.GREEN)\r\n  canvas.drawCircle(200,800,100,paint)\r\nend))\r\n--[==[\r\nsetShadowLayer(\r\nfloat radius ,\r\nfloat dx,\r\nfloat dy,\r\nint color\r\n)\r\n在图形下面设置阴影层，产生阴影效果， \r\nradius为阴影的角度，\r\ndx和dy为阴影在x轴和y轴上的距离，\r\ncolor为阴影的颜色\r\n部分机型不兼容。。。。原因不明。\r\n]==]','2019-08-13 15:00:11.930838','小何研究笔记'),('ShapeDrawable测试','--[==[\r\nShapeDrawable是可以自定义形状的Drawable，\r\n自定义圆角什么的不再是梦。\r\n分别有五种，路径，矩形，圆角矩形，椭圆，圆\r\n以下只演示后四种，路径在开发中基本用不上。故不做演示。\r\n]==]\r\nimport \'android.graphics.drawable.ShapeDrawable\'\r\nimport \'android.graphics.RectF\'\r\nSorrowClover=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n  Gravity=\"center\";\r\n  {\r\n    TextView;--文本控件\r\n    id=\"rect\";\r\n    layout_width=\'100dp\';--文本宽度\r\n    layout_marginBottom=\"10dp\";\r\n    layout_height=\'50dp\';--文本高度\r\n    Gravity=\'center\';--对齐方式\r\n    textColor=\'#ffffff\';--文本颜色\r\n    text=\'矩形Shape\';--显示的文本\r\n    textSize=\'18sp\';--文本大小\r\n  };\r\n  {\r\n    TextView;--文本控件\r\n    id=\"roundrect\";\r\n    layout_width=\'100dp\';--文本宽度\r\n    layout_marginBottom=\"10dp\";\r\n    layout_height=\'50dp\';--文本高度\r\n    Gravity=\'center\';--对齐方式\r\n    textColor=\'#ffffff\';--文本颜色\r\n    text=\'圆角矩形Shape\';--显示的文本\r\n    textSize=\'18sp\';--文本大小\r\n  };\r\n  {\r\n    TextView;--文本控件\r\n    id=\"arc\";\r\n    layout_width=\'100dp\';--文本宽度\r\n    layout_marginBottom=\"10dp\";\r\n    layout_height=\'50dp\';--文本高度\r\n    Gravity=\'center\';--对齐方式\r\n    textColor=\'#ffffff\';--文本颜色\r\n    text=\'椭圆Shape\';--显示的文本\r\n    textSize=\'18sp\';--文本大小\r\n  };\r\n  {\r\n    TextView;--文本控件\r\n    id=\"oval\";\r\n    layout_width=\'100dp\';--文本宽度\r\n    layout_marginBottom=\"10dp\";\r\n    layout_height=\'100dp\';--文本高度\r\n    Gravity=\'center\';--对齐方式\r\n    textColor=\'#ffffff\';--文本颜色\r\n    text=\'圆形Shape\';--显示的文本\r\n    textSize=\'18sp\';--文本大小\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\n--矩形\r\nimport \'android.graphics.drawable.shapes.RectShape\'\r\nimport \'android.graphics.Color\'\r\nrect_shape=ShapeDrawable(RectShape())\r\nrect_shape.getPaint().setColor(Color.BLUE)\r\nrect.setBackgroundDrawable(rect_shape)\r\n--圆角矩形\r\nimport \'android.graphics.drawable.shapes.RoundRectShape\'\r\nroundrect_shape=ShapeDrawable(RoundRectShape({10,10,10,10,10,10,10,10},RectF(),{20,20,20,20,20,20,20,20}))\r\nroundrect_shape.getPaint().setColor(Color.BLUE)\r\nroundrect.setBackgroundDrawable(roundrect_shape)\r\n--椭圆\r\nimport \'android.graphics.drawable.shapes.ArcShape\'\r\narc_shape=ShapeDrawable(ArcShape(500,500))\r\narc_shape.getPaint().setColor(Color.BLUE)\r\narc.setBackgroundDrawable(arc_shape)\r\n--圆\r\nimport \'android.graphics.drawable.shapes.OvalShape\'\r\noval_shape=ShapeDrawable(OvalShape())\r\noval_shape.getPaint().setColor(Color.BLUE)\r\noval.setBackgroundDrawable(oval_shape)','2019-08-09 01:04:58.604524','小何研究笔记'),('SharedPreferences测试','--[==[\r\nSharedPreferences简称Sp，\r\n是一种轻量级的数据存储方式,采用Key/value的方式进行映射，\r\n最终会在手机的/data/data/package_name/shared_prefs/目录下以xml的格式存在。 \r\nSp通常用于记录一些参数配置、行为标记等！\r\n因为其使用简单，所以大多数开发者用起来很爽！但是 \r\n请注意：千万不要使用Sp去存储量大的数据，\r\n也千万不要去让你的Sp文件超级大，\r\n否则会大大影响应用性能\r\n]==]\r\nSorrowClover=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n  gravity=\"center\";\r\n  {\r\n    EditText;--编辑框控件\r\n    id=\"edit\";\r\n    singleLine=true;--设置单行输入\r\n    layout_width=\'80%w\';--编辑框宽度\r\n    layout_height=\'50dp\';--编辑框高度\r\n    textSize=\'18sp\';--文本大小\r\n    textColor=\'#000000\';--输入文本的颜色\r\n    Hint=\'请输入需要储存的数据\';--编辑框为空时提示的文本\r\n    HintTextColor=\'#333333\';--编辑框内容为空的时候显示文本的颜色\r\n  };\r\n  {\r\n    Button;--按钮控件\r\n    id=\"save_btn\";\r\n    text=\'储存数据\';--显示的文本\r\n    textSize=\'18sp\';--文本大小\r\n    textColor=\'#000000\';--文本颜色\r\n    layout_width=\'100dp\';--按钮宽度\r\n    layout_height=\'50dp\';--按钮高度\r\n    BackgroundColor=\'#ffffff\';--按钮背景颜色\r\n  };\r\n  {\r\n    Button;--按钮控件\r\n    text=\'读取数据\';--显示的文本\r\n    id=\"read_btn\";\r\n    textSize=\'18sp\';--文本大小\r\n    textColor=\'#000000\';--文本颜色\r\n    layout_width=\'100dp\';--按钮宽度\r\n    layout_height=\'50dp\';--按钮高度\r\n    BackgroundColor=\'#ffffff\';--按钮背景颜色\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\n\r\nimport \'android.content.Context\'\r\nsave_btn.onClick=function()\r\n  if (edit.text == \"\") then\r\n    print(\"我才不存储空数据呢!\")\r\n   else\r\n    储存数据(edit.text)\r\n  end\r\nend\r\n\r\nread_btn.onClick=function()\r\n  读取数据()\r\nend\r\n\r\nfunction 储存数据(str)\r\n  --获取SharedPreferences文件，后面的第一个参数就是文件名，没有会自己创建，有就读取\r\n  sp = activity.getSharedPreferences(\"mysp\", Context.MODE_PRIVATE)\r\n  --设置编辑\r\n  sped = sp.edit()\r\n  --设置键值对\r\n  sped.putString(\"user\",str)\r\n  --提交保存数据\r\n  sped.commit()\r\n  print(\"储存成功\")\r\nend\r\n\r\nfunction 读取数据()\r\n  --获取SharedPreferences文件\r\n  sp = activity.getSharedPreferences(\"mysp\", Context.MODE_PRIVATE)\r\n  --打印对应的值\r\n  print(sp.getString(\"user\",\"\"))\r\nend','2019-08-08 09:18:37.839021','小何研究笔记'),('SM.MS上传图片','--需导入的DEX请自行将运行助手拆包，在libs文件夹里\r\n--sm.ms上传，除注释外都是固定模板，复制粘贴即可\r\nimport \'com.kn.okhttp.*\'\r\nimport \'okhttp3.*\'\r\n--调用选择图库\r\nimport \"android.content.Intent\"\r\nlocal intent= Intent(Intent.ACTION_PICK)\r\nintent.setType(\"image/*\")\r\nthis.startActivityForResult(intent, 1)\r\n-------\r\n\r\n--回调\r\nfunction onActivityResult(requestCode,resultCode,intent)\r\n  if intent then\r\n    local cursor =this.getContentResolver ().query(intent.getData(), nil, nil, nil, nil)\r\n    cursor.moveToFirst()\r\n    import \"android.provider.MediaStore\"\r\n    local idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA)\r\n    fileSrc = cursor.getString(idx)--返回路径\r\n    filename = fileSrc:match(\'.+%/(.+)\')--截取名字\r\n\r\n    requestBody = MultipartBody.Builder()\r\n    .setType(MultipartBody.FORM)\r\n    .addFormDataPart(\'smfile\',filename,RequestBody.create(MediaType.parse(\'multipart/form-data\'),File(fileSrc)))--对应表单\r\n    .build()\r\n    request = Request.Builder()\r\n    .header(\'User-Agent\',\'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36\')\r\n    .url(\'https://sm.ms/api/upload\')--URL\r\n    .post(requestBody)\r\n    .build()\r\n    okHttpClient = OkHttpClient()\r\n    okHttpClient.newCall(request).enqueue(Callback{\r\n      onFailure = function(call,e)--失败请求\r\n        print(e)\r\n      end,\r\n\r\n      onResponse = function(call,response)--请求成功\r\n        headers = response.headers()\r\n        print(headers)--展示返回头部\r\n        print(response.body().string())--展示返回内容\r\n      end\r\n    })\r\n  end\r\nend--nirenr','2019-08-18 05:58:35.829056','OkHttp教程'),('sqlite数据库测试','require \"import\"\r\nimport \"android.app.*\"\r\nimport \"android.os.*\"\r\nimport \"android.widget.*\"\r\nimport \"android.view.*\"\r\nactivity.setTitle(\'sqlite数据库操作\')\r\nactivity.setTheme(android.R.style.Theme_Holo_Light)\r\n--本篇来自nirenr，用于研究和扩展。\r\nbj={\r\n  LinearLayout;\r\n  orientation=\"vertical\";\r\n  layout_height=\"fill\";\r\n  layout_width=\"fill\";\r\n  {\r\n    HorizontalScrollView;\r\n    {\r\n      LinearLayout;\r\n    {\r\n      Button;\r\n      text=\"创建表\";\r\n      id=\"btn1\";\r\n    };\r\n    {\r\n      Button;\r\n      text=\"添加列\";\r\n      id=\"btn2\";\r\n    };\r\n    {\r\n      Button;\r\n      text=\"查询表内所有数据\";\r\n      id=\"btn3\";\r\n    };\r\n    };\r\n  };\r\n  {\r\n    TextView;\r\n    layout_width=\"fill\";\r\n    text=\"hello AndroLua+\";\r\n  };\r\n};\r\n\r\n\r\nactivity.setContentView(loadlayout(bj))\r\n--[[\r\n\r\n【常用SQL语句】\r\n\r\n1.数据类型：\r\n整型：int\r\n     字符：char(6)\r\n  varchar(24)\r\n文本：text\r\n   布尔：bit\r\n   \r\n日期：smalldatetime\r\n\r\n2.删除表：\r\ndrop table 表名\r\n\r\n3.修改表：\r\nalter table 表名 add 字段 类型\r\n//加约束\r\nalter table 表名 add constraint 约束\r\n\r\n4.创建表：\r\ncreate table 表名(\r\n字段 类型 primary key,\r\n字段 类型 default\'值1\' check(字段 in(\'值1\',\'值2\'))\r\n)\r\n//多个主键在最后面：\r\nprimary key(字段1,字段2)\r\n//参照：\r\n后面加：references 表名(字段)\r\n//条件：\r\n不为空：not null\r\n唯一性：unique\r\n//约束：\r\ncheck(字段>=值 and 字段<=值)\r\ncheck(字段 in(\'值1\',\'值2\'))\r\n\r\n5.查询语句：\r\nselect * from 表名 where 条件语句\r\n\r\n6.插入数据：\r\ninsert into 表名(字段列表) values(值列表)\r\n\r\n7.更新语句：\r\nupdate 表名 set 字段名 = 值 where 条件\r\n\r\n8.删除语句：\r\ndelete from 表名 where 条件\r\n\r\n9.分页查询：\r\nselect * from Account limit 3,5\r\n(获取5条记录，跳过前面3条)\r\n\r\n--一一一一一一一一一一一一一一一一一一一一\r\n\r\n【常用SQL语句2】\r\n\r\n1.子查询：\r\n例：\r\nselect 学号,成绩 from xs_kc \r\nwhere 课程号=(select 课程号 from kc where 课程名=\'计算机基础\')\r\n\r\n2.连接查询：\r\n例：\r\nselect 学号,成绩 from xs_kc，kc\r\nwhere xs_kc.课程号=kc.课程号\r\nadd 课程名=\'计算机基础\'\r\n\r\n3.创建存储过程：\r\n//根据名字查询平均成绩，输入参数，输出参数\r\ncreate proc pxs_avgByName(\r\n	@name char(8) ,@avg float output\r\n)\r\nas\r\n	set @avg=(select avg(成绩) \r\n	from xs,xs_kc \r\n	where xs.学号=xs_kc.学号 \r\n	and xs.姓名=@name)\r\ngo\r\n//执行存储过程\r\ndeclare @ag float\r\nexec pxs_avgByName \'李林\',@avg output\r\nselect \'平均分\' =@ag\r\n\r\n4.创建触发器：\r\n//如果在XS表中添加或修改的学生学号不是以“08”开头，\r\n//则使用RAISERROR语句向客户端显示一条信息“学号必修以08开头”。\r\ncreate trigger tri_n\r\non xs\r\nfor insert,update\r\nas \r\n	declare @i char(6)\r\n	select @i=学号 from inserted\r\n	if @i not like \'08%\'\r\n	begin\r\n		ROLLBACK  TRANSACTION \r\n		RAISERROR (\'学号必修以08开头，操作已经撤消！\', 16, 10)\r\n	end\r\ngo\r\n\r\n--一一一一一一一一一一一一一一一一一一一一一\r\n\r\n//插入数据\r\npublic void insertData(SQLiteDatabase db,String table,Article article){\r\n	ContentValues values = new ContentValues();\r\n	values.put(\"title\",article.getTitle());\r\n	values.put(\"author\", article.getAuthor());\r\n\r\n	db.insert(table, null, values);\r\n}\r\n\r\n//删除数据\r\npublic void deletData(SQLiteDatabase db,String table,Integer id){\r\n	db.delete(table, \"_id=?\", new String[]{id.toString()});\r\n}\r\n\r\n//根据id修改数据\r\npublic void updataData(SQLiteDatabase db,String table,Integer id,Article article){\r\n	ContentValues values = new ContentValues();\r\n	values.put(\"title\",article.getTitle());\r\n	values.put(\"author\", article.getAuthor());\r\n	db.update(table, values, \"_id=?\", new String[]{id.toString()});\r\n}\r\n\r\n//根据id查询数据库\r\npublic Article selectData(SQLiteDatabase db,String table,Integer id){\r\n	Cursor cursor = db.query(table,null, \"_id=?\", new String[]{id.toString()}, null, null, null);\r\n	if(cursor.moveToFirst()){\r\n		String title = cursor.getString(cursor.getColumnIndex(\"title\"));\r\n		String author = cursor.getString(cursor.getColumnIndex(\"author\"));\r\n		return new Article(title,author);\r\n	}\r\n	return null;\r\n}\r\n\r\n//查询数据库所有数据\r\npublic List<Article> selectDatas(SQLiteDatabase db,String table){\r\n	List<Article> articles = new ArrayList<Article>();\r\n	Cursor cursor = db.query(table,null, null, null, null, null, null);\r\n	while(cursor.moveToNext()){\r\n		int id = cursor.getInt(cursor.getColumnIndex(\"_id\"));\r\n		String title = cursor.getString(cursor.getColumnIndex(\"title\"));\r\n\r\n		articles.add(new Article(id,title));\r\n	}\r\n	return articles;\r\n}\r\n\r\n]]\r\n\r\n\r\n\r\n--导入包\r\nimport \"android.database.sqlite.*\"\r\n\r\n--打开数据库(没有自动创建)\r\ndb = SQLiteDatabase.openOrCreateDatabase(this.getLuaDir() .. \"/test.db\",MODE_PRIVATE, nil);\r\n\r\n\r\n\r\n--execSQL()方法可以执行insert、delete、update和CREATE TABLE之类有更改行为的SQL语句\r\nfunction exec(sql)\r\n  db.execSQL(sql);\r\nend\r\n\r\n--rawQuery()方法用于执行select语句。\r\nfunction raw(sql,text)\r\n  cursor=db.rawQuery(sql,text)\r\nend\r\n\r\n\r\nbtn1.onClick=function()\r\n  CreatrTableSql=\"create table user(id integer primary key,name varchar(20),age int)\"\r\nif pcall(exec,CreatrTableSql) then\r\n  --创建user表，integer类型为自动增长\r\n  print(\"创建成功\")\r\n else\r\n  print(\"创建失败\")\r\nend\r\nend\r\n\r\nbtn2.onClick=function()\r\nif pcall(exec,\"insert into user(name,age) values(\'泥人\',60)\") then\r\n  print(\"添加列成功\")\r\nelse\r\n  print(\"添加列失败\")\r\nend\r\nend\r\n\r\nbtn3.onClick=function()\r\n  sql=\"select * from user\"\r\n  if pcall(raw,sql,nil) then\r\n    print(\"查询成功\")\r\n    while (cursor.moveToNext()) do\r\n      userid = cursor.getInt(0); --获取第一列的值,第一列的索引从0开始  \r\n      name = cursor.getString(1);--获取第二列的值\r\n      age = cursor.getInt(2);--获取第三列的值\r\n      print(\"Id:\"..userid..\"，Name:\"..name..\"，Age\"..age)\r\n    end\r\n    cursor.close()\r\n  else\r\n    print(\"查询失败\")\r\n  end\r\nend','2019-08-07 10:57:41.249674','小何研究笔记'),('StackView初仿探探测试','shamrock=\r\n--布局请写在这里\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\',\r\n  {\r\n    StackView;\r\n    id=\'stack\',\r\n    layout_width=\'90%w\',\r\n    layout_height=\'800dp\',\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))\r\n\r\nitem={\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  Gravity=\'center\',\r\n  {\r\n    CardView;--卡片控件\r\n    id=\"card\",\r\n    Elevation=\'3\';--阴影属性\r\n    layout_width=\'80%w\';--卡片宽度\r\n    layout_height=\'700dp\';--卡片高度\r\n    radius=\'40\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n    {\r\n      TextView;--文本控件\r\n      id=\"text\",\r\n      layout_width=\'fill\';--文本宽度\r\n      layout_height=\'fill\';--文本高度\r\n      Gravity=\'center\';--重力属性\r\n      textColor=\'#ffffff\';--文本颜色\r\n      text=\'\';--显示的文本\r\n      textSize=\'20sp\';--文本大小\r\n    };\r\n  };\r\n};\r\n--创建项目数组\r\ncolor_table={0xff7e5cf8,0xfff85cf8,0xff7ef5f8,0xfffe5cf8,0xff005cf8,0xff7e00f8}\r\nzmb={\"ONE\",\"TWO\",\"THREE\",\"FOUR\",\"FIVE\",\"SIX\",\"SEVEN\",\"EIGHT\",\"NINE\",\"TEN\"}\r\ndata={}\r\n--创建适配器\r\nadp=LuaAdapter(activity,data,item)\r\n--添加数据\r\nfor n=1,10 do\r\n  a=math.random(1,6)\r\n  table.insert(data,{\r\n    text={\r\n      Text=zmb[n],\r\n    },\r\n    card={\r\n      BackgroundColor=color_table[a],\r\n    },\r\n  })\r\nend\r\n--设置适配器\r\nstack.Adapter=adp\r\n\r\nstack.onItemClick=function(l,v,p,i)\r\n  print(zmb[i])\r\nend','2019-06-25 16:45:03.813107','小何研究笔记'),('StackView多布局实战','shamrock=\r\n--布局请写在这里\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'horizontal\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'50dp\';--布局高度\r\n    {\r\n      TextView;--文本控件\r\n      layout_width=\'fill\';--文本宽度\r\n      layout_height=\'fill\';--文本高度\r\n      Gravity=\'center\';--重力属性\r\n      textColor=\'#ffffff\';--文本颜色\r\n      text=\'StackView测试\';--显示的文本\r\n      textSize=\'20sp\';--文本大小\r\n      background=\'#ff7e5cf8\';\r\n    };\r\n  };\r\n  {\r\n    ScrollView;--纵向滚动\r\n    layout_width=\'fill\';--宽\r\n    layout_height=\'fill\';--高\r\n    --隐藏竖向滚动滑条\r\n    VerticalScrollBarEnabled=false;\r\n    {\r\n      LinearLayout;--线性布局\r\n      Orientation=\'vertical\';--布局方向\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n      {\r\n        LinearLayout;--线性布局\r\n        Orientation=\'vertical\';--布局方向\r\n        layout_width=\'fill\';--布局宽度\r\n        layout_height=\'250dp\';--布局高度\r\n        {\r\n          StackView;\r\n          id=\'第一stack\';\r\n          layout_width=\'80%w\';\r\n          layout_height=\'250dp\';\r\n          layout_gravity=\'center\';\r\n        }\r\n      };\r\n      {\r\n        LinearLayout;--线性布局\r\n        Orientation=\'vertical\';--布局方向\r\n        layout_width=\'fill\';--布局宽度\r\n        layout_height=\'250dp\';--布局高度\r\n        {\r\n          StackView;\r\n          id=\'第二stack\';\r\n          layout_width=\'80%w\';\r\n          layout_height=\'250dp\';\r\n          layout_gravity=\'center\';\r\n        }\r\n      };\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))\r\n\r\nitem={\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  {\r\n    CardView;--卡片控件\r\n    layout_margin=\'1%w\';\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'3\';--阴影属性\r\n    layout_width=\'70%w\';--卡片宽度\r\n    layout_height=\'200dp\';--卡片高度\r\n    radius=\'20\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n    {\r\n      TextView;--文本控件\r\n      id=\'text\';\r\n      layout_width=\'fill\';--文本宽度\r\n      layout_height=\'fill\';--文本高度\r\n      Gravity=\'center\';--重力属性\r\n      textColor=\'#ffffff\';--文本颜色\r\n      text=\'\';--显示的文本\r\n      textSize=\'20sp\';--文本大小\r\n    };\r\n  };\r\n};\r\n--创建项目数组\r\ntext_table={\'不准翻开！\',\'说了不准翻开！\',\'你！怎么不听话！\',\'你是不是喜欢我？？？\',\'翻吧翻吧，没有啦！\'}\r\ndata={}\r\n--创建适配器\r\nadp=LuaAdapter(activity,data,item)\r\n--添加数据\r\nfor n=1,5 do\r\n  table.insert(data,{\r\n    text={\r\n      Text=text_table[n],\r\n    },\r\n  })\r\nend\r\n--设置适配器\r\n第一stack.Adapter=adp\r\n\r\nitem={\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  {\r\n    CardView;--卡片控件\r\n    layout_margin=\'1%w\';\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'3\';--阴影属性\r\n    layout_width=\'70%w\';--卡片宽度\r\n    layout_height=\'200dp\';--卡片高度\r\n    radius=\'20\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n    {\r\n      TextView;--文本控件\r\n      id=\'text\';\r\n      layout_width=\'fill\';--文本宽度\r\n      layout_height=\'fill\';--文本高度\r\n      Gravity=\'center\';--重力属性\r\n      textColor=\'#ffffff\';--文本颜色\r\n      text=\'\';--显示的文本\r\n      textSize=\'20sp\';--文本大小\r\n    };\r\n  };\r\n};\r\n--创建项目数组\r\ntext_table={\'这次不可以了！\',\'你又来！\',\'你！怎么又不听话！\',\'你要气死我？\',\'翻吧翻吧，这次真没有啦！\'}\r\ndata={}\r\n--创建适配器\r\nadp=LuaAdapter(activity,data,item)\r\n--添加数据\r\nfor n=1,5 do\r\n  table.insert(data,{\r\n    text={\r\n      Text=text_table[n],\r\n    },\r\n  })\r\nend\r\n--设置适配器\r\n第二stack.Adapter=adp','2019-06-25 12:58:10.332238','小何研究笔记'),('StackView视图研究笔记','shamrock=\r\n--布局请写在这里\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  gravity=\'center\';\r\n  {\r\n    StackView;\r\n    id=\'stack\';\r\n    layout_width=\'300\';\r\n    layout_height=\'300\';\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))\r\n\r\nitem={\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#00000000\';--布局背景颜色(或者图片路径)\r\n  {\r\n    CardView;--卡片控件\r\n    id=\'card\';\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'0\';--阴影属性\r\n    layout_width=\'250\';--卡片宽度\r\n    layout_height=\'250\';--卡片高度\r\n    radius=\'50\';--卡片圆角\r\n    CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n    {\r\n      TextView;--文本控件\r\n      id=\'text\';\r\n      layout_width=\'fill\';--文本宽度\r\n      layout_height=\'fill\';--文本高度\r\n      Gravity=\'center\';--重力属性\r\n      textColor=\'#ffffff\';--文本颜色\r\n      text=\'ONE\';--显示的文本\r\n      textSize=\'20sp\';--文本大小\r\n    };\r\n  };\r\n};\r\n--创建项目数组\r\ncolor_table={0xff7e5cf8,0xff7ef7f8,0xfff65cf8,0xff7e00f8,0xff135cf8}\r\ndata={}\r\n--创建适配器\r\nadp=LuaAdapter(activity,data,item)\r\n--添加数据\r\nfor n=1,5 do\r\n  table.insert(data,{\r\n    text={\r\n      Text=tostring(n),\r\n    },\r\n    card={\r\n      BackgroundColor=color_table[n],\r\n    },\r\n  })\r\nend\r\n--设置适配器\r\nstack.Adapter=adp','2019-06-25 11:52:17.046258','小何研究笔记'),('String基础概述','爬虫，这是一个大学问，厉害的爬虫可以用同一个网站的相同数据，\r\n做出更突出的效果，可以将杂乱无章的数据，处理成系统的，分类好的数据来进行复用。\r\n当然，这些都是厉害的，工程量十分大的，而我们只需要简单的处理页面数据就可以了。\r\n首先熟悉下Lua的字符串操作\r\n字符串由一对双引号或单引号来表示。\r\n\r\nstring1 = \"this is string1\"\r\nstring2 = \'this is string2\'\r\n\r\n在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字，字符串连接使用的是 ..如：\r\n\r\nprint(\"a\" .. \'b\')\r\n--输出(ab)\r\nprint(157 .. 428)\r\n--输出(157428)\r\n\r\n使用 # 来计算字符串的长度，放在字符串前面，如下实例：\r\n\r\nlen = \"www.androlua.com\"\r\nprint(#len)\r\n--输出(16)\r\n\r\n字符串的截取操作：\r\nstrings=\"左中右\"\r\n\r\n--取字符串左边\r\n左=strings:match(\"(.+)中\")\r\n\r\n\r\n--取字符串中间\r\n中=strings:match(\"左(.-)右\")\r\n\r\n\r\n--取字符串右边\r\n右=strings:match(\"中(.+)\")\r\n\r\n--替换\r\nstring.gsub(原字符串,替换的字符串,替换成的字符串)\r\n\r\n--匹配子串位置\r\n起始位置,结束位置=string.find(字符串,子串)\r\n\r\n\r\n--按位置捕获字符串\r\nstring.sub(字符串,子串起始位置,子串结束位置)\r\n\r\n需要一提得是，Lua中使用\\来进行转义，例如：\r\n\\n  换行(LF) ，将当前位置移到下一行开头\r\n\\r  回车(CR) ，将当前位置移到本行开头\r\n\\t  水平制表(HT) （跳到下一个TAB位置）\r\n\\\\  代表一个反斜线字符\\\r\n\\\'  代表一个单引号（撇号）字符\r\n\\\"  代表一个双引号字符\r\n\\0  空字符(NULL)\r\n\r\nLua中字符串操作api：\r\nstring.upper(argument)  字符串全部转为大写字母。\r\nstring.lower(argument)  字符串全部转为小写字母。\r\nstring.gsub(mainString,findString,replaceString,num)  在字符串中替换,mainString为要替换的字符串， findString 为被替换的字符，replaceString 要替换的字符，num 替换次数（可以忽略，则全部替换）\r\nstring.find (str, substr, [init, [end]])  在一个指定的目标字符串中搜索指定的内容(第三个参数为索引),返回其具体位置。不存在则返回 nil。\r\nstring.reverse(arg)  字符串反转\r\nstring.format(...)  返回一个类似printf的格式化字符串\r\nstring.char(arg) 和 string.byte(arg[,int])  char 将整型数字转成字符并连接， byte 转换字符为整数值(可以指定某个字符，默认第一个字符)。\r\nstring.len(arg)  计算字符串长度。\r\nstring.rep(string, n)  返回字符串string的n个拷贝\r\n..  链接两个字符串\r\nstring.gmatch(str, pattern)  回一个迭代器函数，每一次调用这个函数，返回一个在字符串 str 找到的下一个符合 pattern 描述的子串。如果参数 pattern 描述的字符串没有找到，迭代函数返回nil。\r\nstring.match(str, pattern, init)  string.match()只寻找源字串str中的第一个配对. 参数init可选, 指定搜寻过程的起点, 默认为1。 \r\n在成功配对时, 函数将返回配对表达式中的所有捕获结果; 如果没有设置捕获标记, 则返回整个配对字符串. 当没有成功的配对时, 返回nil。\r\n\r\n其中string.format()有以下转义码：\r\n%c - 接受一个数字, 并将其转化为ASCII码表中对应的字符\r\n%d, %i - 接受一个数字并将其转化为有符号的整数格式\r\n%o - 接受一个数字并将其转化为八进制数格式\r\n%u - 接受一个数字并将其转化为无符号整数格式\r\n%x - 接受一个数字并将其转化为十六进制数格式, 使用小写字母\r\n%X - 接受一个数字并将其转化为十六进制数格式, 使用大写字母\r\n%e - 接受一个数字并将其转化为科学记数法格式, 使用小写字母e\r\n%E - 接受一个数字并将其转化为科学记数法格式, 使用大写字母E\r\n%f - 接受一个数字并将其转化为浮点数格式\r\n%g(%G) - 接受一个数字并将其转化为%e(%E, 对应%G)及%f中较短的一种格式\r\n%q - 接受一个字符串并将其转化为可安全被Lua编译器读入的格式\r\n%s - 接受一个字符串并按照给定的参数格式化该字符串\r\n\r\nLua的匹配模式：\r\n.(点): 与任何字符配对\r\n%a: 与任何字母配对\r\n%c: 与任何控制符配对(例如\\n)\r\n%d: 与任何数字配对\r\n%l: 与任何小写字母配对\r\n%p: 与任何标点(punctuation)配对\r\n%s: 与空白字符配对\r\n%u: 与任何大写字母配对\r\n%w: 与任何字母/数字配对\r\n%x: 与任何十六进制数配对\r\n%z: 与任何代表0的字符配对\r\n%x(此处x是非字母非数字字符): 与字符x配对. 主要用来处理表达式中有功能的字符(^$()%.[]*+-?)的配对问题, 例如%%与%配对\r\n[数个字符类]: 与任何[]中包含的字符类配对. 例如[%w_]与任何字母/数字, 或下划线符号(_)配对\r\n[^数个字符类]: 与任何不包含在[]中的字符类配对. 例如[^%s]与任何非空白字符配对\r\n单个字符类匹配该类别中任意单个字符；\r\n单个字符类跟一个 \'*\'， 将匹配零或多个该类的字符。 这个条目总是匹配尽可能长的串；\r\n单个字符类跟一个 \'+\'， 将匹配一或更多个该类的字符。 这个条目总是匹配尽可能长的串；\r\n单个字符类跟一个 \'-\'， 将匹配零或更多个该类的字符。 和 \'*\' 不同， 这个条目总是匹配尽可能短的串；\r\n单个字符类跟一个 \'?\'， 将匹配零或一个该类的字符。 只要有可能，它会匹配一个；\r\n%n， 这里的 n 可以从 1 到 9； 这个条目匹配一个等于 n 号捕获物（后面有描述）的子串。\r\n%bxy， 这里的 x 和 y 是两个明确的字符； 这个条目匹配以 x 开始 y 结束， 且其中 x 和 y 保持 平衡 的字符串。 意思是，如果从左到右读这个字符串，对每次读到一个 x 就 +1 ，读到一个 y 就 -1， 最终结束处的那个 y 是第一个记数到 0 的 y。 举个例子，条目 %b() 可以匹配到括号平衡的表达式。\r\n%f[set]， 指 边境模式； 这个条目会匹配到一个位于 set 内某个字符之前的一个空串， 且这个位置的前一个字符不属于 set 。 集合 set 的含义如前面所述。 匹配出的那个空串之开始和结束点的计算就看成该处有个字符 \'\\0\' 一样。\r\n\r\n常用正则(Lua中需要将\\换成%)：\r\n非负整数：^\\d+$\r\n正整数：^[0-9]*[1-9][0-9]*$\r\n非正整数：^((-\\d+)|(0+))$\r\n负整数：^-[0-9]*[1-9][0-9]*$\r\n整数：^-?\\d+$\r\n非负浮点数：^\\d+(\\.\\d+)?$\r\n正浮点数 : ^((0-9)+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)$\r\n非正浮点数：^((-\\d+\\.\\d+)?)|(0+(\\.0+)?))$\r\n负浮点数：^(-((正浮点数正则式)))$\r\n英文字符串：^[A-Za-z]+$\r\n英文大写串：^[A-Z]+$\r\n英文小写串：^[a-z]+$\r\n英文字符数字串：^[A-Za-z0-9]+$\r\n英数字加下划线串：^\\w+$\r\nE-mail地址：^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$\r\nURL：^[a-zA-Z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\s*)?$ \r\n 或：^http:\\/\\/[A-Za-z0-9]+\\.[A-Za-z0-9]+[\\/=\\?%\\-&_~`@[\\]\\\':+!]*([^<>\\\"\\\"])*$\r\n邮政编码：^[1-9]\\d{5}$\r\n中文：^[\\u0391-\\uFFE5]+$\r\n电话号码：^((\\(\\d{2,3}\\))|(\\d{3}\\-))?(\\(0\\d{2,3}\\)|0\\d{2,3}-)?[1-9]\\d{6,7}(\\-\\d{1,4})?$\r\n手机号码：^((\\(\\d{2,3}\\))|(\\d{3}\\-))?13\\d{9}$\r\n双字节字符(包括汉字在内)：^\\x00-\\xff\r\n匹配首尾空格：(^\\s*)|(\\s*$)（像vbscript那样的trim函数）\r\n匹配HTML标记：<(.*)>.*<\\/\\1>|<(.*) \\/>\r\n匹配空行：\\n[\\s| ]*\\r\r\n提取信息中的网络链接：(h|H)(r|R)(e|E)(f|F)  *=  *(\'|\")?(\\w|\\\\|\\/|\\.)+(\'|\"|  *|>)?\r\n提取信息中的邮件地址：\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*\r\n提取信息中的图片链接：(s|S)(r|R)(c|C)  *=  *(\'|\")?(\\w|\\\\|\\/|\\.)+(\'|\"|  *|>)?\r\n提取信息中的IP地址：(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\r\n提取信息中的中国手机号码：(86)*0*13\\d{9}\r\n提取信息中的中国固定电话号码：(\\(\\d{3,4}\\)|\\d{3,4}-|\\s)?\\d{8}\r\n提取信息中的中国电话号码（包括移动和固定电话）：(\\(\\d{3,4}\\)|\\d{3,4}-|\\s)?\\d{7,14}\r\n提取信息中的中国邮政编码：[1-9]{1}(\\d+){5}\r\n提取信息中的浮点数（即小数）：(-?\\d*)\\.?\\d+\r\n提取信息中的任何数字 ：(-?\\d*)(\\.\\d+)? \r\nIP：(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\r\n电话区号：/^0\\d{2,3}$/\r\n腾讯QQ号：^[1-9]*[1-9][0-9]*$\r\n帐号(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$\r\n中文、英文、数字及下划线：^[\\u4e00-\\u9fa5_a-zA-Z0-9]+$\r\n匹配中文字符的正则表达式： [\\u4e00-\\u9fa5]\r\n匹配双字节字符(包括汉字在内)：[^\\x00-\\xff]\r\n匹配空行的正则表达式：\\n[\\s| ]*\\r\r\n匹配HTML标记的正则表达式：/<(.*)>.*<\\/\\1>|<(.*) \\/>/\r\nsql语句：^(select|drop|delete|create|update|insert).*$\r\n匹配首尾空格的正则表达式：(^\\s*)|(\\s*$)\r\n匹配Email地址的正则表达式：\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*','2019-06-16 18:09:03.343660','String爬虫教程'),('TextView文本框教程','--[[\r\n文本组件即用于显示文本的组件\r\n常用属性：\r\nid	为组件绑定id，用于触发事件\r\nlayout_width	组件宽度\r\nlayout_height	组件高度\r\ngravity	组件中内容对齐方向\r\ntext	显示的文本内容\r\ntextColor	字体颜色\r\ntextSize	字体大小\r\nbackground	组件背景颜色\r\n]]\r\n--创建简单示例\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  gravity=\'center\';--设置居中\r\n  {\r\n    TextView;--文本控件\r\n    layout_width=\'fill\';--文本宽度\r\n    layout_height=\'fill\';--文本高度\r\n    Gravity=\'center\';--重力属性\r\n    textColor=\'#000000\';--文本颜色\r\n    text=\'Welcome AndroLuaBox\';--显示的文本\r\n    textSize=\'50sp\';--文本大小\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--添加布局至窗口','2019-06-21 13:13:42.906046','布局教程'),('ViewFlipper翻转视图测试','平移动画=TranslateAnimation(0, activity.Width, 0, 0)\r\n平移动画.setDuration(1000)\r\n平移动画.setFillAfter(true)\r\n平移动画2=TranslateAnimation(-activity.Width,0 , 0, 0)\r\n平移动画2.setDuration(1000)\r\n平移动画2.setFillAfter(true)\r\nshamrock=\r\n--布局请写在这里\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  {\r\n    ViewFlipper,\r\n    layout_width=\"fill\",\r\n    layout_height=\"fill\",\r\n    id=\"flipper\",\r\n    inAnimation=平移动画,\r\n    outAnimation=平移动画2,\r\n    flipInterval=\"2000\",\r\n    {\r\n      CardView;--卡片控件\r\n      layout_gravity=\'center\';--重力属性\r\n      Elevation=\'3\';--阴影属性\r\n      layout_width=\'80%w\';--卡片宽度\r\n      layout_height=\'500dp\';--卡片高度\r\n      radius=\'20\';--卡片圆角\r\n      CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n    };\r\n    {\r\n      CardView;--卡片控件\r\n      layout_gravity=\'center\';--重力属性\r\n      Elevation=\'3\';--阴影属性\r\n      layout_width=\'80%w\';--卡片宽度\r\n      layout_height=\'500dp\';--卡片高度\r\n      radius=\'20\';--卡片圆角\r\n      CardBackgroundColor=\'#ff7ecdf8\';--卡片背景颜色\r\n    };\r\n  },\r\n};\r\nactivity.setContentView(loadlayout(shamrock))\r\n\r\nflipper.startFlipping()','2019-06-25 17:44:22.561868','小何研究笔记'),('Wave波浪球视图研究','import\'com.yuxuan.widget.*\'\r\nSorrowClover=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n  Gravity=\"center\",\r\n  {\r\n    CardView;--卡片控件\r\n    CardElevation=\'10\';--卡片阴影\r\n    layout_width=\'200dp\';--卡片宽度\r\n    layout_height=\'200dp\';--卡片高度\r\n    radius=\'100dp\';--卡片圆角\r\n    CardBackgroundColor=\'#ffffff\';--卡片背景颜色\r\n    {\r\n      WaveView;\r\n      layout_height=\"fill\",\r\n      layout_width=\"fill\",\r\n      id=\"wave\",\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\nwave.setStartColor(0xffffffff)\r\nwave.setCloseColor(0xffA593E0)\r\nwave.setWaveHeight(50)\r\nwave.setVelocity(3)','2019-07-04 14:19:57.742668','小何研究笔记'),('Wave波浪球视图背景测试','import\'com.yuxuan.widget.*\'\r\nSorrowClover=\r\n{\r\n  FrameLayout;--帧布局\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    {\r\n      WaveView;\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      id=\"wave\";\r\n    };\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    {\r\n      CardView;--卡片控件\r\n      layout_margin=\'-50dp\';--卡片边距\r\n      CardElevation=\'3\';--卡片阴影\r\n      layout_width=\'200dp\';--卡片宽度\r\n      layout_height=\'200dp\';--卡片高度\r\n      radius=\'100dp\';--卡片圆角\r\n      CardBackgroundColor=\'#ffffff\';--卡片背景颜色\r\n      {\r\n        WaveView;\r\n        id=\"wave1\";\r\n      };\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\nwave.setStartColor(0xffffffff)\r\nwave.setCloseColor(0xffA593E0)\r\nwave.setWaveHeight(10)\r\nwave.setVelocity(10)\r\nwave1.setStartColor(0xffffffff)\r\nwave1.setCloseColor(0xffA593E0)\r\nwave1.setWaveHeight(10)\r\nwave1.setVelocity(10)','2019-07-04 14:49:17.645482','小何研究笔记'),('仿UI参考任务卡布局','--仿UI参考任务卡布局\r\nSorrowClover=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ff03a9f4\';--布局背景颜色(或图片路径)\r\n  {\r\n    Toolbar;\r\n    Title=\"任务\";\r\n    TitleTextColor=\"#ffffff\";\r\n  };\r\n  {\r\n    GridView;--网格控件\r\n    id=\"grid\";\r\n    layout_width=\'fill\';--网格宽度\r\n    layout_height=\'fill\';--网格高度\r\n    Gravity=\'center\';--对齐方式\r\n    NumColumns=\'2\';--列数\r\n    --ColumnWidth=\'\';--每一列的宽度\r\n    --StretchMode=\'\';--缩放\r\n    HorizontalSpacing=\'16\';--两列直接的边距\r\n    VerticalSpacing=\'16\';--两行之间的间距\r\n    VerticalScrollBarEnabled=false;--隐藏竖向滑条\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\n\r\nitem={\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'250dp\';--布局高度\r\n  gravity=\"center\";\r\n  {\r\n    CardView;--卡片控件\r\n    layout_margin=\'16\';--卡片边距\r\n    CardElevation=\'2\';--卡片阴影\r\n    layout_width=\'fill\';--卡片宽度\r\n    layout_height=\'fill\';--卡片高度\r\n    radius=\'16\';--卡片圆角\r\n    CardBackgroundColor=\'#ffffff\';--卡片背景颜色\r\n    {\r\n      LinearLayout;--线性布局\r\n      Orientation=\'vertical\';--布局方向\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      Gravity=\"center\";\r\n      {\r\n        CardView;--卡片控件\r\n        id=\"card\";\r\n        CardElevation=\'0\';--卡片阴影\r\n        layout_width=\'50dp\';--卡片宽度\r\n        layout_height=\'50dp\';--卡片高度\r\n        radius=\'25dp\';--卡片圆角\r\n        CardBackgroundColor=\'#ffff1744\';--卡片背景颜色\r\n        alpha=\"0.5\";\r\n      };\r\n      {\r\n        TextView;--文本控件\r\n        id=\"text\";\r\n        padding=\'16\';--布局内边距\r\n        layout_width=\'wrap\';--文本宽度\r\n        layout_height=\'wrap\';--文本高度\r\n        textColor=\'#000000\';--文本颜色\r\n        text=\'学习\';--显示的文本\r\n        textSize=\'20sp\';--文本大小\r\n      };\r\n    };\r\n  };\r\n};\r\n--创建项目数组\r\ndata={}\r\ncolor_table={0xffff1744,0xff651fff,0xff00b0ff,0xff00e5ff,0xff00e676,0xffffea00,0xffffc400,0xffff3d00}\r\ntext_table={\"学习\",\"工作\",\"健身\",\"购物\",\"唱歌\",\"电影\",\"料理\",\"待开发\"}\r\n--创建适配器\r\nadp=LuaAdapter(activity,data,item)\r\n--添加数据\r\nfor n=1,8 do\r\n  table.insert(data,{\r\n    card={\r\n      CardBackgroundColor=color_table[n],\r\n    },\r\n  text={\r\n    Text=text_table[n]\r\n    },\r\n  })\r\nend\r\n--设置适配器\r\ngrid.Adapter=adp\r\n\r\ngrid.onItemClick=function(l,v,p,i)\r\n  print(text_table[i])\r\n  return true\r\nend','2019-08-24 16:33:06.489968','布局实战'),('仿UI参考登陆注册布局','--仿UI参考登陆注册布局\r\nimport \'android.graphics.RectF\'\r\nimport \'android.graphics.Paint\'\r\nimport \'android.graphics.drawable.shapes.RoundRectShape\'\r\nimport \'android.graphics.drawable.ShapeDrawable\'\r\nrrs1=ShapeDrawable(RoundRectShape({75,75,75,75,75,75,75,75},nil,nil))\r\nrrs1.getPaint().setColor(0xff000000)\r\nSorrowClover=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高\r\n  BackgroundDrawable=LuaDrawable(function(canvas,paint,draw)\r\n    canvas.drawColor(0xffffffff)\r\n    paint.setColor(0xff77AF9C)\r\n    canvas.drawCircle(200,-75,600,paint)\r\n    paint.setColor(0xff566270)\r\n    canvas.drawCircle(800,-10,600,paint)\r\n  end);\r\n  Gravity=\"center\";\r\n  {\r\n    RippleLayout,--水波纹布局\r\n    layout_width=\'wrap\';--布局宽度\r\n    layout_height=\'wrap\';--布局高度\r\n    RippleColor=\'#ffffff\';--水波纹颜色\r\n    Circle=true;--长按圆圈\r\n    {\r\n      Button;--按钮控件\r\n      text=\'注册\';--显示的文本\r\n      textSize=\'16sp\';--文本大小\r\n      textColor=\'#ffffff\';--文本颜色\r\n      layout_width=\'60%w\';--按钮宽度\r\n      layout_height=\'150\';--按钮高度\r\n      BackgroundDrawable=rrs1;\r\n    };\r\n  };\r\n  {\r\n    RippleLayout,--水波纹布局\r\n    layout_marginTop=\'32dp\';--布局外边顶距\r\n    layout_width=\'wrap\';--布局宽度\r\n    layout_height=\'wrap\';--布局高度\r\n    RippleColor=\'#ffffff\';--水波纹颜色\r\n    Circle=true;--长按圆圈\r\n    {\r\n      Button;--按钮控件\r\n      text=\'登陆\';--显示的文本\r\n      textSize=\'16sp\';--文本大小\r\n      textColor=\'#000000\';--文本颜色\r\n      layout_width=\'60%w\';--按钮宽度\r\n      layout_height=\'150\';--按钮高度\r\n      BackgroundDrawable=LuaDrawable(function(canvas,paint,draw)\r\n        paint.setColor(0xff000000)\r\n        paint.setStyle(Paint.Style.STROKE)\r\n        paint.setStrokeWidth(8)\r\n        canvas.drawRoundRect(RectF(draw.getBounds()),75,75,paint)\r\n      end);\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))','2019-08-24 18:26:57.481265','布局实战'),('仿微信加载loading对话框','function 仿微信加载loading()\r\n  import \'android.graphics.drawable.shapes.RoundRectShape\'\r\n  import \'android.graphics.drawable.ShapeDrawable\'\r\n  import \'android.graphics.Paint\'\r\n  import \'android.graphics.Color\'\r\n  import \'android.graphics.RectF\'\r\n  import \'android.graphics.drawable.shapes.RoundRectShape\'\r\n  dialog_layout={\r\n    LinearLayout;--线性布局\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n    gravity=\'center\';\r\n    {\r\n      LinearLayout;--线性布局\r\n      id=\'dialog_anime\';\r\n      layout_width=\'300\';--布局宽度\r\n      layout_height=\'300\';--布局高度\r\n    };\r\n  };\r\n  dl = LuaDialog(this)\r\n  dl.setCancelable(true)\r\n  dl.setView(loadlayout(dialog_layout))\r\n  dl.getWindow().setBackgroundDrawable(ShapeDrawable(RoundRectShape({12,12,12,12,12,12,12,12},nil,nil)))\r\n  dl.show()\r\n  function 绘制(角度)\r\n    dialog_anime.setBackgroundDrawable(LuaDrawable(function(canvs,paint,draw)\r\n      paint.setAntiAlias(true)\r\n      paint.setColor(Color.BLUE)\r\n      canvs.drawArc(RectF(100,100,200,200),180,角度,true,paint)\r\n      paint2 = Paint()\r\n      paint2.setStyle(Paint.Style.STROKE)\r\n      paint2.setColor(Color.BLUE)\r\n      canvs.drawCircle(150,150,60,paint2)\r\n      draw.invalidateSelf()\r\n    end))\r\n  end\r\n  i=0\r\n  ti=Ticker()\r\n  ti.Period=10\r\n  ti.onTick=function()\r\n    --事件\r\n    绘制(i)\r\n    i=i+1\r\n    if(i==360) then\r\n      i=0\r\n    end\r\n  end\r\n  ti.start()\r\n  dl.onDismiss=function()\r\n    ti.stop()\r\n  end\r\n  return dl\r\nend\r\n\r\ndl = 仿微信加载loading()\r\n--对话框消失：dl.dismiss()','2019-08-14 16:01:12.880546','Lua封装函数'),('仿微信加载动态绘制','import \'android.graphics.Color\'\r\nimport \'android.graphics.RectF\'\r\nSorrowClover=\r\n{\r\nLinearLayout;--线性布局\r\nOrientation=\'vertical\';--布局方向\r\nlayout_width=\'fill\';--布局宽度\r\nlayout_height=\'fill\';--布局高度\r\nbackground=\'#ffffff\';--布局背景颜色(或图片路径)\r\ngravity=\'center\';\r\n{\r\nLinearLayout;--线性布局\r\nlayout_width=\'100dp\';--布局宽度\r\nlayout_height=\'100dp\';--布局高度\r\nid=\'dra\';\r\n};\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\nfunction 绘制(角度)\r\ndra.setBackgroundDrawable(LuaDrawable(function(canvs,paint,draw)\r\n  paint.setAntiAlias(true)\r\n  paint.setColor(Color.BLUE)\r\n  canvs.drawArc(RectF(10,10,100,100),180,角度,true,paint)\r\n  draw.invalidateSelf()\r\nend))\r\nend\r\n\r\nfor i=0,360 do\r\n  task(10,function()\r\n    绘制(i)\r\n  end)\r\nend','2019-08-14 11:17:02.026147','自绘制教程'),('仿花瓣网书籍app界面实战','SorrowClover=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#000000\';--布局背景颜色(或图片路径)\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'horizontal\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'200dp\';--布局高度\r\n    {\r\n      CardView;--卡片控件\r\n      layout_marginLeft=\'10%w\';--卡片边距\r\n      layout_gravity=\'left|center\';--子控件在父布局中的对齐方式\r\n      CardElevation=\'3\';--卡片阴影\r\n      layout_width=\'30%w\';--卡片宽度\r\n      layout_height=\'130dp\';--卡片高度\r\n      radius=\'20\';--卡片圆角\r\n      CardBackgroundColor=\'#EE7785\';--卡片背景颜色\r\n      {\r\n        ImageView;--图片控件\r\n        src=\'drawable/usertxs.png\';--图片路径\r\n        layout_width=\'fill\';--图片宽度\r\n        layout_height=\'fill\';--图片高度\r\n        layout_gravity=\'center\';--对齐方式\r\n        scaleType=\'fitXY\';--图片缩放类型\r\n      };\r\n    };\r\n    {\r\n      LinearLayout;--线性布局\r\n      layout_marginLeft=\'5%w\',\r\n      Orientation=\'vertical\';--布局方向\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      gravity=\'left|center\',\r\n      {\r\n        TextView;--文本控件\r\n        layout_width=\'wrap\';--文本宽度\r\n        layout_height=\'wrap\';--文本高度\r\n        textColor=\'#ffffff\';--文本颜色\r\n        text=\'小何你吃嘛\';--显示的文本\r\n        textSize=\'20sp\';--文本大小\r\n      };\r\n      {\r\n        TextView;--文本控件\r\n        layout_marginTop=\"5%w\",\r\n        layout_width=\'wrap\';--文本宽度\r\n        layout_height=\'wrap\';--文本高度\r\n        textColor=\'#ffffff\';--文本颜色\r\n        text=\'一个超级懒的人\';--显示的文本\r\n        textSize=\'12sp\';--文本大小\r\n      };\r\n    };\r\n  };\r\n  {\r\n    FrameLayout;--帧布局\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    {\r\n      LinearLayout;--线性布局\r\n      Orientation=\'vertical\';--布局方向\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      {\r\n        CardView;--卡片控件\r\n        layout_width=\'fill\';--卡片宽度\r\n        layout_height=\'fill\';--卡片高度\r\n        radius=\'100\';--卡片圆角\r\n        CardBackgroundColor=\'#6AAFE6\';--卡片背景颜色\r\n        {\r\n          LinearLayout;--线性布局\r\n          Orientation=\'vertical\';--布局方向\r\n          layout_width=\'fill\';--布局宽度\r\n          layout_height=\'fill\';--布局高度\r\n          {\r\n            LinearLayout;--线性布局\r\n            Orientation=\'vertical\';--布局方向\r\n            layout_width=\'fill\';--布局宽度\r\n            layout_height=\'100dp\';--布局高度\r\n            {\r\n              TextView;--文本控件\r\n              layout_width=\'fill\';--文本宽度\r\n              paddingLeft=\'10%w\';--布局内边左距\r\n              layout_height=\'fill\';--文本高度\r\n              Gravity=\'left|center\';--对齐方式\r\n              textColor=\'#ffffff\';--文本颜色\r\n              text=\'Reading\';--显示的文本\r\n              textSize=\'30sp\';--文本大小\r\n            };\r\n          };\r\n        };\r\n      };\r\n    };\r\n    {\r\n      LinearLayout;--线性布局\r\n      layout_marginTop=\'100dp\';--布局外边顶距\r\n      Orientation=\'vertical\';--布局方向\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      {\r\n        CardView;--卡片控件\r\n        layout_width=\'fill\';--卡片宽度\r\n        layout_height=\'fill\';--卡片高度\r\n        radius=\'130\';--卡片圆角\r\n        CardBackgroundColor=\'#ffffff\';--卡片背景颜色\r\n        {\r\n          LinearLayout;--线性布局\r\n          Orientation=\'vertical\';--布局方向\r\n          layout_width=\'fill\';--布局宽度\r\n          layout_height=\'fill\';--布局高度\r\n          {\r\n            LinearLayout;--线性布局\r\n            Orientation=\'vertical\';--布局方向\r\n            layout_width=\'fill\';--布局宽度\r\n            layout_height=\'100dp\';--布局高度\r\n            {\r\n              TextView;--文本控件\r\n              layout_width=\'fill\';--文本宽度\r\n              paddingLeft=\'10%w\';--布局内边左距\r\n              layout_height=\'fill\';--文本高度\r\n              Gravity=\'left|center\';--对齐方式\r\n              textColor=\'#000000\';--文本颜色\r\n              text=\'All Books\';--显示的文本\r\n              textSize=\'30sp\';--文本大小\r\n            };\r\n          };\r\n          {\r\n            ScrollView;--竖向滚动\r\n            layout_width=\'90%w\';--布局宽度\r\n            layout_gravity=\'center\';--子控件在父控件中的对齐方式\r\n            layout_height=\'fill\';--布局高度\r\n            VerticalScrollBarEnabled=false;--隐藏竖向滑条\r\n            {\r\n              LinearLayout;--线性布局\r\n              Orientation=\'vertical\';--布局方向\r\n              layout_width=\'fill\';--布局宽度\r\n              layout_height=\'fill\';--布局高度\r\n              {\r\n                LinearLayout;--线性布局\r\n                Orientation=\'horizontal\';--布局方向\r\n                layout_width=\'fill\';--布局宽度\r\n                layout_height=\'250dp\';--布局高度\r\n                {\r\n                  LinearLayout;--线性布局\r\n                  Orientation=\'vertical\';--布局方向\r\n                  layout_weight=\"1\",\r\n                  layout_height=\'fill\';--布局高度\r\n                  {\r\n                    CardView;--卡片控件\r\n                    layout_gravity=\'center\';--子控件在父布局中的对齐方式\r\n                    CardElevation=\'3\';--卡片阴影\r\n                    layout_width=\'28%w\';--卡片宽度\r\n                    layout_height=\'180dp\';--卡片高度\r\n                    radius=\'20\';--卡片圆角\r\n                    CardBackgroundColor=\'#30A9DE\';--卡片背景颜色\r\n                  };\r\n                  {\r\n                    TextView;--文本控件\r\n                    layout_width=\'fill\';--文本宽度\r\n                    layout_height=\'fill\';--文本高度\r\n                    Gravity=\'center\';--对齐方式\r\n                    textColor=\'#6E7783\';--文本颜色\r\n                    text=\'Book\';--显示的文本\r\n                    textSize=\'20sp\';--文本大小\r\n                  };\r\n                };\r\n                {\r\n                  LinearLayout;--线性布局\r\n                  Orientation=\'vertical\';--布局方向\r\n                  layout_weight=\"1\",\r\n                  layout_height=\'fill\';--布局高度\r\n                  {\r\n                    CardView;--卡片控件\r\n                    layout_gravity=\'center\';--子控件在父布局中的对齐方式\r\n                    CardElevation=\'3\';--卡片阴影\r\n                    layout_width=\'28%w\';--卡片宽度\r\n                    layout_height=\'180dp\';--卡片高度\r\n                    radius=\'20\';--卡片圆角\r\n                    CardBackgroundColor=\'#30A9DE\';--卡片背景颜色\r\n                  };\r\n                  {\r\n                    TextView;--文本控件\r\n                    layout_width=\'fill\';--文本宽度\r\n                    layout_height=\'fill\';--文本高度\r\n                    Gravity=\'center\';--对齐方式\r\n                    textColor=\'#6E7783\';--文本颜色\r\n                    text=\'Book\';--显示的文本\r\n                    textSize=\'20sp\';--文本大小\r\n                  };\r\n                };\r\n                {\r\n                  LinearLayout;--线性布局\r\n                  Orientation=\'vertical\';--布局方向\r\n                  layout_weight=\"1\",\r\n                  layout_height=\'fill\';--布局高度\r\n                  {\r\n                    CardView;--卡片控件\r\n                    layout_gravity=\'center\';--子控件在父布局中的对齐方式\r\n                    CardElevation=\'3\';--卡片阴影\r\n                    layout_width=\'28%w\';--卡片宽度\r\n                    layout_height=\'180dp\';--卡片高度\r\n                    radius=\'20\';--卡片圆角\r\n                    CardBackgroundColor=\'#30A9DE\';--卡片背景颜色\r\n                  };\r\n                  {\r\n                    TextView;--文本控件\r\n                    layout_width=\'fill\';--文本宽度\r\n                    layout_height=\'fill\';--文本高度\r\n                    Gravity=\'center\';--对齐方式\r\n                    textColor=\'#6E7783\';--文本颜色\r\n                    text=\'Book\';--显示的文本\r\n                    textSize=\'20sp\';--文本大小\r\n                  };\r\n                };\r\n              };\r\n              {\r\n                LinearLayout;--线性布局\r\n                Orientation=\'horizontal\';--布局方向\r\n                layout_width=\'fill\';--布局宽度\r\n                layout_height=\'250dp\';--布局高度\r\n                {\r\n                  LinearLayout;--线性布局\r\n                  Orientation=\'vertical\';--布局方向\r\n                  layout_weight=\"1\",\r\n                  layout_height=\'fill\';--布局高度\r\n                  {\r\n                    CardView;--卡片控件\r\n                    layout_gravity=\'center\';--子控件在父布局中的对齐方式\r\n                    CardElevation=\'3\';--卡片阴影\r\n                    layout_width=\'28%w\';--卡片宽度\r\n                    layout_height=\'180dp\';--卡片高度\r\n                    radius=\'20\';--卡片圆角\r\n                    CardBackgroundColor=\'#30A9DE\';--卡片背景颜色\r\n                  };\r\n                  {\r\n                    TextView;--文本控件\r\n                    layout_width=\'fill\';--文本宽度\r\n                    layout_height=\'fill\';--文本高度\r\n                    Gravity=\'center\';--对齐方式\r\n                    textColor=\'#6E7783\';--文本颜色\r\n                    text=\'Book\';--显示的文本\r\n                    textSize=\'20sp\';--文本大小\r\n                  };\r\n                };\r\n                {\r\n                  LinearLayout;--线性布局\r\n                  Orientation=\'vertical\';--布局方向\r\n                  layout_weight=\"1\",\r\n                  layout_height=\'fill\';--布局高度\r\n                  {\r\n                    CardView;--卡片控件\r\n                    layout_gravity=\'center\';--子控件在父布局中的对齐方式\r\n                    CardElevation=\'3\';--卡片阴影\r\n                    layout_width=\'28%w\';--卡片宽度\r\n                    layout_height=\'180dp\';--卡片高度\r\n                    radius=\'20\';--卡片圆角\r\n                    CardBackgroundColor=\'#30A9DE\';--卡片背景颜色\r\n                  };\r\n                  {\r\n                    TextView;--文本控件\r\n                    layout_width=\'fill\';--文本宽度\r\n                    layout_height=\'fill\';--文本高度\r\n                    Gravity=\'center\';--对齐方式\r\n                    textColor=\'#6E7783\';--文本颜色\r\n                    text=\'Book\';--显示的文本\r\n                    textSize=\'20sp\';--文本大小\r\n                  };\r\n                };\r\n                {\r\n                  LinearLayout;--线性布局\r\n                  Orientation=\'vertical\';--布局方向\r\n                  layout_weight=\"1\",\r\n                  layout_height=\'fill\';--布局高度\r\n                  {\r\n                    CardView;--卡片控件\r\n                    layout_gravity=\'center\';--子控件在父布局中的对齐方式\r\n                    CardElevation=\'3\';--卡片阴影\r\n                    layout_width=\'28%w\';--卡片宽度\r\n                    layout_height=\'180dp\';--卡片高度\r\n                    radius=\'20\';--卡片圆角\r\n                    CardBackgroundColor=\'#30A9DE\';--卡片背景颜色\r\n                  };\r\n                  {\r\n                    TextView;--文本控件\r\n                    layout_width=\'fill\';--文本宽度\r\n                    layout_height=\'fill\';--文本高度\r\n                    Gravity=\'center\';--对齐方式\r\n                    textColor=\'#6E7783\';--文本颜色\r\n                    text=\'Book\';--显示的文本\r\n                    textSize=\'20sp\';--文本大小\r\n                  };\r\n                };\r\n              };\r\n            };\r\n          };\r\n        };\r\n      };\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))','2019-07-04 13:14:46.587793','布局实战'),('卡片式登陆界面实战','--创建布局\r\nshamrock=\r\n--布局框架\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  {\r\n    --登录总界面\r\n    CardView;--卡片控件\r\n    layout_margin=\"5%w\";--设置边距\r\n    layout_gravity=\'center\';--重力属性\r\n    Elevation=\'5\';--阴影属性\r\n    layout_width=\'fill\';--卡片宽度\r\n    layout_height=\'fill\';--卡片高度\r\n    radius=\'30\';--卡片圆角\r\n    CardBackgroundColor=\'#ffffff\';--卡片背景颜色\r\n    {\r\n      --登陆总布局\r\n      LinearLayout;--线性布局\r\n      Orientation=\'vertical\';--布局方向\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      {\r\n        --上半部分布局\r\n        LinearLayout;--线性布局\r\n        Orientation=\'vertical\';--布局方向\r\n        layout_width=\'fill\';--布局宽度\r\n        layout_weight=\'6\';--布局权重\r\n        background=\'#FF4FB3AE\';--布局背景颜色(或者图片路径)\r\n        Gravity=\"center\";--设置居中\r\n        {\r\n          TextView;--文本控件\r\n          layout_width=\'wrap\';--文本宽度\r\n          layout_height=\'wrap\';--文本高度\r\n          Gravity=\'center\';--重力属性\r\n          textColor=\'#ffffff\';--文本颜色\r\n          text=\'Welcome\';--显示的文本\r\n          textSize=\'50sp\';--文本大小\r\n          padding=\"5%w\";--设置内边距\r\n        };\r\n        {\r\n          TextView;--文本控件\r\n          layout_width=\'wrap\';--文本宽度\r\n          layout_height=\'wrap\';--文本高度\r\n          Gravity=\'center\';--重力属性\r\n          textColor=\'#FFDCF0EF\';--文本颜色\r\n          text=\'这是一个登陆布局实战\';--显示的文本\r\n          textSize=\'26sp\';--文本大小\r\n          padding=\"5%w\";--设置内边距\r\n        };\r\n        {\r\n          CardView;--卡片控件\r\n          layout_marginTop=\"5%w\";\r\n          layout_gravity=\'center\';--重力属性\r\n          Elevation=\'5\';--阴影属性\r\n          layout_width=\'50%w\';--卡片宽度\r\n          layout_height=\'8%w\';--卡片高度\r\n          radius=\'30\';--卡片圆角\r\n          CardBackgroundColor=\'#FF7CCCC8\';--卡片背景颜色\r\n          {\r\n            TextView;--文本控件\r\n            layout_width=\'fill\';--文本宽度\r\n            layout_height=\'fill\';--文本高度\r\n            Gravity=\'center\';--重力属性\r\n            textColor=\'#FFFEFFFF\';--文本颜色\r\n            text=\'About App →\';--显示的文本\r\n            textSize=\'16sp\';--文本大小\r\n          };\r\n        };\r\n      };\r\n      {\r\n        --下半部分布局\r\n        LinearLayout;--线性布局\r\n        Orientation=\'vertical\';--布局方向\r\n        layout_width=\'fill\';--布局宽度\r\n        layout_weight=\'4\';--布局权重\r\n        background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n        Gravity=\"center\";--设置居中\r\n        {\r\n          CardView;--卡片控件\r\n          layout_margin=\'5%w\';--卡片边距\r\n          layout_gravity=\'center\';--重力属性\r\n          Elevation=\'0\';--阴影属性\r\n          layout_width=\'fill\';--卡片宽度\r\n          layout_height=\'18%w\';--卡片高度\r\n          radius=\'20\';--卡片圆角\r\n          CardBackgroundColor=\'#FF55B9B4\';--卡片背景颜色\r\n          {\r\n            TextView;--文本控件\r\n            layout_width=\'fill\';--文本宽度\r\n            layout_height=\'fill\';--文本高度\r\n            Gravity=\'center\';--重力属性\r\n            textColor=\'#ffffff\';--文本颜色\r\n            text=\'登陆\';--显示的文本\r\n            textSize=\'22sp\';--文本大小\r\n          };\r\n        };\r\n        {\r\n          LinearLayout;--线性布局\r\n          Orientation=\'horizontal\';--布局方向\r\n          layout_width=\'fill\';--布局宽度\r\n          layout_height=\'wrap\';--布局高度\r\n          background=\'\';--布局背景颜色(或者图片路径)\r\n          {\r\n            CardView;--卡片控件\r\n            layout_margin=\'5%w\';--卡片边距\r\n            Elevation=\'0\';--阴影属性\r\n            layout_weight=\'1\';--卡片权重\r\n            layout_height=\'18%w\';--卡片高度\r\n            radius=\'20\';--卡片圆角\r\n            CardBackgroundColor=\'#FFD0D0D0\';--卡片背景颜色\r\n            {\r\n              CardView;--卡片控件\r\n              layout_margin=\'3\';--卡片边距\r\n              layout_gravity=\'center\';--重力属性\r\n              Elevation=\'0\';--阴影属性\r\n              layout_width=\'fill\';--卡片宽度\r\n              layout_height=\'fill\';--卡片高度\r\n              radius=\'20\';--卡片圆角\r\n              CardBackgroundColor=\'#ffffff\';--卡片背景颜色\r\n              {\r\n                TextView;--文本控件\r\n                layout_width=\'fill\';--文本宽度\r\n                layout_height=\'fill\';--文本高度\r\n                Gravity=\'center\';--重力属性\r\n                textColor=\'#FF5F5F5F\';--文本颜色\r\n                text=\'注册\';--显示的文本\r\n                textSize=\'22sp\';--文本大小\r\n              };\r\n            };\r\n          };\r\n          {\r\n            CardView;--卡片控件\r\n            layout_margin=\'5%w\';--卡片边距\r\n            layout_marginLeft=\"0\";\r\n            Elevation=\'0\';--阴影属性\r\n            layout_weight=\'1\';--卡片权重\r\n            layout_height=\'18%w\';--卡片高度\r\n            radius=\'20\';--卡片圆角\r\n            CardBackgroundColor=\'#FFD0D0D0\';--卡片背景颜色\r\n            {\r\n              CardView;--卡片控件\r\n              layout_margin=\'3\';--卡片边距\r\n              layout_gravity=\'center\';--重力属性\r\n              Elevation=\'0\';--阴影属性\r\n              layout_width=\'fill\';--卡片宽度\r\n              layout_height=\'fill\';--卡片高度\r\n              radius=\'20\';--卡片圆角\r\n              CardBackgroundColor=\'#ffffff\';--卡片背景颜色\r\n              {\r\n                TextView;--文本控件\r\n                layout_width=\'fill\';--文本宽度\r\n                layout_height=\'fill\';--文本高度\r\n                Gravity=\'center\';--重力属性\r\n                textColor=\'#FF5F5F5F\';--文本颜色\r\n                text=\'协议\';--显示的文本\r\n                textSize=\'22sp\';--文本大小\r\n              };\r\n            };\r\n          };\r\n        };\r\n      };\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加窗口','2019-06-21 16:41:27.501556','布局实战'),('布局教程概述','这篇教程估计是最繁琐的，也是最多材料的\r\n我将去安卓的官网对照api来进行布局教学\r\n尽可能的将布局的属性全部列出\r\n每次的教程也会有相应的简单实例\r\n尽可能的注释讲解\r\n当然，如果有不对之处，欢迎指出。\r\n让我们共同进步吧。\r\n\r\n布局尺寸单位\r\n变量名  常量\r\npx  0\r\ndp  1\r\nsp  2\r\npt  3\r\nin  4\r\nmm  5\r\n还有百分比：\r\n%w  宽度百分比\r\n%h  高度百分比','2019-06-18 06:36:35.365730','布局教程'),('帧布局艺术背景实战','SorrowClover=\r\n{\r\n  FrameLayout;--帧布局\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#A593E0\';--布局背景颜色(或图片路径)\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    {\r\n      CardView;--卡片控件\r\n      layout_marginTop=\'50dp\';--布局外边顶距\r\n      layout_marginLeft=\'-200dp\';--布局外边左距\r\n      layout_gravity=\'center\';--子控件在父布局中的对齐方式\r\n      CardElevation=\'8dp\';--卡片阴影\r\n      layout_width=\'300dp\';--卡片宽度\r\n      layout_height=\'400dp\';--卡片高度\r\n      radius=\'12dp\';--卡片圆角\r\n      CardBackgroundColor=\'#ffffff\';--卡片背景颜色\r\n      Rotation=\"-45\";\r\n    };\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    {\r\n      CardView;--卡片控件\r\n      layout_marginTop=\'40dp\';--布局外边顶距\r\n      layout_gravity=\'center\';--子控件在父布局中的对齐方式\r\n      CardElevation=\'8dp\';--卡片阴影\r\n      layout_width=\'300dp\';--卡片宽度\r\n      layout_height=\'1000dp\';--卡片高度\r\n      radius=\'12dp\';--卡片圆角\r\n      CardBackgroundColor=\'#8CD790\';--卡片背景颜色\r\n      Rotation=\"45\";\r\n    };\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    padding=\'16dp\';--布局内边距\r\n    {\r\n      TextClock;--时间文本\r\n      layout_width=\'wrap\';--文本宽度\r\n      layout_height=\'wrap\';--文本高度\r\n      textColor=\'#000000\';--文本颜色\r\n      textSize=\'32sp\';--文本大小\r\n    };\r\n    {\r\n      TextView;--文本控件\r\n      layout_width=\'wrap\';--文本宽度\r\n      layout_height=\'wrap\';--文本高度\r\n      Gravity=\'left\';--对齐方式\r\n      textColor=\'#000000\';--文本颜色\r\n      text=[==[这是一个帧布局\r\n瞎拼凑的背景]==];--显示的文本\r\n      textSize=\'48sp\';--文本大小\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))','2019-07-28 16:49:44.285804','布局实战'),('异步GET请求','--需导入的DEX请自行将运行助手拆包，在libs文件夹里\r\n--异步GET请求，除注释外都是固定模板，复制粘贴即可\r\nimport \'com.kn.okhttp.*\'\r\nimport \'okhttp3.*\'\r\nurl = \'http://dh.hfybbs.vip\'--请求URL\r\nokHttpClient = OkHttpClient()\r\nrequest = Request.Builder()\r\n.url(url)\r\n.get()\r\n.build()\r\ncall = okHttpClient.newCall(request)\r\ncall.enqueue(Callback{\r\n  onFailure = function(call,e)--请求失败\r\n    print(e)\r\n  end,\r\n\r\n  onResponse = function(call,response)--请求成功\r\n    print(response.body().string())\r\n  end\r\n  })','2019-08-18 03:47:40.579296','OkHttp教程'),('循环布局测试','shamrock=\r\n--布局请写在这里\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  {\r\n    ScrollView;--纵向滚动\r\n    layout_width=\'fill\';--宽\r\n    layout_height=\'fill\';--高\r\n    --隐藏竖向滚动滑条\r\n    VerticalScrollBarEnabled=false;\r\n    {\r\n      LinearLayout;--线性布局\r\n      Orientation=\'vertical\';--布局方向\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      id=\"list\",\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))\r\n\r\nfunction 添加布局(i)\r\n  布局={\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'100dp\';--布局高度\r\n    Gravity=\"center\",\r\n    {\r\n      CardView;--卡片控件\r\n      Elevation=\'3\';--阴影属性\r\n      layout_width=\'80%w\';--卡片宽度\r\n      layout_height=\'80dp\';--卡片高度\r\n      radius=\'20\';--卡片圆角\r\n      CardBackgroundColor=\'#ff7e5cf8\';--卡片背景颜色\r\n      onClick=function()\r\n        print(i)\r\n      end\r\n    };\r\n  };\r\n  return 布局\r\nend\r\n\r\nfor i=1,10 do\r\n  布局=添加布局(i)\r\n  list.addView(loadlayout(布局))\r\nend','2019-06-25 16:56:35.212894','小何研究笔记'),('抓取ajax数据实战','--首先创建一个布局，为教程提供良好的可视化\r\n--导入cjson包\r\nimport\'cjson\'\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  {\r\n    ScrollView;--纵向滚动\r\n    layout_width=\'fill\';--宽\r\n    layout_height=\'fill\';--高\r\n    {\r\n      LinearLayout;--线性布局\r\n      Orientation=\'vertical\';--布局方向\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      background=\'\';--布局背景颜色(或者图片路径)\r\n      gravity=\'center\';--设置居中\r\n      {\r\n        TextView;--文本控件\r\n        id=\'文本\';--绑定ID\r\n        layout_margin=\'5%w\';--布局外边距\r\n        layout_width=\'wrap\';--文本宽度\r\n        layout_height=\'wrap\';--文本高度\r\n        Gravity=\'center\';--重力属性\r\n        textColor=\'#000000\';--文本颜色\r\n        text=\'爬取内容中\';--显示的文本\r\n        textSize=\'18sp\';--文本大小\r\n      };\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口\r\n--设置需要爬取的网站，可以随意更换\r\n--这个链接是百度热搜的接口\r\nurl = \'https://www.anyknew.com/api/v1/sites/baidu\'\r\n\r\n--使用Http访问该网站，获取网页源码\r\nHttp.get(url,nil,\'utf8\',nil,function(状态码,网页源码)\r\n  --判断返回状态码，确定网站的正常运行\r\n  if 状态码 ==200 then\r\n    --使用cjson库将获取到的json数据table化\r\n    数据 = cjson.decode(网页源码)\r\n    --取出需要的数据\r\n    数据列表 = 数据.data.site.subs[1].items\r\n    --定义一个空文本用于显示数据\r\n    标题 = \'\'\r\n    --遍历爬取到的数据\r\n    for k,v in pairs(数据列表) do\r\n      --将数据逐个取出，累加进字符串进行显示\r\n      标题 =标题.. string.format(\'标题%d：%s\',k,v.title)..\'\\n\'\r\n    end\r\n    --设置文本显示，显示爬取效果\r\n    文本.setText(标题)\r\n   else\r\n    文本.setText(\'获取内容失败\')\r\n  end\r\nend)','2019-06-14 04:51:50.690036','String爬虫教程'),('本篇声明','这里我将放置一些我写的封装函数库，比如加载动画对话框之类的，供大家丰富自己的软件并学习。\r\n如果可以，请声明小何的版权所有。','2019-08-14 16:00:16.619388','Lua封装函数'),('水波纹动画对话框','function 水波纹动画对话框()\r\n  import \'android.graphics.drawable.ShapeDrawable\'\r\n  import \'android.graphics.drawable.shapes.RoundRectShape\'\r\n  import \'android.graphics.Color\'\r\n  import \'android.graphics.Paint\'\r\n  dialog_layout={\r\n    LinearLayout;--线性布局\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n    gravity=\'center\';\r\n    {\r\n      LinearLayout;--线性布局\r\n      id=\'dialog_anime\';\r\n      layout_width=\'300\';--布局宽度\r\n      layout_height=\'300\';--布局高度\r\n    };\r\n  };\r\n  dl = LuaDialog(this)\r\n  dl.setCancelable(true)\r\n  dl.setView(loadlayout(dialog_layout))\r\n  dl.getWindow().setBackgroundDrawable(ShapeDrawable(RoundRectShape({12,12,12,12,12,12,12,12},nil,nil)))\r\n  dl.show()\r\n\r\n  function 绘制(i)\r\n    dialog_anime.setBackgroundDrawable(LuaDrawable(function(canvas,paint,draw)\r\n      paint.setColor(Color.BLUE)\r\n      paint.setStyle(Paint.Style.STROKE)\r\n      paint.setStrokeWidth(5)\r\n      canvas.drawCircle(150,150,i,paint)\r\n    end))\r\n  end\r\n\r\n  i=0\r\n  ti=Ticker()\r\n  ti.Period=20\r\n  ti.onTick=function()\r\n    --事件\r\n    绘制(i)\r\n    i=i+1\r\n    if(i==50) then\r\n      i=0\r\n    end\r\n  end\r\n  --启动Ticker定时器\r\n  ti.start()\r\n\r\n  dl.onDismiss=function()\r\n    ti.stop()\r\n  end\r\n\r\n  return dl\r\nend\r\ndl=水波纹动画对话框()\r\n--dl.dismiss()关闭对话框','2019-08-15 07:19:57.509989','Lua封装函数'),('波浪球简易分类布局实战','import\'com.yuxuan.widget.*\'\r\n\r\nSorrowClover=\r\n--布局请写在这里\r\n--设置窗口视图\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n  {\r\n    CardView;--卡片控件\r\n    CardElevation=\'6\';--卡片阴影\r\n    layout_width=\'fill\';--卡片宽度\r\n    layout_height=\'300dp\';--卡片高度\r\n    CardBackgroundColor=\'#ffffff\';--卡片背景颜色\r\n    {\r\n      WaveView;\r\n      layout_height=\"150dp\",\r\n      layout_width=\"fill\",\r\n      id=\"wave\",\r\n    };\r\n    {\r\n      LinearLayout;--线性布局\r\n      Orientation=\'horizontal\';--布局方向\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      Gravity=\"bottom\";\r\n      {\r\n        LinearLayout;--线性布局\r\n        Orientation=\'vertical\';--布局方向\r\n        layout_weight=\'1\';--权重值\r\n        layout_height=\'150dp\';--布局高度\r\n        Gravity=\"center\";\r\n        {\r\n          CardView;--卡片控件\r\n          layout_gravity=\'center\';--子控件在父布局中的对齐方式\r\n          CardElevation=\'0\';--卡片阴影\r\n          layout_width=\'60dp\';--卡片宽度\r\n          layout_height=\'60dp\';--卡片高度\r\n          radius=\'30dp\';--卡片圆角\r\n          CardBackgroundColor=\'#FFDDA767\';--卡片背景颜色\r\n        };\r\n      };\r\n      {\r\n        LinearLayout;--线性布局\r\n        Orientation=\'vertical\';--布局方向\r\n        layout_weight=\'1\';--权重值\r\n        layout_height=\'150dp\';--布局高度\r\n        Gravity=\"center\";\r\n        {\r\n          CardView;--卡片控件\r\n          layout_gravity=\'center\';--子控件在父布局中的对齐方式\r\n          CardElevation=\'0\';--卡片阴影\r\n          layout_width=\'60dp\';--卡片宽度\r\n          layout_height=\'60dp\';--卡片高度\r\n          radius=\'30dp\';--卡片圆角\r\n          CardBackgroundColor=\'#FFDDA767\';--卡片背景颜色\r\n        };\r\n      };\r\n      {\r\n        LinearLayout;--线性布局\r\n        Orientation=\'vertical\';--布局方向\r\n        layout_weight=\'1\';--权重值\r\n        layout_height=\'150dp\';--布局高度\r\n        Gravity=\"center\";\r\n        {\r\n          CardView;--卡片控件\r\n          layout_gravity=\'center\';--子控件在父布局中的对齐方式\r\n          CardElevation=\'0\';--卡片阴影\r\n          layout_width=\'60dp\';--卡片宽度\r\n          layout_height=\'60dp\';--卡片高度\r\n          radius=\'30dp\';--卡片圆角\r\n          CardBackgroundColor=\'#FFDDA767\';--卡片背景颜色\r\n        };\r\n      };\r\n      {\r\n        LinearLayout;--线性布局\r\n        Orientation=\'vertical\';--布局方向\r\n        layout_weight=\'1\';--权重值\r\n        layout_height=\'150dp\';--布局高度\r\n        Gravity=\"center\";\r\n        {\r\n          CardView;--卡片控件\r\n          layout_gravity=\'center\';--子控件在父布局中的对齐方式\r\n          CardElevation=\'0\';--卡片阴影\r\n          layout_width=\'60dp\';--卡片宽度\r\n          layout_height=\'60dp\';--卡片高度\r\n          radius=\'30dp\';--卡片圆角\r\n          CardBackgroundColor=\'#FFDDA767\';--卡片背景颜色\r\n        };\r\n      };\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\nwave.setStartColor(0xffffffff)\r\nwave.setCloseColor(0xFFDDA767)\r\nwave.setWaveHeight(50)\r\nwave.setVelocity(3)','2019-07-24 03:03:43.580176','布局实战'),('爬取Fusion Club论坛实战','--创建一个布局，为教程提供良好的可视化\r\n--做一个爬虫，前期的分析网页工作需要做好\r\n--明确目标，明白只需要哪些数据，以及如何处理数据\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  {\r\n    ScrollView;--纵向滚动\r\n    layout_width=\'fill\';--宽\r\n    layout_height=\'fill\';--高\r\n    {\r\n      TextView;--文本控件\r\n      id=\'显示文本\';--绑定ID\r\n      layout_width=\'fill\';--文本宽度\r\n      layout_height=\'fill\';--文本高度\r\n      Gravity=\'center\';--重力属性\r\n      textColor=\'#000000\';--文本颜色\r\n      text=\'爬取中...\';--显示的文本\r\n      textSize=\'16sp\';--文本大小\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口\r\n\r\nurl=\"https://yum5.cn\"--论坛网址\r\n--HTTP请求网页源码\r\nHttp.get(url,nil,\'utf8\',nil,function(状态码,网页源码)\r\n  --判断网站的访问情况\r\n  if 状态码 == 200 then\r\n    --获取到帖子标题数据\r\n    帖子标题迭代器 = 网页源码:gmatch(\'<a href=\"thread.-htm\">(.-)</a>\')\r\n    --创建帖子标题表\r\n    帖子标题 = {}\r\n    --遍历帖子标题数据，将数据存入表\r\n    for i in 帖子标题迭代器 do\r\n      table.insert(帖子标题,i)\r\n    end\r\n    --获取帖子链接数据\r\n    帖子链接迭代器 = 网页源码:gmatch(\'<a href=\"(thread.-htm)\">.-</a>\')\r\n    --创建帖子链接表\r\n    帖子链接 = {}\r\n    --遍历帖子链接数据，将其存入表\r\n    for i in 帖子链接迭代器 do\r\n      table.insert(帖子链接,i)\r\n    end\r\n    --定义一个空字符串，后面将数据展示到布局\r\n    爬取内容 = \'\'\r\n    --遍历所有数据\r\n    for i=1,#帖子标题 do\r\n      --累加字符串，使显示效果良好\r\n      爬取内容 = 爬取内容..string.format(\'帖子标题：%s\\n帖子链接：https://yum5.cn/%s\\n\',帖子标题[i],帖子链接[i])\r\n    end\r\n    --将数据显示\r\n    显示文本.setText(爬取内容)\r\n   else\r\n    显示文本.setText(\'网站无法访问\')\r\n  end\r\nend)','2019-06-16 02:21:06.857835','String爬虫教程'),('爬取ip与地理位置实战','--创建布局，显示爬取效果\r\nshamrock=\r\n--布局请写在这里\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  Gravity=\"center\";--设置居中\r\n  {\r\n    TextView;--文本控件\r\n    id=\"显示文本\";--绑定id\r\n    layout_width=\'wrap\';--文本宽度\r\n    layout_height=\'wrap\';--文本高度\r\n    Gravity=\'center\';--重力属性\r\n    textColor=\'#000000\';--文本颜色\r\n    text=\'正在查询中\';--显示的文本\r\n    textSize=\'16sp\';--文本大小\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口\r\nurl=\"https://ip.cn/\"--设置爬取链接\r\n--设置爬取请求头\r\nheader={\r\n  [\"User-Agent\"]= \"Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1\",\r\n}\r\n--请求网页源码\r\nHttp.get(url,nil,\"utf8\",header,function(状态码,网页源码)\r\n  --判断网站状态\r\n  if 状态码==200 then\r\n    --根据网页，分析出筛选规则\r\n    ip地址=网页源码:match(\'您现在的 IP：<code>(.-)</code>\')\r\n    地理位置=网页源码:match(\'所在地理位置：<code>(.-)</code>\')\r\n    --设置文本进行显示\r\n    文本=string.format(\"您现在的 IP：%s\\n您所在地理位置：%s\",ip地址,地理位置)\r\n    显示文本.setText(文本)\r\n   else\r\n    显示文本.setText(\"网站无法访问\")\r\n  end\r\nend)','2019-06-19 12:16:43.899809','String爬虫教程'),('爬取必应壁纸实战','--创建布局，用于显示爬取的图片\r\n--由于考虑到学习成本的问题，所以我没有用适配器写图片展示\r\n--用了较简单的循环添加布局\r\n--提示:图片爬虫显示较吃性能，所以本教程可能导致程序闪退。\r\n--由于网站和循环布局原因，所以爬取会比较慢，请耐心等待。\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  {\r\n    ScrollView;--纵向滚动\r\n    layout_width=\'fill\';--宽\r\n    layout_height=\'fill\';--高\r\n    {\r\n      LinearLayout;--线性布局\r\n      id=\"壁纸\";--绑定ID\r\n      Orientation=\'vertical\';--布局方向\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      background=\'\';--布局背景颜色(或者图片路径)\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口\r\n--创建等待窗口提示\r\ndialog3 = ProgressDialog.show(this, \"提示\", \"正在爬取中\",false, false)\r\n--将等待窗口美化(设置圆角)\r\nimport \"android.graphics.drawable.GradientDrawable\"\r\nlocal radiu=25\r\ndialog3.getWindow().setBackgroundDrawable(GradientDrawable().setCornerRadii({radiu,radiu,radiu,radiu,radiu,radiu,radiu,radiu}).setColor(0xffffffff))\r\n--定义爬取链接\r\nurl=\"https://bing.ioliu.cn/\"\r\n--Http请求源码\r\nHttp.get(url,nil,\"utf8\",nil,function(状态码,网页源码)\r\n  --等待窗口隐藏\r\n  dialog3.hide()\r\n  --判断状态码，确认网站可访问\r\n  if 状态码==200 then\r\n    --筛选图片链接数据\r\n    图片链接迭代器=网页源码:gmatch(\'src=\"(https://h1.ioliu.cn/bing/.-jpg)\"\')\r\n    --创建图片链接表，用于存储抓取到的图片链接\r\n    图片链接={}\r\n    --迭代抓取到的图片链接\r\n    for i in 图片链接迭代器 do\r\n      --将图片链接存入表中\r\n      table.insert(图片链接,i)\r\n    end\r\n  --遍历图片链接表\r\n    for k,v in pairs(图片链接) do\r\n      --创建布局，用于显示每一张图片\r\n      单张壁纸={\r\n        LinearLayout;--线性布局\r\n        Orientation=\'vertical\';--布局方向\r\n        layout_width=\'fill\';--布局宽度\r\n        layout_height=\'50%w\';--布局高度\r\n        background=\'\';--布局背景颜色(或者图片路径)\r\n        Gravity=\"center\";\r\n        {\r\n          CardView;--卡片控件\r\n          layout_margin=\'10\';--卡片边距\r\n          layout_gravity=\'center\';--重力属性\r\n          Elevation=\'0\';--阴影属性\r\n          layout_width=\'fill\';--卡片宽度\r\n          layout_height=\'fill\';--卡片高度\r\n          radius=\'20\';--卡片圆角\r\n          CardBackgroundColor=\'\';--卡片背景颜色\r\n          {\r\n            ImageView;--图片控件\r\n            id=\"图片\";\r\n            src=\"\";--图片路径\r\n            layout_width=\'fill\';--图片宽度\r\n            layout_height=\'fill\';--图片高度\r\n            layout_gravity=\'center\';--重力属性\r\n          };\r\n        };\r\n      };\r\n      --将布局添加至主布局\r\n      壁纸.addView(loadlayout(单张壁纸))\r\n      --设置在线图片显示\r\n      图片.setImageBitmap(LuaBitmap.getHttpBitmap(v))\r\n    end\r\n   else\r\n    print(\"无法访问\")\r\n  end\r\nend)','2019-06-16 18:05:03.912608','String爬虫教程'),('爬取网页分类实战','--首先创建一个布局，为教程提供良好的可视化\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    TextView;--文本控件\r\n    id=\'文本\';--绑定ID\r\n    layout_margin=\'5%w\';--布局外边距\r\n    layout_width=\'wrap\';--文本宽度\r\n    layout_height=\'wrap\';--文本高度\r\n    Gravity=\'center\';--重力属性\r\n    textColor=\'#000000\';--文本颜色\r\n    text=\'爬取内容中\';--显示的文本\r\n    textSize=\'18sp\';--文本大小\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))\r\n--设置需要爬取的网站，可以随意更换\r\nurl = \'http://dh.hfybbs.vip/cn/index.html\'\r\n\r\n--使用Http访问该网站，获取网页源码\r\nHttp.get(url,nil,\'utf8\',nil,function(状态码,网页源码)\r\n  --判断返回状态码，确定网站的正常运行\r\n  if 状态码 ==200 then\r\n    --分析网页源码，使用gmatch筛选出所有符合条件的内容，gamtch返回的是迭代器\r\n    网页框架 = 网页源码:gmatch(\'<ul.->(.-)</ul>\')\r\n    --定义一个空表，用来存储获取的网页数据\r\n    网页框架表 = {}\r\n    --将gmatch函数返回的迭代器进行遍历，取出数据，然后存进网页框架表表\r\n    for i in 网页框架 do\r\n      --判断是否可以筛选需要爬取的内容，可以才存放进网页框架表\r\n      if i:match(\'<span.->(.-)</span>\') then\r\n        table.insert(网页框架表,i:match(\'<span.->(.-)</span>\'))\r\n      end\r\n    end\r\n  --定义一个空字符串，用于显示效果\r\n  显示文本 = \'\'\r\n  --遍历表，将爬取到的数据取出\r\n  for k,v in pairs(网页框架表) do\r\n    --累加文本，将表内数据形成可视化\r\n    显示文本=显示文本..\'\\n\'..string.format(\'分类%d：%s\',k,v)\r\n  end\r\n--设置文本显示，显示爬取效果\r\n    文本.setText(显示文本)\r\n   else\r\n    文本.setText(\'获取内容失败\')\r\n  end\r\nend)','2019-06-13 11:15:11.964257','String爬虫教程'),('笔记概述','这里我将记录我根据android组件的研究笔记\r\n可能会出现一些黑科技吧（自嘲）\r\n也会记录一些我的疑难问题。','2019-06-25 11:51:34.994736','小何研究笔记'),('简单帧布局背景实战','SorrowClover=\r\n{\r\n  FrameLayout;--帧布局\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    {\r\n      LinearLayout;--线性布局\r\n      layout_width=activity.Width*2;--布局宽度\r\n      layout_weight=\'1\';--权重值\r\n      background=\'#F17F42\';--布局背景颜色(或图片路径)\r\n      RotationY=\"30\";\r\n    };\r\n    {\r\n      LinearLayout;--线性布局\r\n      layout_width=activity.Width*2;--布局宽度\r\n      layout_weight=\'1\';--权重值\r\n      background=\'#DE6449\';--布局背景颜色(或图片路径)\r\n      RotationY=\"30\";\r\n    };\r\n    {\r\n      LinearLayout;--线性布局\r\n      layout_width=activity.Width*2;--布局宽度\r\n      layout_weight=\'1\';--权重值\r\n      background=\'#333333\';--布局背景颜色(或图片路径)\r\n      RotationY=\"30\";\r\n    };\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    {\r\n      LinearLayout;--线性布局\r\n      Orientation=\'horizontal\';--布局方向\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'50dp\';--布局高度\r\n      gravity=\"left|center\";\r\n      paddingLeft=\'16dp\';--布局内边左距\r\n      {\r\n        TextView;--文本控件\r\n        layout_width=\'wrap\';--文本宽度\r\n        layout_height=\'wrap\';--文本高度\r\n        textColor=\'#ffffff\';--文本颜色\r\n        text=\'Welcome\';--显示的文本\r\n        textSize=\'32sp\';--文本大小\r\n      };\r\n    };\r\n    {\r\n      LinearLayout;--线性布局\r\n      Orientation=\'vertical\';--布局方向\r\n      layout_width=\'fill\';--布局宽度\r\n      layout_height=\'fill\';--布局高度\r\n      gravity=\"center\";\r\n      {\r\n        TextView;--文本控件\r\n        layout_width=\'wrap\';--文本宽度\r\n        layout_height=\'wrap\';--文本高度\r\n        textColor=\'#ffffff\';--文本颜色\r\n        text=\'这是一个帧布局背景实战\';--显示的文本\r\n        textSize=\'32sp\';--文本大小\r\n      };\r\n    };\r\n  };\r\n  {\r\n    CardView;--卡片控件\r\n    id=\"floatbutton\";\r\n    layout_margin=\'16dp\';--卡片边距\r\n    layout_gravity=\'bottom|right\';--子控件在父布局中的对齐方式\r\n    CardElevation=\'0\';--卡片阴影\r\n    layout_width=\'60dp\';--卡片宽度\r\n    layout_height=\'60dp\';--卡片高度\r\n    radius=\'30dp\';--卡片圆角\r\n    CardBackgroundColor=\'#F17F42\';--卡片背景颜色\r\n    {\r\n      TextView;--文本控件\r\n      layout_width=\'fill\';--文本宽度\r\n      layout_height=\'fill\';--文本高度\r\n      Gravity=\'center\';--对齐方式\r\n      textColor=\'#ffffff\';--文本颜色\r\n      text=\'onClick\';--显示的文本\r\n      textSize=\'18sp\';--文本大小\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\n\r\n--设置属性动画\r\n--对应参数分别是（id，需要改变的属性，{动画开始时需要改变的属性的值，动画结束时需要改变的属性的值}）\r\n旋转动画 = ObjectAnimator .ofFloat(floatbutton, \"rotationY\", {0, 180})\r\n旋转动画.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限\r\n旋转动画.setRepeatMode(Animation.REVERSE)--循环模式\r\n旋转动画.setDuration(2000)--动画时间\r\n旋转动画.start()--动画开始','2019-07-28 05:33:46.688742','布局实战'),('简易适配器教程','--[[\r\n适配器适用于有高度规律的列表，网格等视图。\r\n想要动态为此类控件添加项目就必须得要依靠适配器\r\n下面是AarrayAdapter(简单适配器)的用法\r\n]]\r\n--写个布局，里面有个列表控件，设置id为list\r\nSorrowClover=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n  {\r\n    ListView;--列表视图\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    DividerHeight=\'1\';--设置分隔线宽度,0表示无分隔\r\n    id=\"list\";--设置id\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))--显示布局\r\n\r\n数据={}--定义一个表，用于适配器添加至列表的数据\r\n--添加10位数进去表\r\nfor i=1,10 do\r\n  table.insert(数据,tostring(i))\r\nend\r\n--创建适配器，将表添加进适配器。那些看不懂的英文可以不用管，当成固定语法就好。以后懂了可以再去了解。\r\n适配器=ArrayAdapter(activity,android.R.layout.simple_list_item_1,数据)\r\n--为列表设置适配器\r\nlist.setAdapter(适配器)\r\n\r\n--这样最简单的适配器就完成了。可以手动更改一下添加进表的数字，看看效果。','2019-07-27 06:07:39.731755','布局教程'),('绘制三角形','import \'android.graphics.Path\'\r\nimport \'android.graphics.Paint\'\r\nSorrowClover=\r\n{\r\nLinearLayout;--线性布局\r\nlayout_width=\'fill\';--布局宽度\r\nlayout_height=\'fill\';--布局高度\r\nBackgroundDrawable=LuaDrawable(function(canvas,paint,draw)\r\n  paint.setColor(0xff333333)\r\n  paint.setStyle(Paint.Style.STROKE)\r\n  paint.setStrokeWidth(30)\r\n  path = Path()\r\n  path.moveTo(100,200)\r\n  path.lineTo(200,100)\r\n  path.lineTo(300,200)\r\n  path.close()\r\n  canvas.drawPath(path,paint)\r\nend);--布局背景颜色(或图片路径)\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))','2019-08-18 07:01:07.335727','自绘制教程'),('绘制四分之一圆实例','import \"android.graphics.RectF\"--导入依赖包\r\n--创建示例布局\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  id=\'布局画布\';--绑定id\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--显示布局\r\n布局画布.setBackground(--设置背景\r\nLuaDrawable(--设置自绘制\r\nfunction(画布,画笔)--绘制函数\r\n  画笔.setColor(0xff7e5cf8)--设置画笔\r\n  画布.drawArc(RectF(0,0,100,100),0,90,true,画笔)--画布绘制弧\r\nend))','2019-06-25 08:07:46.875457','自绘制教程'),('绘制圆实例','--创建示例布局\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  id=\'布局画布\';--绑定id\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--显示布局\r\n布局画布.setBackground(--设置背景\r\nLuaDrawable(--设置自绘制\r\nfunction(画布,画笔)--绘制函数\r\n  画笔.setColor(0xff7e5cf8)--设置画笔\r\n  画布.drawCircle(100,100,100,画笔)--画布绘制圆\r\nend))','2019-06-25 07:58:25.070138','自绘制教程'),('绘制圆角矩形实例','import \"android.graphics.RectF\"--导入依赖包\r\n--创建示例布局\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  id=\'布局画布\';--绑定id\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--显示布局\r\n布局画布.setBackground(--设置背景\r\nLuaDrawable(--设置自绘制\r\nfunction(画布,画笔)--绘制函数\r\n  画笔.setColor(0xff7e5cf8)--设置画笔\r\n  画布.drawRoundRect(RectF(10,10,210,110),15,15,画笔)--画布绘制圆角矩形\r\nend))','2019-06-25 08:09:53.544649','自绘制教程'),('绘制多边形实例','import \"android.graphics.Path\"--导入依赖包\r\n--创建示例布局\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  id=\'布局画布\';--绑定id\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--显示布局\r\n布局画布.setBackground(--设置背景\r\nLuaDrawable(--设置自绘制\r\nfunction(画布,画笔)--绘制函数\r\n  画笔.setColor(0xff7e5cf8)\r\n  path = Path()\r\n  path.moveTo(10, 10) --移动到 坐标10,10\r\n  path.lineTo(100, 50)--绘制直线\r\n  path.lineTo(200,40)--绘制直线\r\n  path.lineTo(300, 20)--绘制直线\r\n  path.lineTo(200, 10)--绘制直线\r\n  path.lineTo(100, 70)--绘制直线\r\n  path.lineTo(50, 40)--绘制直线\r\n  path.close()--闭合路径\r\n  画布.drawPath(path,画笔)--画布绘制\r\nend))','2019-06-25 08:18:10.969114','自绘制教程'),('绘制弧形实例','import \"android.graphics.RectF\"--导入依赖包\r\n--创建示例布局\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  id=\'布局画布\';--绑定id\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--显示布局\r\n布局画布.setBackground(--设置背景\r\nLuaDrawable(--设置自绘制\r\nfunction(画布,画笔)--绘制函数\r\n  画笔.setColor(0xff7e5cf8)--设置画笔\r\n  画布.drawArc(RectF(0,0,100,100),0,90,false,画笔)--画布绘制弧\r\nend))','2019-06-25 08:07:53.380486','自绘制教程'),('绘制文字教程','--创建示例布局\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  id=\'布局画布\';--绑定id\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--显示布局\r\n布局画布.setBackground(--设置背景\r\nLuaDrawable(--设置自绘制\r\nfunction(画布,画笔)--绘制函数\r\n  画笔.setColor(0xff7e5cf8)\r\n  画布.drawText(\"AndroLuaBOX Welcome\",100,100,画笔)--画布绘制\r\nend))','2019-06-25 08:27:12.693426','自绘制教程'),('绘制旋转文字实例','import \"android.graphics.Path\"--导入依赖包\r\n--创建示例布局\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  id=\'布局画布\';--绑定id\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--显示布局\r\n布局画布.setBackground(--设置背景\r\nLuaDrawable(--设置自绘制\r\nfunction(画布,画笔)--绘制函数\r\n  画笔.setColor(0xff7e5cf8)--设置画笔颜色\r\n  path = Path()--初始化路径\r\n  path.moveTo(50,50)--移动路径\r\n  path.lineTo(200, 200)--绘制直线\r\n  path.lineTo(300, 300)--绘制直线\r\n  path.lineTo(400, 400)--绘制直线\r\n  path.close()--闭合路径\r\n  画布.drawTextOnPath(\"AndroLuaBOX Welcome\", path, 50, 50,画笔)--画布绘制\r\nend))','2019-06-25 08:31:19.422427','自绘制教程'),('绘制椭圆实例','import \"android.graphics.RectF\"--导入依赖包\r\n--创建示例布局\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  id=\'布局画布\';--绑定id\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--显示布局\r\n布局画布.setBackground(--设置背景\r\nLuaDrawable(--设置自绘制\r\nfunction(画布,画笔)--绘制函数\r\n  画笔.setColor(0xff7e5cf8)--设置画笔\r\n  画布.drawOval(RectF(0,0,200,300),画笔)--画布绘制椭圆\r\nend))','2019-06-25 08:11:10.515182','自绘制教程'),('绘制矩形实例','--创建示例布局\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  id=\'布局画布\';--绑定id\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--显示布局\r\n布局画布.setBackground(--设置背景\r\nLuaDrawable(--设置自绘制\r\nfunction(画布,画笔)--绘制函数\r\n  画笔.setColor(0xff7e5cf8)--设置画笔\r\n  画布.drawRect(100,100,300,300,画笔)--画布绘制矩形\r\nend))','2019-06-25 08:01:38.907617','自绘制教程'),('绘制自定义图形实例','import \"android.graphics.Path\"\r\nimport \"android.graphics.Paint\"\r\nimport \"android.graphics.Color\"\r\nimport \"android.graphics.RectF\"--导入依赖包\r\n--创建示例布局\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  id=\'布局画布\';--绑定id\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--显示布局\r\n布局画布.setBackground(--设置背景\r\nLuaDrawable(--设置自绘制\r\nfunction(画布,画笔)--绘制函数\r\n  --绘制表盘\r\n  画笔.setColor(0xff7e5cf8)--设置画笔颜色\r\n  画笔.setStyle(Paint.Style.STROKE)--设置画笔样式\r\n  画布.translate(画布.getWidth()/2, 200)--移动画布\r\n  画布.drawCircle(0, 0, 100, 画笔)--绘制圆\r\n  画布.save()--保存画布\r\n  画布.translate(-75, -75)--移动画布\r\n  --绘制文字\r\n  path = Path()--初始化路径\r\n  path.addArc(RectF(0,0,150,150), -180, 180)--绘制弧\r\n  citePaint = Paint(画笔)--定义新画笔\r\n  citePaint.setTextSize(14)--绘制文字的大小\r\n  citePaint.setStrokeWidth(1)--绘制文字的粗细\r\n  画布.drawTextOnPath(\"绘制表盘~\", path, 28, 0, citePaint)--绘制文字\r\n  画布.restore()--恢复画布\r\n  tmpPaint = Paint(画笔)--定义新画笔\r\n  tmpPaint.setStrokeWidth(1)--设置粗细\r\n  --绘制刻度\r\n  y=100--定义变量\r\n  count = 60--定义变量\r\n  for i=0,count do--循环\r\n    if i%5==0 then--判断\r\n      画布.drawLine(0, y, 0, y+12, 画笔)--绘制直线\r\n      画布.drawText(tostring(i/5+1), -4, y+25, tmpPaint)--绘制文字\r\n     else\r\n      画布.drawLine(0, y, 0, y +5, tmpPaint)--绘制直线\r\n    end\r\n    画布.rotate(360/count,0,0)--选择画布\r\n  end\r\n  --绘制指针\r\n  tmpPaint.setColor(Color.GRAY)--设置画笔颜色\r\n  tmpPaint.setStrokeWidth(4)--设置粗细\r\n  画布.drawCircle(0, 0, 7, tmpPaint)--绘制圆\r\n  tmpPaint.setStyle(Paint.Style.FILL)--设置画笔样式\r\n  tmpPaint.setColor(Color.YELLOW)--设置画笔颜色\r\n  画布.drawCircle(0, 0, 5, tmpPaint)--绘制圆\r\n  画布.drawLine(0, 10, 0, -65, 画笔)--绘制直线\r\nend))','2019-06-25 08:53:33.081499','自绘制教程'),('绘图测试','--绘图测试\r\nimport \'android.graphics.Color\'\r\nSorrowClover=\r\n{\r\n  LinearLayout;--线性布局\r\n  id=\'main_canvas\';\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\ne_table = {}\r\nfunction onTouchEvent(e)\r\n  code = e.getAction()\r\n  if(code==0) then\r\n    table.insert(e_table,e.getX())\r\n    table.insert(e_table,e.getY())\r\n  elseif(code==2) then\r\n    table.insert(e_table,e.getX())\r\n    table.insert(e_table,e.getY())\r\n  else\r\n    table.insert(e_table,e.getX())\r\n    table.insert(e_table,e.getY())\r\n    main_canvas.setBackgroundDrawable(LuaDrawable(function(canvas,paint,draw)\r\n      paint.setColor(Color.BLUE)\r\n      canvas.drawLines(e_table,paint)\r\n    end))\r\n  end\r\nend','2019-08-23 12:58:32.939111','小何研究笔记'),('翻页爬取论坛实战','--创建布局，用于显示爬取效果\r\n--翻页爬取的思路是：\r\n--获取网页的翻页所有链接，然后循环请求爬取\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  {\r\n    ScrollView;--纵向滚动\r\n    layout_width=\'fill\';--宽\r\n    layout_height=\'fill\';--高\r\n    {\r\n      TextView;--文本控件\r\n      id=\'显示文本\';--绑定ID\r\n      layout_width=\'fill\';--文本宽度\r\n      layout_height=\'fill\';--文本高度\r\n      Gravity=\'center\';--重力属性\r\n      textColor=\'#000000\';--文本颜色\r\n      text=\'正在爬取中\';--显示的文本\r\n      textSize=\'16sp\';--文本大小\r\n    };\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))--将布局添加至窗口\r\n--定义爬取翻页链接的网址\r\nurl = \'https://yum5.cn\'\r\n--请求链接\r\nHttp.get(url,nil,\'utf8\',nil,function(状态码,网页源码)\r\n  --判断网站状态\r\n  if 状态码 == 200 then\r\n    --获取所有页数链接\r\n    页数迭代器 = 网页源码:gmatch(\'<a href=\"index.-htm\" class=\"page.-\">(.-)</a>\')\r\n    --新建表，存放爬取数据\r\n    页数={}\r\n    --迭代页数迭代器，将数据存入表\r\n    for i in 页数迭代器 do\r\n      --这里筛选数字，因为部分数据是杂乱的\r\n      if i:find(\'%d\') then\r\n        table.insert(页数,i:match(\'(%d.*)\'))\r\n      end\r\n    end\r\n  --获取到页数\r\n    末尾页数 = tointeger(页数[#页数])\r\n    --新建表，存放帖子标题\r\n    帖子标题 = {}\r\n    --循环页数\r\n    for i=1,末尾页数 do\r\n      --将页数拼接进链接\r\n      url = \'https://yum5.cn/index-\'..i..\'.htm\'\r\n      --请求网页\r\n      Http.get(url,nil,\'utf8\',nil,function(状态码,网页源码)\r\n        --判断网站状态\r\n        if 状态码 == 200 then\r\n          --显示当前爬取页数\r\n          table.insert(帖子标题,\'第\'..i..\'页:\\n\\n\')\r\n          --爬取帖子标题信息\r\n          帖子标题迭代器 = 网页源码:gmatch(\'<a href=\"thread.-htm\">(.-)</a>\')\r\n          --迭代帖子标题迭代器，将数据存入表\r\n          for v in 帖子标题迭代器 do\r\n            table.insert(帖子标题,v)\r\n          end\r\n        --定义空文本，用于显示数据\r\n          文本=\'\'\r\n          --遍历表，取出数据\r\n          for k,v in pairs(帖子标题) do\r\n            --将数据文本累加\r\n            文本=文本..k..\'：\'..v..\'\\n\'\r\n          end\r\n        --展示数据\r\n          显示文本.setText(文本)\r\n         else\r\n          显示文本.setText(\'无法访问\')\r\n        end\r\n      end)\r\n    end\r\n   else\r\n    显示文本.setText(\'无法访问\')\r\n  end\r\nend)','2019-06-17 09:44:54.242629','String爬虫教程'),('自定义阴影颜色测试','SorrowClover=\r\n{\r\nLinearLayout;--线性布局\r\nOrientation=\'vertical\';--布局方向\r\nlayout_width=\'fill\';--布局宽度\r\nlayout_height=\'fill\';--布局高度\r\nbackground=\'#ffffff\';--布局背景颜色(或图片路径)\r\ngravity=\"center\";\r\n{\r\nLinearLayout;--线性布局\r\nid=\'btn_ele\';\r\nlayout_width=\'200dp\';--布局宽度\r\nlayout_height=\'100dp\';--布局高度\r\n{\r\nButton;--按钮控件\r\nlayout_marginRight=\'3dp\';--布局外边右距\r\nlayout_marginBottom=\'3dp\';--布局外边底距\r\ntext=\'自定义阴影按钮\';--显示的文本\r\ntextSize=\'18sp\';--文本大小\r\ntextColor=\'#ffffff\';--文本颜色\r\nlayout_width=\'fill\';--按钮宽度\r\nlayout_height=\'fill\';--按钮高度\r\nid=\'btn\';\r\n};\r\n};\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))\r\nimport \'android.graphics.drawable.shapes.RoundRectShape\'\r\nimport \'android.graphics.drawable.ShapeDrawable\'\r\nimport \'android.graphics.Color\'\r\nimport \'android.graphics.RectF\'\r\nbtn_shape=ShapeDrawable(RoundRectShape({10,10,10,10,10,10,10,10},RectF(),{20,20,20,20,20,20,20,20}))\r\nbtn_shape.getPaint().setColor(Color.BLUE)\r\nbtn.setBackgroundDrawable(btn_shape)\r\n\r\nbtn_ele_shape=ShapeDrawable(RoundRectShape({20,20,20,20,20,20,20,20},RectF(),{20,20,20,20,20,20,20,20}))\r\nbtn_ele_shape.getPaint().setColor(Color.BLUE)\r\nbtn_ele_shape.setAlpha(300)\r\nbtn_ele.setBackgroundDrawable(btn_ele_shape)','2019-08-09 02:14:53.021942','小何研究笔记'),('自绘制方法概述','我们绘制将会用到LuaDrawable方法：\r\n构建方法\r\ndraw=LuaDrawable(func)\r\nfunc 绘制函数，在每次绘制时调用\r\n传入3个参数\r\ncanvas 画布，paint 画笔，drawable 当前实例。\r\n这里不懂得可以看外面的示例\r\n\r\n相关方法：\r\nPaint(画笔):\r\nsetARGB(int a,int r,int g,int b): 设置绘制的颜色，a代表透明度，r，g，b代表颜色值。\r\nsetAlpha(int a): 设置绘制图形的透明度。\r\nsetColor(int color): 设置绘制的颜色，使用颜色值来表示，该颜色值包括透明度和RGB颜色。\r\nsetAntiAlias(boolean aa): 设置是否使用抗锯齿功能，会消耗较大资源，绘制图形速度会变慢。\r\nsetDither(boolean dither): 设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满，图像更加清晰\r\nsetFilterBitmap(boolean filter)： 如果该项设置为true，则图像在动画进行中会滤掉对Bitmap图像的优化操作， 加快显示速度，本设置项依赖于dither和xfermode的设置\r\nsetMaskFilter(MaskFilter maskfilter)： 设置MaskFilter，可以用不同的MaskFilter实现滤镜的效果，如滤化，立体等\r\nsetColorFilter(ColorFilter colorfilter)： 设置颜色过滤器，可以在绘制颜色时实现不用颜色的变换效果\r\nsetPathEffect(PathEffect effect) 设置绘制路径的效果，如点画线等\r\nsetShader(Shader shader)： 设置图像效果，使用Shader可以绘制出各种渐变效果\r\nsetShadowLayer(float radius ,float dx,float dy,int color)：在图形下面设置阴影层，产生阴影效果， radius为阴影的角度，dx和dy为阴影在x轴和y轴上的距离，color为阴影的颜色\r\nsetStyle(Paint.Style style)： 设置画笔的样式，为FILL，FILL_OR_STROKE，或STROKE\r\nsetStrokeCap(Paint.Cap cap)： 当画笔样式为STROKE或FILL_OR_STROKE时，设置笔刷的图形样式， 如圆形样Cap.ROUND,或方形样式Cap.SQUARE\r\nsetSrokeJoin(Paint.Join join)： 设置绘制时各图形的结合方式，如平滑效果等\r\nsetStrokeWidth(float width)： 当画笔样式为STROKE或FILL_OR_STROKE时，设置笔刷的粗细度\r\nsetXfermode(Xfermode xfermode)： 设置图形重叠时的处理方式，如合并，取交集或并集，经常用来制作橡皮的擦除效果\r\nsetFakeBoldText(boolean fakeBoldText)： 模拟实现粗体文字，设置在小字体上效果会非常差\r\nsetSubpixelText(boolean subpixelText)： 设置该项为true，将有助于文本在LCD屏幕上的显示效果\r\nsetTextAlign(Paint.Align align)： 设置绘制文字的对齐方向\r\nsetTextScaleX(float scaleX)： 设置绘制文字x轴的缩放比例，可以实现文字的拉伸的效果\r\nsetTextSize(float textSize)： 设置绘制文字的字号大小\r\nsetTextSkewX(float skewX)： 设置斜体文字，skewX为倾斜弧度\r\nsetTypeface(Typeface typeface)： 设置Typeface对象，即字体风格，包括粗体，斜体以及衬线体，非衬线体等\r\nsetUnderlineText(boolean underlineText)： 设置带有下划线的文字效果\r\nsetStrikeThruText(boolean strikeThruText)： 设置带有删除线的效果\r\nsetStrokeJoin(Paint.Join join)： 设置结合处的样子，Miter:结合处为锐角， Round:结合处为圆弧：BEVEL：结合处为直线\r\nsetStrokeMiter(float miter)：设置画笔倾斜度\r\nsetStrokeCap (Paint.Cap cap)：设置转弯处的风格 其他常用方法：\r\nfloat ascent( )：测量baseline之上至字符最高处的距离\r\nfloat descent()：baseline之下至字符最低处的距离\r\nint breakText(char[] text, int index, int count, float maxWidth, float[] measuredWidth)： 检测一行显示多少文字\r\nclearShadowLayer( )：清除阴影层 \r\n\r\nCanvas(画布):\r\ndrawRect(RectF rect, Paint paint) ：绘制区域，参数一为RectF一个区域\r\ndrawPath(Path path, Paint paint) ：绘制一个路径，参数一为Path路径对象\r\ndrawBitmap(Bitmap bitmap, Rect src, Rect dst, Paint paint) ： 贴图，参数一就是我们常规的Bitmap对象，参数二是源区域(这里是bitmap)， 参数三是目标区域(应该在canvas的位置和大小)，参数四是Paint画刷对象， 因为用到了缩放和拉伸的可能，当原始Rect不等于目标Rect时性能将会有大幅损失。\r\ndrawLine(float startX, float startY, float stopX, float stopY, Paintpaint) ： 画线，参数一起始点的x轴位置，参数二起始点的y轴位置，参数三终点的x轴水平位置， 参数四y轴垂直位置，最后一个参数为Paint 画刷对象。\r\ndrawPoint(float x, float y, Paint paint)： 画点，参数一水平x轴，参数二垂直y轴，第三个参数为Paint对象。\r\ndrawText(String text, float x, floaty, Paint paint) ： 渲染文本，Canvas类除了上面的还可以描绘文字，参数一是String类型的文本， 参数二x轴，参数三y轴，参数四是Paint对象。\r\ndrawOval(RectF oval, Paint paint)：画椭圆，参数一是扫描区域，参数二为paint对象；\r\ndrawCircle(float cx, float cy, float radius,Paint paint)： 绘制圆，参数一是中心点的x轴，参数二是中心点的y轴，参数三是半径，参数四是paint对象；\r\ndrawArc(RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint)： 画弧，参数一是RectF对象，一个矩形区域椭圆形的界限用于定义在形状、大小、电弧，参数二是起始角 (度)在电弧的开始，参数三扫描角(度)开始顺时针测量的，参数四是如果这是真的话,包括椭圆中心的电 弧,并关闭它,如果它是假这将是一个弧线,参数五是Paint对象；\r\nclipXXX()方法族:在当前的画图区域裁剪(clip)出一个新的画图区域，这个画图区域就是canvas 对象的当前画图区域了。比如：clipRect(new Rect())，那么该矩形区域就是canvas的当前画图区域\r\nsave()和restore()方法： save( )：用来保存Canvas的状态。save之后，可以调用Canvas的平移、放缩、旋转、错切、裁剪等操作！ restore（）：用来恢复Canvas之前保存的状态。防止save后对Canvas执行的操作对后续的绘制有影响。 save()和restore()要配对使用(restore可以比save少,但不能多)，若restore调用次数比save多,会报错！\r\ntranslate(float dx, float dy)： 平移，将画布的坐标原点向左右方向移动x，向上下方向移动y.canvas的默认位置是在（0,0）\r\nscale(float sx, float sy)：扩大，x为水平方向的放大倍数，y为竖直方向的放大倍数\r\nrotate(float degrees)：旋转，angle指旋转的角度，顺时针旋转\r\n\r\nPath(路径):\r\naddArc(RectF oval, float startAngle, float sweepAngle：为路径添加一个多边形\r\naddCircle(float x, float y, float radius, Path.Direction dir)：给path添加圆圈\r\naddOval(RectF oval, Path.Direction dir)：添加椭圆形\r\naddRect(RectF rect, Path.Direction dir)：添加一个区域\r\naddRoundRect(RectF rect, float[] radii, Path.Direction dir)：添加一个圆角区域\r\nisEmpty()：判断路径是否为空\r\ntransform(Matrix matrix)：应用矩阵变换\r\ntransform(Matrix matrix, Path dst)：应用矩阵变换并将结果放到新的路径中，即第二个参数。\r\nmoveTo(float x, float y)：不会进行绘制，只用于移动移动画笔\r\nlineTo(float x, float y)：用于直线绘制，默认从(0，0)开始绘制，用moveTo移动！ 比如 mPath.lineTo(300, 300); canvas.drawPath(mPath, mPaint);\r\nquadTo(float x1, float y1, float x2, float y2)： 用于绘制圆滑曲线，即贝塞尔曲线\r\nrCubicTo(float x1, float y1, float x2, float y2, float x3, float y3) 同样是用来实现贝塞尔曲线的。 (x1,y1) 为控制点，(x2,y2)为控制点，(x3,y3) 为结束点。\r\narcTo(RectF oval, float startAngle, float sweepAngle)： 绘制弧线（实际是截取圆或椭圆的一部分）ovalRectF为椭圆的矩形，startAngle 为开始角度， sweepAngle 为结束角度。\r\n\r\nDrawable常用方法：\r\ninvalidateSelf()：重绘制','2019-06-25 07:50:08.875074','自绘制教程'),('获取网页标题实战','--首先创建一个布局，为教程提供良好的可视化\r\nshamrock=\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或者图片路径)\r\n  Gravity=\'center\';--设置居中\r\n  {\r\n    TextView;--文本控件\r\n    id=\'文本\';--绑定ID\r\n    layout_margin=\'5%w\';--布局外边距\r\n    layout_width=\'wrap\';--文本宽度\r\n    layout_height=\'wrap\';--文本高度\r\n    Gravity=\'center\';--重力属性\r\n    textColor=\'#000000\';--文本颜色\r\n    text=\'查询网站标题中\';--显示的文本\r\n    textSize=\'18sp\';--文本大小\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(shamrock))\r\n--设置需要爬取的网站，可以随意更换\r\nurl = \'http://dh.hfybbs.vip\'\r\n\r\n--使用Http访问该网站，获取网页源码\r\nHttp.get(url,nil,\'utf8\',nil,function(状态码,网页源码)\r\n  --判断返回状态码，确定网站的正常运行\r\n  if 状态码 ==200 then\r\n    --分析网页结构，发现标题在title标签内，所以进行截取\r\n    title = 网页源码:match(\'<title>(.-)</title>\')\r\n    --将截取到的标题设置至文本显示\r\n    文本.setText(title)\r\n   else\r\n    文本.setText(\'该网站无法访问\')\r\n  end\r\nend)','2019-06-12 10:36:52.909045','String爬虫教程'),('讯飞远程更新实战','--[[\r\n很多同学似乎还不会远程更新，其实所谓讯飞远程更新也就是爬虫的\r\n一种运用方式，结合前面所学和查看下面的链接的网页结构\r\n你就能写出属于你的远程更新。\r\n]]\r\nSorrowClover=--随便写的一个布局，没有任何意义。\r\n{\r\n  LinearLayout;--线性布局\r\n  Orientation=\'vertical\';--布局方向\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))--显示布局\r\n--定义一个你的讯飞远程链接\r\n--可以复制到浏览器看看网页结构\r\nurl=\"http://www.iyuji.cn/iyuji/s/akc1ZDNSKyt5RW9nUlA3MW5CNzJ1UT09/1562658886677508\"\r\n--使用http获取网页源码\r\nHttp.get(url,nil,\"utf8\",nil,function(code,content)\r\n --判断网页状态 \r\n  if code==200 then\r\n    --获取当前应用包名\r\n    包名=activity.getPackageName()\r\n    --利用包名获取到当前版本号\r\n    当前版本=tonumber(activity.getPackageManager().getPackageInfo(包名, 0).versionName)\r\n    --获取远程更新版本号\r\n    更新版本=tonumber(content:match(\"【版本】(.-)【版本】\"))\r\n    --比较版本号\r\n    if 更新版本 > 当前版本 then\r\n      --制作对话框，显示更新提示\r\n      更新说明=content:match(\"【更新说明】(.-)【更新说明】\")\r\n      更新链接=content:match(\"【更新链接】(.-)【更新链接】\")\r\n      AlertDialog.Builder(this)\r\n      .setTitle(\"你有新版本更新\")\r\n      .setMessage(更新说明)\r\n      .setPositiveButton(\"更新\",{onClick=function(v)\r\n          import \"android.content.Intent\"\r\n          import \"android.net.Uri\"\r\n          url=更新链接\r\n          viewIntent = Intent(\"android.intent.action.VIEW\",Uri.parse(url))\r\n          activity.startActivity(viewIntent)\r\n        end})\r\n      .setNegativeButton(\"取消\",nil)\r\n      .show()\r\n     --判断正版软件\r\n     elseif 更新版本 < 当前版本 then\r\n      更新链接=content:match(\"【更新链接】(.-)【更新链接】\")\r\n      AlertDialog.Builder(this)\r\n      .setTitle(\"非正版警告\")\r\n      .setMessage(\"你的软件版本远远高于正式版，被人非法修改，属于盗版行为，请支持正版！\")\r\n      .setPositiveButton(\"下载正版\",{onClick=function(v)\r\n          import \"android.content.Intent\"\r\n          import \"android.net.Uri\"\r\n          url=更新链接\r\n          viewIntent = Intent(\"android.intent.action.VIEW\",Uri.parse(url))\r\n          activity.startActivity(viewIntent)\r\n        end})\r\n      .setNegativeButton(\"取消\",nil)\r\n      .show()\r\n     else\r\n      print(\"已是最新版本\")\r\n    end\r\n   else\r\n    print(\"检测更新失败\")\r\n  end\r\nend)','2019-07-09 08:18:06.652482','String爬虫教程'),('贝塞尔曲线初探','--贝塞尔曲线\r\nimport \'com.androlua.LuaDrawable\'\r\nimport \'android.graphics.Paint\'\r\nimport \'android.graphics.Path\'\r\nSorrowClover=\r\n{\r\n  FrameLayout;--帧布局\r\n  layout_width=\'fill\';--布局宽度\r\n  layout_height=\'fill\';--布局高度\r\n  background=\'#ffffff\';--布局背景颜色(或图片路径)\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'vertical\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'fill\';--布局高度\r\n    layout_marginBottom=\'300\';--布局外边底距\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    Orientation=\'horizontal\';--布局方向\r\n    layout_width=\'fill\';--布局宽度\r\n    layout_height=\'300\';--布局高度\r\n    layout_gravity=\'bottom\';--子控件在父控件中的对齐方式\r\n    BackgroundDrawable=LuaDrawable(function(canvas,paint,draw)\r\n      b=draw.getBounds()\r\n      w=b.width()\r\n      h=b.height()\r\n      paint.setAntiAlias(true)\r\n      paint.setColor(0xffF17F42)\r\n      path=Path()\r\n      path.lineTo(b.centerX()-150,0)\r\n      path.cubicTo(b.centerX()-75,150,b.centerX()+75,150,b.centerX()+150,0)\r\n      path.lineTo(w,0)\r\n      path.lineTo(w,h)\r\n      path.lineTo(0,h)\r\n      path.close()\r\n      canvas.drawPath(path,paint)\r\n    end);--布局背景颜色(或图片路径)\r\n  };\r\n  {\r\n    LinearLayout;--线性布局\r\n    layout_width=\'300\';--布局宽度\r\n    layout_height=\'300\';--布局高度\r\n    layout_gravity=\'bottom|center\';--子控件在父控件中的对齐方式\r\n    layout_marginBottom=\'200\';--布局外边底距\r\n    BackgroundDrawable=LuaDrawable(function(canvas,paint,draw)\r\n      b=draw.getBounds()\r\n      w=b.width()\r\n      h=b.height()\r\n      paint.setShadowLayer(45,0.5,0.5,0xffF17F42)\r\n      paint.setAntiAlias(true)\r\n      paint.setColor(0xffF17F42)\r\n      path=Path()\r\n      path.addCircle(b.centerX(),b.centerY(),140,Path.Direction.CCW)\r\n      canvas.clipPath(path)\r\n      path.moveTo(30,b.centerY())\r\n      canvas.drawPath(path,paint)\r\n      mypaint=Paint()\r\n      mypaint.setColor(0xffffffff)\r\n      mypaint.setStyle(Paint.Style.STROKE)\r\n      mypaint.setStrokeWidth(10)\r\n      path.lineTo(w-30,b.centerY())\r\n      path.moveTo(b.centerX(),30)\r\n      path.lineTo(b.centerX(),h-30)\r\n      canvas.drawPath(path,mypaint)\r\n    end);\r\n  };\r\n};\r\nactivity.setContentView(loadlayout(SorrowClover))','2019-08-22 00:18:46.715129','小何研究笔记'),('高斯模糊测试','import \"android.renderscript.Element\"\r\nimport \"android.renderscript.Allocation\"\r\nimport \"android.renderscript.RenderScript\"\r\nimport \"android.graphics.Bitmap\"\r\nimport \"android.renderscript.ScriptIntrinsicBlur\"\r\nimport \"android.graphics.Matrix\"\r\nimport \'android.graphics.drawable.BitmapDrawable\'\r\n\r\nfunction 高斯模糊(id,tp,radius1,radius2)\r\n  function blur( context, bitmap, blurRadius)\r\n    renderScript = RenderScript.create(context);\r\n    blurScript = ScriptIntrinsicBlur.create(renderScript, Element.U8_4(renderScript));\r\n    inAllocation = Allocation.createFromBitmap(renderScript, bitmap);\r\n    outputBitmap = bitmap;\r\n    outAllocation = Allocation.createTyped(renderScript, inAllocation.getType());\r\n    blurScript.setRadius(blurRadius);\r\n    blurScript.setInput(inAllocation);\r\n    blurScript.forEach(outAllocation);\r\n    outAllocation.copyTo(outputBitmap);\r\n    inAllocation.destroy();\r\n    outAllocation.destroy();\r\n    renderScript.destroy();\r\n    blurScript.destroy();\r\n    return outputBitmap;\r\n  end\r\n  function zoomBitmap(bitmap,scale)\r\n    w = bitmap.getWidth();\r\n    h = bitmap.getHeight();\r\n    matrix = Matrix();\r\n    matrix.postScale(scale, scale);\r\n    bitmap = Bitmap.createBitmap(bitmap, 0, 0, w, h, matrix, true);\r\n    return bitmap;\r\n  end\r\n  function blurAndZoom(context,bitmap,blurRadius,scale)\r\n    return zoomBitmap(blur(context,zoomBitmap(bitmap, 1 / scale), blurRadius), scale);\r\n  end\r\n  id.setBackgroundDrawable(BitmapDrawable((blurAndZoom(activity,tp,radius1,radius2))))\r\nend\r\n--[[\r\n高斯模糊(id,tp,radius1,radius2)\r\nradius1 范围：1-25\r\nradius2 范围：1-？(据图片而定太大报错)\r\n]]\r\n\r\n--调用例子\r\nimg=ImageView(activity)\r\nactivity.setContentView(img)\r\n\r\n高斯模糊(img,loadbitmap(\"https://image.uisdc.com/wp-content/uploads/2019/06/uisdc-banner-20190614-2.jpg\"),4,2)\r\n--此代码来自mlua手册，稍微改动便于使用。如有侵权请联系我，会立刻删除。','2019-08-12 13:49:51.378878','小何研究笔记');

/*Table structure for table `jxwd_jxwd_fenlei` */

DROP TABLE IF EXISTS `jxwd_jxwd_fenlei`;

CREATE TABLE `jxwd_jxwd_fenlei` (
  `分类名` varchar(20) NOT NULL,
  `创建时间` datetime(6) NOT NULL,
  PRIMARY KEY (`分类名`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/*Data for the table `jxwd_jxwd_fenlei` */

insert  into `jxwd_jxwd_fenlei`(`分类名`,`创建时间`) values ('FA专用教程','2019-06-09 07:42:04.616067'),('jsoup爬虫教学','2019-07-04 04:33:27.516820'),('Lua封装函数','2019-08-14 15:58:17.715626'),('OkHttp教程','2019-08-18 03:47:10.640250'),('String爬虫教程','2019-06-12 09:34:01.052039'),('小何研究笔记','2019-06-25 11:49:50.623473'),('布局实战','2019-06-21 16:40:41.516658'),('布局教程','2019-06-18 05:49:40.921265'),('自绘制教程','2019-06-25 07:49:31.107467');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
